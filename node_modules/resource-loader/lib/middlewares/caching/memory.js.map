{"version":3,"sources":["../../../src/middlewares/caching/memory.js"],"names":["memoryMiddlewareFactory","cache","memoryMiddleware","resource","next","url","data","complete","onComplete","once"],"mappings":";;;QAGgBA,uB,GAAAA,uB;AAHhB;AACA,IAAMC,QAAQ,EAAd;;AAEO,SAASD,uBAAT,GAAmC;AACtC,WAAO,SAASE,gBAAT,CAA0BC,QAA1B,EAAoCC,IAApC,EAA0C;AAAA;;AAC7C;AACA,YAAIH,MAAME,SAASE,GAAf,CAAJ,EAAyB;AACrBF,qBAASG,IAAT,GAAgBL,MAAME,SAASE,GAAf,CAAhB;AACAF,qBAASI,QAAT,GAFqB,CAEA;AACxB;AACD;AAJA,aAKK;AACDJ,yBAASK,UAAT,CAAoBC,IAApB,CAAyB;AAAA,2BAAOR,MAAM,MAAKI,GAAX,IAAkB,MAAKC,IAA9B;AAAA,iBAAzB;AACH;;AAEDF;AACH,KAZD;AAaH","file":"memory.js","sourcesContent":["// a simple in-memory cache for resources\nconst cache = {};\n\nexport function memoryMiddlewareFactory() {\n    return function memoryMiddleware(resource, next) {\n        // if cached, then set data and complete the resource\n        if (cache[resource.url]) {\n            resource.data = cache[resource.url];\n            resource.complete(); // marks resource load complete and stops processing before middlewares\n        }\n        // if not cached, wait for complete and store it in the cache.\n        else {\n            resource.onComplete.once(() => (cache[this.url] = this.data));\n        }\n\n        next();\n    };\n}\n"]}