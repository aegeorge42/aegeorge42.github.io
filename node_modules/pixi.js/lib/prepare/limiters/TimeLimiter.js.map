{"version":3,"sources":["../../../src/prepare/limiters/TimeLimiter.js"],"names":["TimeLimiter","maxMilliseconds","frameStart","beginFrame","Date","now","allowedToUpload"],"mappings":";;;;;;AAAA;;;;;;;IAOqBA,W;AAEjB;;;AAGA,uBAAYC,eAAZ,EACA;AAAA;;AACI;;;;AAIA,SAAKA,eAAL,GAAuBA,eAAvB;AACA;;;;;AAKA,SAAKC,UAAL,GAAkB,CAAlB;AACH;;AAED;;;;;wBAGAC,U,yBACA;AACI,SAAKD,UAAL,GAAkBE,KAAKC,GAAL,EAAlB;AACH,G;;AAED;;;;;;wBAIAC,e,8BACA;AACI,WAAOF,KAAKC,GAAL,KAAa,KAAKH,UAAlB,GAA+B,KAAKD,eAA3C;AACH,G;;;;;kBAnCgBD,W","file":"TimeLimiter.js","sourcesContent":["/**\n * TimeLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n * number of milliseconds per frame.\n *\n * @class\n * @memberof PIXI\n */\nexport default class TimeLimiter\n{\n    /**\n     * @param {number} maxMilliseconds - The maximum milliseconds that can be spent preparing items each frame.\n     */\n    constructor(maxMilliseconds)\n    {\n        /**\n         * The maximum milliseconds that can be spent preparing items each frame.\n         * @private\n         */\n        this.maxMilliseconds = maxMilliseconds;\n        /**\n         * The start time of the current frame.\n         * @type {number}\n         * @private\n         */\n        this.frameStart = 0;\n    }\n\n    /**\n     * Resets any counting properties to start fresh on a new frame.\n     */\n    beginFrame()\n    {\n        this.frameStart = Date.now();\n    }\n\n    /**\n     * Checks to see if another item can be uploaded. This should only be called once per item.\n     * @return {boolean} If the item is allowed to be uploaded.\n     */\n    allowedToUpload()\n    {\n        return Date.now() - this.frameStart < this.maxMilliseconds;\n    }\n}\n"]}