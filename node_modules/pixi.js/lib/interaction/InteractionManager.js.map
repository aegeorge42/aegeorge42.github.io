{"version":3,"sources":["../../src/interaction/InteractionManager.js"],"names":["core","utils","mixins","delayMixin","DisplayObject","prototype","MOUSE_POINTER_ID","hitTestEvent","target","data","global","InteractionManager","renderer","options","autoPreventDefault","undefined","interactionFrequency","mouse","identifier","set","activeInteractionData","interactionDataPool","eventData","interactionDOMElement","moveWhenInside","eventsAdded","mouseOverRenderer","supportsTouchEvents","window","supportsPointerEvents","PointerEvent","onPointerUp","bind","processPointerUp","onPointerCancel","processPointerCancel","onPointerDown","processPointerDown","onPointerMove","processPointerMove","onPointerOut","processPointerOverOut","onPointerOver","cursorStyles","default","pointer","currentCursorMode","cursor","_tempPoint","Point","resolution","setTargetElement","view","hitTest","globalPoint","root","_lastObjectRendered","processInteractive","element","removeEvents","addEvents","ticker","shared","add","update","UPDATE_PRIORITY","INTERACTION","navigator","msPointerEnabled","style","document","addEventListener","remove","removeEventListener","deltaTime","_deltaTime","didMove","k","hasOwnProperty","interactionData","originalEvent","pointerType","interactionEvent","configureInteractionEventForDOMEvent","setCursorMode","mode","Object","assign","call","dispatchEvent","displayObject","eventString","stopped","currentTarget","type","emit","mapPositionToPoint","point","x","y","rect","parentElement","width","height","getBoundingClientRect","resolutionMultiplier","isCocoonJS","left","top","func","interactive","visible","hit","interactiveParent","hitTestChildren","hitArea","worldTransform","applyInverse","contains","_mask","containsPoint","interactiveChildren","children","i","length","child","childHit","parent","events","normalizeToPointerData","isNormalized","preventDefault","eventLen","event","getInteractionDataForPointerId","isRightButton","button","id","trackedPointers","rightDown","leftDown","onPointerComplete","cancelled","eventAppend","releaseInteractionDataForPointerId","pointerId","trackingData","isTouch","isMouse","isMouseTap","flags","FLAGS","test","RIGHT_DOWN","LEFT_DOWN","isDown","over","none","pop","copyEvent","reset","push","pointerEvent","clientX","clientY","globalX","globalY","normalizedEvents","TouchEvent","li","changedTouches","touch","touches","buttons","isPrimary","radiusX","radiusY","tiltX","tiltY","pressure","force","twist","tangentialPressure","layerX","offsetX","layerY","offsetY","MouseEvent","destroy","removeAllListeners","WebGLRenderer","registerPlugin","CanvasRenderer"],"mappings":";;;;;;AAAA;;IAAYA,I;;AACZ;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA;AACAA,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,UAAlB,CACIH,KAAKI,aAAL,CAAmBC,SADvB;;AAKA,IAAMC,mBAAmB,CAAzB;;AAEA;AACA,IAAMC,eAAe;AACjBC,YAAQ,IADS;AAEjBC,UAAM;AACFC,gBAAQ;AADN;AAFW,CAArB;;AAOA;;;;;;;;;;;;IAWqBC,kB;;;AAEjB;;;;;;AAMA,gCAAYC,QAAZ,EAAsBC,OAAtB,EACA;AAAA;;AAAA,qDACI,wBADJ;;AAGIA,kBAAUA,WAAW,EAArB;;AAEA;;;;;AAKA,cAAKD,QAAL,GAAgBA,QAAhB;;AAEA;;;;;;;;;AASA,cAAKE,kBAAL,GAA0BD,QAAQC,kBAAR,KAA+BC,SAA/B,GAA2CF,QAAQC,kBAAnD,GAAwE,IAAlG;;AAEA;;;;;;AAMA,cAAKE,oBAAL,GAA4BH,QAAQG,oBAAR,IAAgC,EAA5D;;AAEA;;;;;AAKA,cAAKC,KAAL,GAAa,+BAAb;AACA,cAAKA,KAAL,CAAWC,UAAX,GAAwBZ,gBAAxB;;AAEA;AACA;AACA,cAAKW,KAAL,CAAWP,MAAX,CAAkBS,GAAlB,CAAsB,CAAC,MAAvB;;AAEA;;;;;;AAMA,cAAKC,qBAAL,GAA6B,EAA7B;AACA,cAAKA,qBAAL,CAA2Bd,gBAA3B,IAA+C,MAAKW,KAApD;;AAEA;;;;;;AAMA,cAAKI,mBAAL,GAA2B,EAA3B;;AAEA;;;;;AAKA,cAAKC,SAAL,GAAiB,gCAAjB;;AAEA;;;;;;AAMA,cAAKC,qBAAL,GAA6B,IAA7B;;AAEA;;;;;;;;;;;AAWA,cAAKC,cAAL,GAAsB,KAAtB;;AAEA;;;;;;AAMA,cAAKC,WAAL,GAAmB,KAAnB;;AAEA;;;;;;AAMA,cAAKC,iBAAL,GAAyB,KAAzB;;AAEA;;;;;;;AAOA,cAAKC,mBAAL,GAA2B,kBAAkBC,MAA7C;;AAEA;;;;;;;AAOA,cAAKC,qBAAL,GAA6B,CAAC,CAACD,OAAOE,YAAtC;;AAEA;;AAEA;;;;AAIA,cAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,OAAnB;AACA,cAAKC,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBD,IAAtB,OAAxB;;AAEA;;;;AAIA,cAAKE,eAAL,GAAuB,MAAKA,eAAL,CAAqBF,IAArB,OAAvB;AACA,cAAKG,oBAAL,GAA4B,MAAKA,oBAAL,CAA0BH,IAA1B,OAA5B;;AAEA;;;;AAIA,cAAKI,aAAL,GAAqB,MAAKA,aAAL,CAAmBJ,IAAnB,OAArB;AACA,cAAKK,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBL,IAAxB,OAA1B;;AAEA;;;;AAIA,cAAKM,aAAL,GAAqB,MAAKA,aAAL,CAAmBN,IAAnB,OAArB;AACA,cAAKO,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBP,IAAxB,OAA1B;;AAEA;;;;AAIA,cAAKQ,YAAL,GAAoB,MAAKA,YAAL,CAAkBR,IAAlB,OAApB;AACA,cAAKS,qBAAL,GAA6B,MAAKA,qBAAL,CAA2BT,IAA3B,OAA7B;;AAEA;;;;AAIA,cAAKU,aAAL,GAAqB,MAAKA,aAAL,CAAmBV,IAAnB,OAArB;;AAEA;;;;;;;AAOA,cAAKW,YAAL,GAAoB;AAChBC,qBAAS,SADO;AAEhBC,qBAAS;AAFO,SAApB;;AAKA;;;;;;AAMA,cAAKC,iBAAL,GAAyB,IAAzB;;AAEA;;;;;;AAMA,cAAKC,MAAL,GAAc,IAAd;;AAEA;;;;;;AAMA,cAAKC,UAAL,GAAkB,IAAIhD,KAAKiD,KAAT,EAAlB;;AAEA;;;;;;AAMA,cAAKC,UAAL,GAAkB,CAAlB;;AAEA,cAAKC,gBAAL,CAAsB,MAAKvC,QAAL,CAAcwC,IAApC,EAA0C,MAAKxC,QAAL,CAAcsC,UAAxD;;AAEA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;AAOA;;;;;;;AAOA;;;;;;;AAOA;;;;;;;AAOA;;;;;;;;;;AAUA;;;;;;;AAOA;;;;;;;AAOA;;;;;;;;AAQA;;;;;;;AAOA;;;;;;;AAOA;;;;;;;AAOA;;;;;;;AAOA;;;;;;;AAOA;;;;;;;AAOA;;;;;;;AAOA;;;;;;;;AAQA;;;;;;;AAOA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;;AASA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;;AASA;;;;;;;AAvlBJ;AA8lBC;;AAED;;;;;;;;;;iCAQAG,O,oBAAQC,W,EAAaC,I,EACrB;AACI;AACAhD,qBAAaC,MAAb,GAAsB,IAAtB;AACA;AACAD,qBAAaE,IAAb,CAAkBC,MAAlB,GAA2B4C,WAA3B;AACA;AACA,YAAI,CAACC,IAAL,EACA;AACIA,mBAAO,KAAK3C,QAAL,CAAc4C,mBAArB;AACH;AACD;AACA,aAAKC,kBAAL,CAAwBlD,YAAxB,EAAsCgD,IAAtC,EAA4C,IAA5C,EAAkD,IAAlD;AACA;;AAEA,eAAOhD,aAAaC,MAApB;AACH,K;;AAED;;;;;;;;;;iCAQA2C,gB,6BAAiBO,O,EACjB;AAAA,YAD0BR,UAC1B,uEADuC,CACvC;;AACI,aAAKS,YAAL;;AAEA,aAAKpC,qBAAL,GAA6BmC,OAA7B;;AAEA,aAAKR,UAAL,GAAkBA,UAAlB;;AAEA,aAAKU,SAAL;AACH,K;;AAED;;;;;;;iCAKAA,S,wBACA;AACI,YAAI,CAAC,KAAKrC,qBAAV,EACA;AACI;AACH;;AAEDvB,aAAK6D,MAAL,CAAYC,MAAZ,CAAmBC,GAAnB,CAAuB,KAAKC,MAA5B,EAAoC,IAApC,EAA0ChE,KAAKiE,eAAL,CAAqBC,WAA/D;;AAEA,YAAItC,OAAOuC,SAAP,CAAiBC,gBAArB,EACA;AACI,iBAAK7C,qBAAL,CAA2B8C,KAA3B,CAAiC,qBAAjC,IAA0D,MAA1D;AACA,iBAAK9C,qBAAL,CAA2B8C,KAA3B,CAAiC,kBAAjC,IAAuD,MAAvD;AACH,SAJD,MAKK,IAAI,KAAKxC,qBAAT,EACL;AACI,iBAAKN,qBAAL,CAA2B8C,KAA3B,CAAiC,cAAjC,IAAmD,MAAnD;AACH;;AAED;;;;AAIA,YAAI,KAAKxC,qBAAT,EACA;AACID,mBAAO0C,QAAP,CAAgBC,gBAAhB,CAAiC,aAAjC,EAAgD,KAAKjC,aAArD,EAAoE,IAApE;AACA,iBAAKf,qBAAL,CAA2BgD,gBAA3B,CAA4C,aAA5C,EAA2D,KAAKnC,aAAhE,EAA+E,IAA/E;AACA;AACA;AACA;AACA,iBAAKb,qBAAL,CAA2BgD,gBAA3B,CAA4C,cAA5C,EAA4D,KAAK/B,YAAjE,EAA+E,IAA/E;AACA,iBAAKjB,qBAAL,CAA2BgD,gBAA3B,CAA4C,aAA5C,EAA2D,KAAK7B,aAAhE,EAA+E,IAA/E;AACAd,mBAAO2C,gBAAP,CAAwB,eAAxB,EAAyC,KAAKrC,eAA9C,EAA+D,IAA/D;AACAN,mBAAO2C,gBAAP,CAAwB,WAAxB,EAAqC,KAAKxC,WAA1C,EAAuD,IAAvD;AACH,SAXD,MAaA;AACIH,mBAAO0C,QAAP,CAAgBC,gBAAhB,CAAiC,WAAjC,EAA8C,KAAKjC,aAAnD,EAAkE,IAAlE;AACA,iBAAKf,qBAAL,CAA2BgD,gBAA3B,CAA4C,WAA5C,EAAyD,KAAKnC,aAA9D,EAA6E,IAA7E;AACA,iBAAKb,qBAAL,CAA2BgD,gBAA3B,CAA4C,UAA5C,EAAwD,KAAK/B,YAA7D,EAA2E,IAA3E;AACA,iBAAKjB,qBAAL,CAA2BgD,gBAA3B,CAA4C,WAA5C,EAAyD,KAAK7B,aAA9D,EAA6E,IAA7E;AACAd,mBAAO2C,gBAAP,CAAwB,SAAxB,EAAmC,KAAKxC,WAAxC,EAAqD,IAArD;AACH;;AAED;AACA;AACA;AACA,YAAI,KAAKJ,mBAAT,EACA;AACI,iBAAKJ,qBAAL,CAA2BgD,gBAA3B,CAA4C,YAA5C,EAA0D,KAAKnC,aAA/D,EAA8E,IAA9E;AACA,iBAAKb,qBAAL,CAA2BgD,gBAA3B,CAA4C,aAA5C,EAA2D,KAAKrC,eAAhE,EAAiF,IAAjF;AACA,iBAAKX,qBAAL,CAA2BgD,gBAA3B,CAA4C,UAA5C,EAAwD,KAAKxC,WAA7D,EAA0E,IAA1E;AACA,iBAAKR,qBAAL,CAA2BgD,gBAA3B,CAA4C,WAA5C,EAAyD,KAAKjC,aAA9D,EAA6E,IAA7E;AACH;;AAED,aAAKb,WAAL,GAAmB,IAAnB;AACH,K;;AAED;;;;;;;iCAKAkC,Y,2BACA;AACI,YAAI,CAAC,KAAKpC,qBAAV,EACA;AACI;AACH;;AAEDvB,aAAK6D,MAAL,CAAYC,MAAZ,CAAmBU,MAAnB,CAA0B,KAAKR,MAA/B,EAAuC,IAAvC;;AAEA,YAAIpC,OAAOuC,SAAP,CAAiBC,gBAArB,EACA;AACI,iBAAK7C,qBAAL,CAA2B8C,KAA3B,CAAiC,qBAAjC,IAA0D,EAA1D;AACA,iBAAK9C,qBAAL,CAA2B8C,KAA3B,CAAiC,kBAAjC,IAAuD,EAAvD;AACH,SAJD,MAKK,IAAI,KAAKxC,qBAAT,EACL;AACI,iBAAKN,qBAAL,CAA2B8C,KAA3B,CAAiC,cAAjC,IAAmD,EAAnD;AACH;;AAED,YAAI,KAAKxC,qBAAT,EACA;AACID,mBAAO0C,QAAP,CAAgBG,mBAAhB,CAAoC,aAApC,EAAmD,KAAKnC,aAAxD,EAAuE,IAAvE;AACA,iBAAKf,qBAAL,CAA2BkD,mBAA3B,CAA+C,aAA/C,EAA8D,KAAKrC,aAAnE,EAAkF,IAAlF;AACA,iBAAKb,qBAAL,CAA2BkD,mBAA3B,CAA+C,cAA/C,EAA+D,KAAKjC,YAApE,EAAkF,IAAlF;AACA,iBAAKjB,qBAAL,CAA2BkD,mBAA3B,CAA+C,aAA/C,EAA8D,KAAK/B,aAAnE,EAAkF,IAAlF;AACAd,mBAAO6C,mBAAP,CAA2B,eAA3B,EAA4C,KAAKvC,eAAjD,EAAkE,IAAlE;AACAN,mBAAO6C,mBAAP,CAA2B,WAA3B,EAAwC,KAAK1C,WAA7C,EAA0D,IAA1D;AACH,SARD,MAUA;AACIH,mBAAO0C,QAAP,CAAgBG,mBAAhB,CAAoC,WAApC,EAAiD,KAAKnC,aAAtD,EAAqE,IAArE;AACA,iBAAKf,qBAAL,CAA2BkD,mBAA3B,CAA+C,WAA/C,EAA4D,KAAKrC,aAAjE,EAAgF,IAAhF;AACA,iBAAKb,qBAAL,CAA2BkD,mBAA3B,CAA+C,UAA/C,EAA2D,KAAKjC,YAAhE,EAA8E,IAA9E;AACA,iBAAKjB,qBAAL,CAA2BkD,mBAA3B,CAA+C,WAA/C,EAA4D,KAAK/B,aAAjE,EAAgF,IAAhF;AACAd,mBAAO6C,mBAAP,CAA2B,SAA3B,EAAsC,KAAK1C,WAA3C,EAAwD,IAAxD;AACH;;AAED,YAAI,KAAKJ,mBAAT,EACA;AACI,iBAAKJ,qBAAL,CAA2BkD,mBAA3B,CAA+C,YAA/C,EAA6D,KAAKrC,aAAlE,EAAiF,IAAjF;AACA,iBAAKb,qBAAL,CAA2BkD,mBAA3B,CAA+C,aAA/C,EAA8D,KAAKvC,eAAnE,EAAoF,IAApF;AACA,iBAAKX,qBAAL,CAA2BkD,mBAA3B,CAA+C,UAA/C,EAA2D,KAAK1C,WAAhE,EAA6E,IAA7E;AACA,iBAAKR,qBAAL,CAA2BkD,mBAA3B,CAA+C,WAA/C,EAA4D,KAAKnC,aAAjE,EAAgF,IAAhF;AACH;;AAED,aAAKf,qBAAL,GAA6B,IAA7B;;AAEA,aAAKE,WAAL,GAAmB,KAAnB;AACH,K;;AAED;;;;;;;;iCAMAuC,M,mBAAOU,S,EACP;AACI,aAAKC,UAAL,IAAmBD,SAAnB;;AAEA,YAAI,KAAKC,UAAL,GAAkB,KAAK3D,oBAA3B,EACA;AACI;AACH;;AAED,aAAK2D,UAAL,GAAkB,CAAlB;;AAEA,YAAI,CAAC,KAAKpD,qBAAV,EACA;AACI;AACH;;AAED;AACA,YAAI,KAAKqD,OAAT,EACA;AACI,iBAAKA,OAAL,GAAe,KAAf;;AAEA;AACH;;AAED,aAAK7B,MAAL,GAAc,IAAd;;AAEA;AACA;AACA;AACA,aAAK,IAAM8B,CAAX,IAAgB,KAAKzD,qBAArB,EACA;AACI;AACA,gBAAI,KAAKA,qBAAL,CAA2B0D,cAA3B,CAA0CD,CAA1C,CAAJ,EACA;AACI,oBAAME,kBAAkB,KAAK3D,qBAAL,CAA2ByD,CAA3B,CAAxB;;AAEA,oBAAIE,gBAAgBC,aAAhB,IAAiCD,gBAAgBE,WAAhB,KAAgC,OAArE,EACA;AACI,wBAAMC,mBAAmB,KAAKC,oCAAL,CACrB,KAAK7D,SADgB,EAErByD,gBAAgBC,aAFK,EAGrBD,eAHqB,CAAzB;;AAMA,yBAAKtB,kBAAL,CACIyB,gBADJ,EAEI,KAAKtE,QAAL,CAAc4C,mBAFlB,EAGI,KAAKf,qBAHT,EAII,IAJJ;AAMH;AACJ;AACJ;;AAED,aAAK2C,aAAL,CAAmB,KAAKrC,MAAxB;;AAEA;AACH,K;;AAED;;;;;;;iCAKAqC,a,0BAAcC,I,EACd;AACIA,eAAOA,QAAQ,SAAf;AACA;AACA,YAAI,KAAKvC,iBAAL,KAA2BuC,IAA/B,EACA;AACI;AACH;AACD,aAAKvC,iBAAL,GAAyBuC,IAAzB;AACA,YAAMhB,QAAQ,KAAK1B,YAAL,CAAkB0C,IAAlB,CAAd;;AAEA;AACA,YAAIhB,KAAJ,EACA;AACI,2BAAeA,KAAf,yCAAeA,KAAf;AAEI,qBAAK,QAAL;AACI;AACA,yBAAK9C,qBAAL,CAA2B8C,KAA3B,CAAiCtB,MAAjC,GAA0CsB,KAA1C;AACA;AACJ,qBAAK,UAAL;AACI;AACAA,0BAAMgB,IAAN;AACA;AACJ,qBAAK,QAAL;AACI;AACA;AACAC,2BAAOC,MAAP,CAAc,KAAKhE,qBAAL,CAA2B8C,KAAzC,EAAgDA,KAAhD;AACA;AAdR;AAgBH,SAlBD,MAmBK,IAAI,OAAOgB,IAAP,KAAgB,QAAhB,IAA4B,CAACC,OAAOjF,SAAP,CAAiByE,cAAjB,CAAgCU,IAAhC,CAAqC,KAAK7C,YAA1C,EAAwD0C,IAAxD,CAAjC,EACL;AACI;AACA;AACA,iBAAK9D,qBAAL,CAA2B8C,KAA3B,CAAiCtB,MAAjC,GAA0CsC,IAA1C;AACH;AACJ,K;;AAED;;;;;;;;;;iCAQAI,a,0BAAcC,a,EAAeC,W,EAAarE,S,EAC1C;AACI,YAAI,CAACA,UAAUsE,OAAf,EACA;AACItE,sBAAUuE,aAAV,GAA0BH,aAA1B;AACApE,sBAAUwE,IAAV,GAAiBH,WAAjB;;AAEAD,0BAAcK,IAAd,CAAmBJ,WAAnB,EAAgCrE,SAAhC;;AAEA,gBAAIoE,cAAcC,WAAd,CAAJ,EACA;AACID,8BAAcC,WAAd,EAA2BrE,SAA3B;AACH;AACJ;AACJ,K;;AAED;;;;;;;;;;;iCASA0E,kB,+BAAmBC,K,EAAOC,C,EAAGC,C,EAC7B;AACI,YAAIC,aAAJ;;AAEA;AACA,YAAI,CAAC,KAAK7E,qBAAL,CAA2B8E,aAAhC,EACA;AACID,mBAAO,EAAEF,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAcG,OAAO,CAArB,EAAwBC,QAAQ,CAAhC,EAAP;AACH,SAHD,MAKA;AACIH,mBAAO,KAAK7E,qBAAL,CAA2BiF,qBAA3B,EAAP;AACH;;AAED,YAAMC,uBAAuBtC,UAAUuC,UAAV,GAAuB,KAAKxD,UAA5B,GAA0C,MAAM,KAAKA,UAAlF;;AAEA+C,cAAMC,CAAN,GAAW,CAACA,IAAIE,KAAKO,IAAV,KAAmB,KAAKpF,qBAAL,CAA2B+E,KAA3B,GAAmCF,KAAKE,KAA3D,CAAD,GAAsEG,oBAAhF;AACAR,cAAME,CAAN,GAAW,CAACA,IAAIC,KAAKQ,GAAV,KAAkB,KAAKrF,qBAAL,CAA2BgF,MAA3B,GAAoCH,KAAKG,MAA3D,CAAD,GAAuEE,oBAAjF;AACH,K;;AAED;;;;;;;;;;;;;;;;;;iCAgBAhD,kB,+BAAmByB,gB,EAAkBQ,a,EAAemB,I,EAAMxD,O,EAASyD,W,EACnE;AACI,YAAI,CAACpB,aAAD,IAAkB,CAACA,cAAcqB,OAArC,EACA;AACI,mBAAO,KAAP;AACH;;AAED,YAAMd,QAAQf,iBAAiBzE,IAAjB,CAAsBC,MAApC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAoG,sBAAcpB,cAAcoB,WAAd,IAA6BA,WAA3C;;AAEA,YAAIE,MAAM,KAAV;AACA,YAAIC,oBAAoBH,WAAxB;;AAEA;AACA,YAAII,kBAAkB,IAAtB;;AAEA;AACA;AACA,YAAIxB,cAAcyB,OAAlB,EACA;AACI,gBAAI9D,OAAJ,EACA;AACIqC,8BAAc0B,cAAd,CAA6BC,YAA7B,CAA0CpB,KAA1C,EAAiD,KAAKjD,UAAtD;AACA,oBAAI,CAAC0C,cAAcyB,OAAd,CAAsBG,QAAtB,CAA+B,KAAKtE,UAAL,CAAgBkD,CAA/C,EAAkD,KAAKlD,UAAL,CAAgBmD,CAAlE,CAAL,EACA;AACI9C,8BAAU,KAAV;AACA6D,sCAAkB,KAAlB;AACH,iBAJD,MAMA;AACIF,0BAAM,IAAN;AACH;AACJ;AACDC,gCAAoB,KAApB;AACH;AACD;AAjBA,aAkBK,IAAIvB,cAAc6B,KAAlB,EACL;AACI,oBAAIlE,OAAJ,EACA;AACI,wBAAI,CAACqC,cAAc6B,KAAd,CAAoBC,aAApB,CAAkCvB,KAAlC,CAAL,EACA;AACI5C,kCAAU,KAAV;AACA6D,0CAAkB,KAAlB;AACH;AACJ;AACJ;;AAED;AACA;AACA;AACA,YAAIA,mBAAmBxB,cAAc+B,mBAAjC,IAAwD/B,cAAcgC,QAA1E,EACA;AACI,gBAAMA,WAAWhC,cAAcgC,QAA/B;;AAEA,iBAAK,IAAIC,IAAID,SAASE,MAAT,GAAkB,CAA/B,EAAkCD,KAAK,CAAvC,EAA0CA,GAA1C,EACA;AACI,oBAAME,QAAQH,SAASC,CAAT,CAAd;;AAEA;AACA,oBAAMG,WAAW,KAAKrE,kBAAL,CAAwByB,gBAAxB,EAA0C2C,KAA1C,EAAiDhB,IAAjD,EAAuDxD,OAAvD,EAAgE4D,iBAAhE,CAAjB;;AAEA,oBAAIa,QAAJ,EACA;AACI;AACA;AACA,wBAAI,CAACD,MAAME,MAAX,EACA;AACI;AACH;;AAED;AACA;AACAd,wCAAoB,KAApB;;AAEA;AACA;AACA;AACA;;AAEA,wBAAIa,QAAJ,EACA;AACI,4BAAI5C,iBAAiB1E,MAArB,EACA;AACI6C,sCAAU,KAAV;AACH;AACD2D,8BAAM,IAAN;AACH;AACJ;AACJ;AACJ;;AAED;AACA,YAAIF,WAAJ,EACA;AACI;AACA;AACA;AACA;AACA,gBAAIzD,WAAW,CAAC6B,iBAAiB1E,MAAjC,EACA;AACI;AACA,oBAAI,CAACkF,cAAcyB,OAAf,IAA0BzB,cAAc8B,aAA5C,EACA;AACI,wBAAI9B,cAAc8B,aAAd,CAA4BvB,KAA5B,CAAJ,EACA;AACIe,8BAAM,IAAN;AACH;AACJ;AACJ;;AAED,gBAAItB,cAAcoB,WAAlB,EACA;AACI,oBAAIE,OAAO,CAAC9B,iBAAiB1E,MAA7B,EACA;AACI0E,qCAAiB1E,MAAjB,GAA0BkF,aAA1B;AACH;;AAED,oBAAImB,IAAJ,EACA;AACIA,yBAAK3B,gBAAL,EAAuBQ,aAAvB,EAAsC,CAAC,CAACsB,GAAxC;AACH;AACJ;AACJ;;AAED,eAAOA,GAAP;AACH,K;;AAED;;;;;;;;iCAMA5E,a,0BAAc4C,a,EACd;AACI;AACA,YAAI,KAAKrD,mBAAL,IAA4BqD,cAAcC,WAAd,KAA8B,OAA9D,EAAuE;;AAEvE,YAAM+C,SAAS,KAAKC,sBAAL,CAA4BjD,aAA5B,CAAf;;AAEA;;;;;;AAMA;;AAEA,YAAI,KAAKlE,kBAAL,IAA2BkH,OAAO,CAAP,EAAUE,YAAzC,EACA;AACIlD,0BAAcmD,cAAd;AACH;;AAED,YAAMC,WAAWJ,OAAOJ,MAAxB;;AAEA,aAAK,IAAID,IAAI,CAAb,EAAgBA,IAAIS,QAApB,EAA8BT,GAA9B,EACA;AACI,gBAAMU,QAAQL,OAAOL,CAAP,CAAd;;AAEA,gBAAM5C,kBAAkB,KAAKuD,8BAAL,CAAoCD,KAApC,CAAxB;;AAEA,gBAAMnD,mBAAmB,KAAKC,oCAAL,CAA0C,KAAK7D,SAA/C,EAA0D+G,KAA1D,EAAiEtD,eAAjE,CAAzB;;AAEAG,6BAAiBzE,IAAjB,CAAsBuE,aAAtB,GAAsCA,aAAtC;;AAEA,iBAAKvB,kBAAL,CAAwByB,gBAAxB,EAA0C,KAAKtE,QAAL,CAAc4C,mBAAxD,EAA6E,KAAKnB,kBAAlF,EAAsG,IAAtG;;AAEA,iBAAK0D,IAAL,CAAU,aAAV,EAAyBb,gBAAzB;AACA,gBAAImD,MAAMpD,WAAN,KAAsB,OAA1B,EACA;AACI,qBAAKc,IAAL,CAAU,YAAV,EAAwBb,gBAAxB;AACH;AACD;AAJA,iBAKK,IAAImD,MAAMpD,WAAN,KAAsB,OAAtB,IAAiCoD,MAAMpD,WAAN,KAAsB,KAA3D,EACL;AACI,wBAAMsD,gBAAgBF,MAAMG,MAAN,KAAiB,CAAvC;;AAEA,yBAAKzC,IAAL,CAAUwC,gBAAgB,WAAhB,GAA8B,WAAxC,EAAqD,KAAKjH,SAA1D;AACH;AACJ;AACJ,K;;AAED;;;;;;;;;;iCAQAe,kB,+BAAmB6C,gB,EAAkBQ,a,EAAesB,G,EACpD;AACI,YAAMvG,OAAOyE,iBAAiBzE,IAA9B;AACA,YAAMgI,KAAKvD,iBAAiBzE,IAAjB,CAAsBS,UAAjC;;AAEA,YAAI8F,GAAJ,EACA;AACI,gBAAI,CAACtB,cAAcgD,eAAd,CAA8BD,EAA9B,CAAL,EACA;AACI/C,8BAAcgD,eAAd,CAA8BD,EAA9B,IAAoC,sCAA4BA,EAA5B,CAApC;AACH;AACD,iBAAKhD,aAAL,CAAmBC,aAAnB,EAAkC,aAAlC,EAAiDR,gBAAjD;;AAEA,gBAAIzE,KAAKwE,WAAL,KAAqB,OAAzB,EACA;AACI,qBAAKQ,aAAL,CAAmBC,aAAnB,EAAkC,YAAlC,EAAgDR,gBAAhD;AACH,aAHD,MAIK,IAAIzE,KAAKwE,WAAL,KAAqB,OAArB,IAAgCxE,KAAKwE,WAAL,KAAqB,KAAzD,EACL;AACI,oBAAMsD,gBAAgB9H,KAAK+H,MAAL,KAAgB,CAAtC;;AAEA,oBAAID,aAAJ,EACA;AACI7C,kCAAcgD,eAAd,CAA8BD,EAA9B,EAAkCE,SAAlC,GAA8C,IAA9C;AACH,iBAHD,MAKA;AACIjD,kCAAcgD,eAAd,CAA8BD,EAA9B,EAAkCG,QAAlC,GAA6C,IAA7C;AACH;;AAED,qBAAKnD,aAAL,CAAmBC,aAAnB,EAAkC6C,gBAAgB,WAAhB,GAA8B,WAAhE,EAA6ErD,gBAA7E;AACH;AACJ;AACJ,K;;AAED;;;;;;;;;;iCAQA2D,iB,8BAAkB7D,a,EAAe8D,S,EAAWjC,I,EAC5C;AACI,YAAMmB,SAAS,KAAKC,sBAAL,CAA4BjD,aAA5B,CAAf;;AAEA,YAAMoD,WAAWJ,OAAOJ,MAAxB;;AAEA;AACA;AACA,YAAMmB,cAAc/D,cAAcxE,MAAd,KAAyB,KAAKe,qBAA9B,GAAsD,SAAtD,GAAkE,EAAtF;;AAEA,aAAK,IAAIoG,IAAI,CAAb,EAAgBA,IAAIS,QAApB,EAA8BT,GAA9B,EACA;AACI,gBAAMU,QAAQL,OAAOL,CAAP,CAAd;;AAEA,gBAAM5C,kBAAkB,KAAKuD,8BAAL,CAAoCD,KAApC,CAAxB;;AAEA,gBAAMnD,mBAAmB,KAAKC,oCAAL,CAA0C,KAAK7D,SAA/C,EAA0D+G,KAA1D,EAAiEtD,eAAjE,CAAzB;;AAEAG,6BAAiBzE,IAAjB,CAAsBuE,aAAtB,GAAsCA,aAAtC;;AAEA;AACA,iBAAKvB,kBAAL,CAAwByB,gBAAxB,EAA0C,KAAKtE,QAAL,CAAc4C,mBAAxD,EAA6EqD,IAA7E,EAAmFiC,aAAa,CAACC,WAAjG;;AAEA,iBAAKhD,IAAL,CAAU+C,YAAY,eAAZ,iBAA0CC,WAApD,EAAmE7D,gBAAnE;;AAEA,gBAAImD,MAAMpD,WAAN,KAAsB,OAAtB,IAAiCoD,MAAMpD,WAAN,KAAsB,KAA3D,EACA;AACI,oBAAMsD,gBAAgBF,MAAMG,MAAN,KAAiB,CAAvC;;AAEA,qBAAKzC,IAAL,CAAUwC,4BAA0BQ,WAA1B,eAAoDA,WAA9D,EAA6E7D,gBAA7E;AACH,aALD,MAMK,IAAImD,MAAMpD,WAAN,KAAsB,OAA1B,EACL;AACI,qBAAKc,IAAL,CAAU+C,YAAY,aAAZ,gBAAuCC,WAAjD,EAAgE7D,gBAAhE;AACA,qBAAK8D,kCAAL,CAAwCX,MAAMY,SAA9C,EAAyDlE,eAAzD;AACH;AACJ;AACJ,K;;AAED;;;;;;;;iCAMA7C,e,4BAAgBmG,K,EAChB;AACI;AACA,YAAI,KAAK1G,mBAAL,IAA4B0G,MAAMpD,WAAN,KAAsB,OAAtD,EAA+D;;AAE/D,aAAK4D,iBAAL,CAAuBR,KAAvB,EAA8B,IAA9B,EAAoC,KAAKlG,oBAAzC;AACH,K;;AAED;;;;;;;;;iCAOAA,oB,iCAAqB+C,gB,EAAkBQ,a,EACvC;AACI,YAAMjF,OAAOyE,iBAAiBzE,IAA9B;;AAEA,YAAMgI,KAAKvD,iBAAiBzE,IAAjB,CAAsBS,UAAjC;;AAEA,YAAIwE,cAAcgD,eAAd,CAA8BD,EAA9B,MAAsC1H,SAA1C,EACA;AACI,mBAAO2E,cAAcgD,eAAd,CAA8BD,EAA9B,CAAP;AACA,iBAAKhD,aAAL,CAAmBC,aAAnB,EAAkC,eAAlC,EAAmDR,gBAAnD;;AAEA,gBAAIzE,KAAKwE,WAAL,KAAqB,OAAzB,EACA;AACI,qBAAKQ,aAAL,CAAmBC,aAAnB,EAAkC,aAAlC,EAAiDR,gBAAjD;AACH;AACJ;AACJ,K;;AAED;;;;;;;;iCAMAnD,W,wBAAYsG,K,EACZ;AACI;AACA,YAAI,KAAK1G,mBAAL,IAA4B0G,MAAMpD,WAAN,KAAsB,OAAtD,EAA+D;;AAE/D,aAAK4D,iBAAL,CAAuBR,KAAvB,EAA8B,KAA9B,EAAqC,KAAKpG,gBAA1C;AACH,K;;AAED;;;;;;;;;;iCAQAA,gB,6BAAiBiD,gB,EAAkBQ,a,EAAesB,G,EAClD;AACI,YAAMvG,OAAOyE,iBAAiBzE,IAA9B;;AAEA,YAAMgI,KAAKvD,iBAAiBzE,IAAjB,CAAsBS,UAAjC;;AAEA,YAAMgI,eAAexD,cAAcgD,eAAd,CAA8BD,EAA9B,CAArB;;AAEA,YAAMU,UAAU1I,KAAKwE,WAAL,KAAqB,OAArC;;AAEA,YAAMmE,UAAW3I,KAAKwE,WAAL,KAAqB,OAArB,IAAgCxE,KAAKwE,WAAL,KAAqB,KAAtE;AACA;AACA;AACA,YAAIoE,aAAa,KAAjB;;AAEA;AACA,YAAID,OAAJ,EACA;AACI,gBAAMb,gBAAgB9H,KAAK+H,MAAL,KAAgB,CAAtC;;AAEA,gBAAMc,QAAQ,kCAAwBC,KAAtC;;AAEA,gBAAMC,OAAOjB,gBAAgBe,MAAMG,UAAtB,GAAmCH,MAAMI,SAAtD;;AAEA,gBAAMC,SAAST,iBAAiBnI,SAAjB,IAA+BmI,aAAaI,KAAb,GAAqBE,IAAnE;;AAEA,gBAAIxC,GAAJ,EACA;AACI,qBAAKvB,aAAL,CAAmBC,aAAnB,EAAkC6C,gBAAgB,SAAhB,GAA4B,SAA9D,EAAyErD,gBAAzE;;AAEA,oBAAIyE,MAAJ,EACA;AACI,yBAAKlE,aAAL,CAAmBC,aAAnB,EAAkC6C,gBAAgB,YAAhB,GAA+B,OAAjE,EAA0ErD,gBAA1E;AACA;AACAmE,iCAAa,IAAb;AACH;AACJ,aAVD,MAWK,IAAIM,MAAJ,EACL;AACI,qBAAKlE,aAAL,CAAmBC,aAAnB,EAAkC6C,gBAAgB,gBAAhB,GAAmC,gBAArE,EAAuFrD,gBAAvF;AACH;AACD;AACA,gBAAIgE,YAAJ,EACA;AACI,oBAAIX,aAAJ,EACA;AACIW,iCAAaP,SAAb,GAAyB,KAAzB;AACH,iBAHD,MAKA;AACIO,iCAAaN,QAAb,GAAwB,KAAxB;AACH;AACJ;AACJ;;AAED;AACA,YAAI5B,GAAJ,EACA;AACI,iBAAKvB,aAAL,CAAmBC,aAAnB,EAAkC,WAAlC,EAA+CR,gBAA/C;AACA,gBAAIiE,OAAJ,EAAa,KAAK1D,aAAL,CAAmBC,aAAnB,EAAkC,UAAlC,EAA8CR,gBAA9C;;AAEb,gBAAIgE,YAAJ,EACA;AACI;AACA,oBAAI,CAACE,OAAD,IAAYC,UAAhB,EACA;AACI,yBAAK5D,aAAL,CAAmBC,aAAnB,EAAkC,YAAlC,EAAgDR,gBAAhD;AACH;AACD,oBAAIiE,OAAJ,EACA;AACI,yBAAK1D,aAAL,CAAmBC,aAAnB,EAAkC,KAAlC,EAAyCR,gBAAzC;AACA;AACA;AACAgE,iCAAaU,IAAb,GAAoB,KAApB;AACH;AACJ;AACJ,SApBD,MAqBK,IAAIV,YAAJ,EACL;AACI,iBAAKzD,aAAL,CAAmBC,aAAnB,EAAkC,kBAAlC,EAAsDR,gBAAtD;AACA,gBAAIiE,OAAJ,EAAa,KAAK1D,aAAL,CAAmBC,aAAnB,EAAkC,iBAAlC,EAAqDR,gBAArD;AAChB;AACD;AACA,YAAIgE,gBAAgBA,aAAaW,IAAjC,EACA;AACI,mBAAOnE,cAAcgD,eAAd,CAA8BD,EAA9B,CAAP;AACH;AACJ,K;;AAED;;;;;;;;iCAMAnG,a,0BAAc0C,a,EACd;AACI;AACA,YAAI,KAAKrD,mBAAL,IAA4BqD,cAAcC,WAAd,KAA8B,OAA9D,EAAuE;;AAEvE,YAAM+C,SAAS,KAAKC,sBAAL,CAA4BjD,aAA5B,CAAf;;AAEA,YAAIgD,OAAO,CAAP,EAAU/C,WAAV,KAA0B,OAA1B,IAAqC+C,OAAO,CAAP,EAAU/C,WAAV,KAA0B,KAAnE,EACA;AACI,iBAAKL,OAAL,GAAe,IAAf;;AAEA,iBAAK7B,MAAL,GAAc,IAAd;AACH;;AAED,YAAMqF,WAAWJ,OAAOJ,MAAxB;;AAEA,aAAK,IAAID,IAAI,CAAb,EAAgBA,IAAIS,QAApB,EAA8BT,GAA9B,EACA;AACI,gBAAMU,QAAQL,OAAOL,CAAP,CAAd;;AAEA,gBAAM5C,kBAAkB,KAAKuD,8BAAL,CAAoCD,KAApC,CAAxB;;AAEA,gBAAMnD,mBAAmB,KAAKC,oCAAL,CAA0C,KAAK7D,SAA/C,EAA0D+G,KAA1D,EAAiEtD,eAAjE,CAAzB;;AAEAG,6BAAiBzE,IAAjB,CAAsBuE,aAAtB,GAAsCA,aAAtC;;AAEA,gBAAM8B,cAAcuB,MAAMpD,WAAN,KAAsB,OAAtB,GAAgC,KAAKzD,cAArC,GAAsD,IAA1E;;AAEA,iBAAKiC,kBAAL,CACIyB,gBADJ,EAEI,KAAKtE,QAAL,CAAc4C,mBAFlB,EAGI,KAAKjB,kBAHT,EAIIuE,WAJJ;AAMA,iBAAKf,IAAL,CAAU,aAAV,EAAyBb,gBAAzB;AACA,gBAAImD,MAAMpD,WAAN,KAAsB,OAA1B,EAAmC,KAAKc,IAAL,CAAU,WAAV,EAAuBb,gBAAvB;AACnC,gBAAImD,MAAMpD,WAAN,KAAsB,OAAtB,IAAiCoD,MAAMpD,WAAN,KAAsB,KAA3D,EAAkE,KAAKc,IAAL,CAAU,WAAV,EAAuBb,gBAAvB;AACrE;;AAED,YAAI8C,OAAO,CAAP,EAAU/C,WAAV,KAA0B,OAA9B,EACA;AACI,iBAAKG,aAAL,CAAmB,KAAKrC,MAAxB;;AAEA;AACH;AACJ,K;;AAED;;;;;;;;;;iCAQAR,kB,+BAAmB2C,gB,EAAkBQ,a,EAAesB,G,EACpD;AACI,YAAMvG,OAAOyE,iBAAiBzE,IAA9B;;AAEA,YAAM0I,UAAU1I,KAAKwE,WAAL,KAAqB,OAArC;;AAEA,YAAMmE,UAAW3I,KAAKwE,WAAL,KAAqB,OAArB,IAAgCxE,KAAKwE,WAAL,KAAqB,KAAtE;;AAEA,YAAImE,OAAJ,EACA;AACI,iBAAK3G,qBAAL,CAA2ByC,gBAA3B,EAA6CQ,aAA7C,EAA4DsB,GAA5D;AACH;;AAED,YAAI,CAAC,KAAKxF,cAAN,IAAwBwF,GAA5B,EACA;AACI,iBAAKvB,aAAL,CAAmBC,aAAnB,EAAkC,aAAlC,EAAiDR,gBAAjD;AACA,gBAAIiE,OAAJ,EAAa,KAAK1D,aAAL,CAAmBC,aAAnB,EAAkC,WAAlC,EAA+CR,gBAA/C;AACb,gBAAIkE,OAAJ,EAAa,KAAK3D,aAAL,CAAmBC,aAAnB,EAAkC,WAAlC,EAA+CR,gBAA/C;AAChB;AACJ,K;;AAED;;;;;;;;iCAMA1C,Y,yBAAawC,a,EACb;AACI;AACA,YAAI,KAAKrD,mBAAL,IAA4BqD,cAAcC,WAAd,KAA8B,OAA9D,EAAuE;;AAEvE,YAAM+C,SAAS,KAAKC,sBAAL,CAA4BjD,aAA5B,CAAf;;AAEA;AACA,YAAMqD,QAAQL,OAAO,CAAP,CAAd;;AAEA,YAAIK,MAAMpD,WAAN,KAAsB,OAA1B,EACA;AACI,iBAAKvD,iBAAL,GAAyB,KAAzB;AACA,iBAAK0D,aAAL,CAAmB,IAAnB;AACH;;AAED,YAAML,kBAAkB,KAAKuD,8BAAL,CAAoCD,KAApC,CAAxB;;AAEA,YAAMnD,mBAAmB,KAAKC,oCAAL,CAA0C,KAAK7D,SAA/C,EAA0D+G,KAA1D,EAAiEtD,eAAjE,CAAzB;;AAEAG,yBAAiBzE,IAAjB,CAAsBuE,aAAtB,GAAsCqD,KAAtC;;AAEA,aAAK5E,kBAAL,CAAwByB,gBAAxB,EAA0C,KAAKtE,QAAL,CAAc4C,mBAAxD,EAA6E,KAAKf,qBAAlF,EAAyG,KAAzG;;AAEA,aAAKsD,IAAL,CAAU,YAAV,EAAwBb,gBAAxB;AACA,YAAImD,MAAMpD,WAAN,KAAsB,OAAtB,IAAiCoD,MAAMpD,WAAN,KAAsB,KAA3D,EACA;AACI,iBAAKc,IAAL,CAAU,UAAV,EAAsBb,gBAAtB;AACH,SAHD,MAKA;AACI;AACA;AACA,iBAAK8D,kCAAL,CAAwCjE,gBAAgB7D,UAAxD;AACH;AACJ,K;;AAED;;;;;;;;;;iCAQAuB,qB,kCAAsByC,gB,EAAkBQ,a,EAAesB,G,EACvD;AACI,YAAMvG,OAAOyE,iBAAiBzE,IAA9B;;AAEA,YAAMgI,KAAKvD,iBAAiBzE,IAAjB,CAAsBS,UAAjC;;AAEA,YAAMkI,UAAW3I,KAAKwE,WAAL,KAAqB,OAArB,IAAgCxE,KAAKwE,WAAL,KAAqB,KAAtE;;AAEA,YAAIiE,eAAexD,cAAcgD,eAAd,CAA8BD,EAA9B,CAAnB;;AAEA;AACA,YAAIzB,OAAO,CAACkC,YAAZ,EACA;AACIA,2BAAexD,cAAcgD,eAAd,CAA8BD,EAA9B,IAAoC,sCAA4BA,EAA5B,CAAnD;AACH;;AAED,YAAIS,iBAAiBnI,SAArB,EAAgC;;AAEhC,YAAIiG,OAAO,KAAKtF,iBAAhB,EACA;AACI,gBAAI,CAACwH,aAAaU,IAAlB,EACA;AACIV,6BAAaU,IAAb,GAAoB,IAApB;AACA,qBAAKnE,aAAL,CAAmBC,aAAnB,EAAkC,aAAlC,EAAiDR,gBAAjD;AACA,oBAAIkE,OAAJ,EACA;AACI,yBAAK3D,aAAL,CAAmBC,aAAnB,EAAkC,WAAlC,EAA+CR,gBAA/C;AACH;AACJ;;AAED;AACA;AACA,gBAAIkE,WAAW,KAAKrG,MAAL,KAAgB,IAA/B,EACA;AACI,qBAAKA,MAAL,GAAc2C,cAAc3C,MAA5B;AACH;AACJ,SAlBD,MAmBK,IAAImG,aAAaU,IAAjB,EACL;AACIV,yBAAaU,IAAb,GAAoB,KAApB;AACA,iBAAKnE,aAAL,CAAmBC,aAAnB,EAAkC,YAAlC,EAAgD,KAAKpE,SAArD;AACA,gBAAI8H,OAAJ,EACA;AACI,qBAAK3D,aAAL,CAAmBC,aAAnB,EAAkC,UAAlC,EAA8CR,gBAA9C;AACH;AACD;AACA,gBAAIgE,aAAaW,IAAjB,EACA;AACI,uBAAOnE,cAAcgD,eAAd,CAA8BD,EAA9B,CAAP;AACH;AACJ;AACJ,K;;AAED;;;;;;;;iCAMA/F,a,0BAAcsC,a,EACd;AACI,YAAMgD,SAAS,KAAKC,sBAAL,CAA4BjD,aAA5B,CAAf;;AAEA;AACA,YAAMqD,QAAQL,OAAO,CAAP,CAAd;;AAEA,YAAMjD,kBAAkB,KAAKuD,8BAAL,CAAoCD,KAApC,CAAxB;;AAEA,YAAMnD,mBAAmB,KAAKC,oCAAL,CAA0C,KAAK7D,SAA/C,EAA0D+G,KAA1D,EAAiEtD,eAAjE,CAAzB;;AAEAG,yBAAiBzE,IAAjB,CAAsBuE,aAAtB,GAAsCqD,KAAtC;;AAEA,YAAIA,MAAMpD,WAAN,KAAsB,OAA1B,EACA;AACI,iBAAKvD,iBAAL,GAAyB,IAAzB;AACH;;AAED,aAAKqE,IAAL,CAAU,aAAV,EAAyBb,gBAAzB;AACA,YAAImD,MAAMpD,WAAN,KAAsB,OAAtB,IAAiCoD,MAAMpD,WAAN,KAAsB,KAA3D,EACA;AACI,iBAAKc,IAAL,CAAU,WAAV,EAAuBb,gBAAvB;AACH;AACJ,K;;AAED;;;;;;;;;iCAOAoD,8B,2CAA+BD,K,EAC/B;AACI,YAAMY,YAAYZ,MAAMY,SAAxB;;AAEA,YAAIlE,wBAAJ;;AAEA,YAAIkE,cAAc3I,gBAAd,IAAkC+H,MAAMpD,WAAN,KAAsB,OAA5D,EACA;AACIF,8BAAkB,KAAK9D,KAAvB;AACH,SAHD,MAIK,IAAI,KAAKG,qBAAL,CAA2B6H,SAA3B,CAAJ,EACL;AACIlE,8BAAkB,KAAK3D,qBAAL,CAA2B6H,SAA3B,CAAlB;AACH,SAHI,MAKL;AACIlE,8BAAkB,KAAK1D,mBAAL,CAAyByI,GAAzB,MAAkC,+BAApD;AACA/E,4BAAgB7D,UAAhB,GAA6B+H,SAA7B;AACA,iBAAK7H,qBAAL,CAA2B6H,SAA3B,IAAwClE,eAAxC;AACH;AACD;AACA;AACAA,wBAAgBgF,SAAhB,CAA0B1B,KAA1B;;AAEA,eAAOtD,eAAP;AACH,K;;AAED;;;;;;;;iCAMAiE,kC,+CAAmCC,S,EACnC;AACI,YAAMlE,kBAAkB,KAAK3D,qBAAL,CAA2B6H,SAA3B,CAAxB;;AAEA,YAAIlE,eAAJ,EACA;AACI,mBAAO,KAAK3D,qBAAL,CAA2B6H,SAA3B,CAAP;AACAlE,4BAAgBiF,KAAhB;AACA,iBAAK3I,mBAAL,CAAyB4I,IAAzB,CAA8BlF,eAA9B;AACH;AACJ,K;;AAED;;;;;;;;;;;;iCAUAI,oC,iDAAqCD,gB,EAAkBgF,Y,EAAcnF,e,EACrE;AACIG,yBAAiBzE,IAAjB,GAAwBsE,eAAxB;;AAEA,aAAKiB,kBAAL,CAAwBjB,gBAAgBrE,MAAxC,EAAgDwJ,aAAaC,OAA7D,EAAsED,aAAaE,OAAnF;;AAEA;AACA;AACA;AACA,YAAIjG,UAAUuC,UAAV,IAAwBwD,aAAajF,WAAb,KAA6B,OAAzD,EACA;AACIF,4BAAgBrE,MAAhB,CAAuBwF,CAAvB,GAA2BnB,gBAAgBrE,MAAhB,CAAuBwF,CAAvB,GAA2B,KAAKhD,UAA3D;AACA6B,4BAAgBrE,MAAhB,CAAuByF,CAAvB,GAA2BpB,gBAAgBrE,MAAhB,CAAuByF,CAAvB,GAA2B,KAAKjD,UAA3D;AACH;;AAED;AACA,YAAIgH,aAAajF,WAAb,KAA6B,OAAjC,EACA;AACIiF,yBAAaG,OAAb,GAAuBtF,gBAAgBrE,MAAhB,CAAuBwF,CAA9C;AACAgE,yBAAaI,OAAb,GAAuBvF,gBAAgBrE,MAAhB,CAAuByF,CAA9C;AACH;;AAEDpB,wBAAgBC,aAAhB,GAAgCkF,YAAhC;AACAhF,yBAAiB8E,KAAjB;;AAEA,eAAO9E,gBAAP;AACH,K;;AAED;;;;;;;;;;iCAQA+C,sB,mCAAuBI,K,EACvB;AACI,YAAMkC,mBAAmB,EAAzB;;AAEA,YAAI,KAAK5I,mBAAL,IAA4B0G,iBAAiBmC,UAAjD,EACA;AACI,iBAAK,IAAI7C,IAAI,CAAR,EAAW8C,KAAKpC,MAAMqC,cAAN,CAAqB9C,MAA1C,EAAkDD,IAAI8C,EAAtD,EAA0D9C,GAA1D,EACA;AACI,oBAAMgD,QAAQtC,MAAMqC,cAAN,CAAqB/C,CAArB,CAAd;;AAEA,oBAAI,OAAOgD,MAAMnC,MAAb,KAAwB,WAA5B,EAAyCmC,MAAMnC,MAAN,GAAeH,MAAMuC,OAAN,CAAchD,MAAd,GAAuB,CAAvB,GAA2B,CAA1C;AACzC,oBAAI,OAAO+C,MAAME,OAAb,KAAyB,WAA7B,EAA0CF,MAAME,OAAN,GAAgBxC,MAAMuC,OAAN,CAAchD,MAAd,GAAuB,CAAvB,GAA2B,CAA3C;AAC1C,oBAAI,OAAO+C,MAAMG,SAAb,KAA2B,WAA/B,EACA;AACIH,0BAAMG,SAAN,GAAkBzC,MAAMuC,OAAN,CAAchD,MAAd,KAAyB,CAAzB,IAA8BS,MAAMvC,IAAN,KAAe,YAA/D;AACH;AACD,oBAAI,OAAO6E,MAAMrE,KAAb,KAAuB,WAA3B,EAAwCqE,MAAMrE,KAAN,GAAcqE,MAAMI,OAAN,IAAiB,CAA/B;AACxC,oBAAI,OAAOJ,MAAMpE,MAAb,KAAwB,WAA5B,EAAyCoE,MAAMpE,MAAN,GAAeoE,MAAMK,OAAN,IAAiB,CAAhC;AACzC,oBAAI,OAAOL,MAAMM,KAAb,KAAuB,WAA3B,EAAwCN,MAAMM,KAAN,GAAc,CAAd;AACxC,oBAAI,OAAON,MAAMO,KAAb,KAAuB,WAA3B,EAAwCP,MAAMO,KAAN,GAAc,CAAd;AACxC,oBAAI,OAAOP,MAAM1F,WAAb,KAA6B,WAAjC,EAA8C0F,MAAM1F,WAAN,GAAoB,OAApB;AAC9C,oBAAI,OAAO0F,MAAM1B,SAAb,KAA2B,WAA/B,EAA4C0B,MAAM1B,SAAN,GAAkB0B,MAAMzJ,UAAN,IAAoB,CAAtC;AAC5C,oBAAI,OAAOyJ,MAAMQ,QAAb,KAA0B,WAA9B,EAA2CR,MAAMQ,QAAN,GAAiBR,MAAMS,KAAN,IAAe,GAAhC;AAC3C,oBAAI,OAAOT,MAAMU,KAAb,KAAuB,WAA3B,EAAwCV,MAAMU,KAAN,GAAc,CAAd;AACxC,oBAAI,OAAOV,MAAMW,kBAAb,KAAoC,WAAxC,EAAqDX,MAAMW,kBAAN,GAA2B,CAA3B;AACrD;AACA;AACA;AACA;AACA,oBAAI,OAAOX,MAAMY,MAAb,KAAwB,WAA5B,EAAyCZ,MAAMY,MAAN,GAAeZ,MAAMa,OAAN,GAAgBb,MAAMR,OAArC;AACzC,oBAAI,OAAOQ,MAAMc,MAAb,KAAwB,WAA5B,EAAyCd,MAAMc,MAAN,GAAed,MAAMe,OAAN,GAAgBf,MAAMP,OAArC;;AAEzC;AACAO,sBAAMzC,YAAN,GAAqB,IAArB;;AAEAqC,iCAAiBN,IAAjB,CAAsBU,KAAtB;AACH;AACJ;AACD;AAlCA,aAmCK,IAAItC,iBAAiBsD,UAAjB,KAAgC,CAAC,KAAK9J,qBAAN,IAA+B,EAAEwG,iBAAiBzG,OAAOE,YAA1B,CAA/D,CAAJ,EACL;AACI,oBAAI,OAAOuG,MAAMyC,SAAb,KAA2B,WAA/B,EAA4CzC,MAAMyC,SAAN,GAAkB,IAAlB;AAC5C,oBAAI,OAAOzC,MAAM/B,KAAb,KAAuB,WAA3B,EAAwC+B,MAAM/B,KAAN,GAAc,CAAd;AACxC,oBAAI,OAAO+B,MAAM9B,MAAb,KAAwB,WAA5B,EAAyC8B,MAAM9B,MAAN,GAAe,CAAf;AACzC,oBAAI,OAAO8B,MAAM4C,KAAb,KAAuB,WAA3B,EAAwC5C,MAAM4C,KAAN,GAAc,CAAd;AACxC,oBAAI,OAAO5C,MAAM6C,KAAb,KAAuB,WAA3B,EAAwC7C,MAAM6C,KAAN,GAAc,CAAd;AACxC,oBAAI,OAAO7C,MAAMpD,WAAb,KAA6B,WAAjC,EAA8CoD,MAAMpD,WAAN,GAAoB,OAApB;AAC9C,oBAAI,OAAOoD,MAAMY,SAAb,KAA2B,WAA/B,EAA4CZ,MAAMY,SAAN,GAAkB3I,gBAAlB;AAC5C,oBAAI,OAAO+H,MAAM8C,QAAb,KAA0B,WAA9B,EAA2C9C,MAAM8C,QAAN,GAAiB,GAAjB;AAC3C,oBAAI,OAAO9C,MAAMgD,KAAb,KAAuB,WAA3B,EAAwChD,MAAMgD,KAAN,GAAc,CAAd;AACxC,oBAAI,OAAOhD,MAAMiD,kBAAb,KAAoC,WAAxC,EAAqDjD,MAAMiD,kBAAN,GAA2B,CAA3B;;AAErD;AACAjD,sBAAMH,YAAN,GAAqB,IAArB;;AAEAqC,iCAAiBN,IAAjB,CAAsB5B,KAAtB;AACH,aAjBI,MAmBL;AACIkC,iCAAiBN,IAAjB,CAAsB5B,KAAtB;AACH;;AAED,eAAOkC,gBAAP;AACH,K;;AAED;;;;;;iCAIAqB,O,sBACA;AACI,aAAKjI,YAAL;;AAEA,aAAKkI,kBAAL;;AAEA,aAAKjL,QAAL,GAAgB,IAAhB;;AAEA,aAAKK,KAAL,GAAa,IAAb;;AAEA,aAAKK,SAAL,GAAiB,IAAjB;;AAEA,aAAKC,qBAAL,GAA6B,IAA7B;;AAEA,aAAKa,aAAL,GAAqB,IAArB;AACA,aAAKC,kBAAL,GAA0B,IAA1B;;AAEA,aAAKN,WAAL,GAAmB,IAAnB;AACA,aAAKE,gBAAL,GAAwB,IAAxB;;AAEA,aAAKC,eAAL,GAAuB,IAAvB;AACA,aAAKC,oBAAL,GAA4B,IAA5B;;AAEA,aAAKG,aAAL,GAAqB,IAArB;AACA,aAAKC,kBAAL,GAA0B,IAA1B;;AAEA,aAAKC,YAAL,GAAoB,IAApB;AACA,aAAKC,qBAAL,GAA6B,IAA7B;;AAEA,aAAKC,aAAL,GAAqB,IAArB;;AAEA,aAAKM,UAAL,GAAkB,IAAlB;AACH,K;;;;;kBAnxDgBrC,kB;;;AAsxDrBX,KAAK8L,aAAL,CAAmBC,cAAnB,CAAkC,aAAlC,EAAiDpL,kBAAjD;AACAX,KAAKgM,cAAL,CAAoBD,cAApB,CAAmC,aAAnC,EAAkDpL,kBAAlD","file":"InteractionManager.js","sourcesContent":["import * as core from '../core';\nimport InteractionData from './InteractionData';\nimport InteractionEvent from './InteractionEvent';\nimport InteractionTrackingData from './InteractionTrackingData';\nimport EventEmitter from 'eventemitter3';\nimport interactiveTarget from './interactiveTarget';\n\n// Mix interactiveTarget into core.DisplayObject.prototype, after deprecation has been handled\ncore.utils.mixins.delayMixin(\n    core.DisplayObject.prototype,\n    interactiveTarget\n);\n\nconst MOUSE_POINTER_ID = 1;\n\n// helpers for hitTest() - only used inside hitTest()\nconst hitTestEvent = {\n    target: null,\n    data: {\n        global: null,\n    },\n};\n\n/**\n * The interaction manager deals with mouse, touch and pointer events. Any DisplayObject can be interactive\n * if its interactive parameter is set to true\n * This manager also supports multitouch.\n *\n * An instance of this class is automatically created by default, and can be found at renderer.plugins.interaction\n *\n * @class\n * @extends EventEmitter\n * @memberof PIXI.interaction\n */\nexport default class InteractionManager extends EventEmitter\n{\n    /**\n     * @param {PIXI.CanvasRenderer|PIXI.WebGLRenderer} renderer - A reference to the current renderer\n     * @param {object} [options] - The options for the manager.\n     * @param {boolean} [options.autoPreventDefault=true] - Should the manager automatically prevent default browser actions.\n     * @param {number} [options.interactionFrequency=10] - Frequency increases the interaction events will be checked.\n     */\n    constructor(renderer, options)\n    {\n        super();\n\n        options = options || {};\n\n        /**\n         * The renderer this interaction manager works for.\n         *\n         * @member {PIXI.SystemRenderer}\n         */\n        this.renderer = renderer;\n\n        /**\n         * Should default browser actions automatically be prevented.\n         * Does not apply to pointer events for backwards compatibility\n         * preventDefault on pointer events stops mouse events from firing\n         * Thus, for every pointer event, there will always be either a mouse of touch event alongside it.\n         *\n         * @member {boolean}\n         * @default true\n         */\n        this.autoPreventDefault = options.autoPreventDefault !== undefined ? options.autoPreventDefault : true;\n\n        /**\n         * Frequency in milliseconds that the mousemove, moveover & mouseout interaction events will be checked.\n         *\n         * @member {number}\n         * @default 10\n         */\n        this.interactionFrequency = options.interactionFrequency || 10;\n\n        /**\n         * The mouse data\n         *\n         * @member {PIXI.interaction.InteractionData}\n         */\n        this.mouse = new InteractionData();\n        this.mouse.identifier = MOUSE_POINTER_ID;\n\n        // setting the mouse to start off far off screen will mean that mouse over does\n        //  not get called before we even move the mouse.\n        this.mouse.global.set(-999999);\n\n        /**\n         * Actively tracked InteractionData\n         *\n         * @private\n         * @member {Object.<number,PIXI.interation.InteractionData>}\n         */\n        this.activeInteractionData = {};\n        this.activeInteractionData[MOUSE_POINTER_ID] = this.mouse;\n\n        /**\n         * Pool of unused InteractionData\n         *\n         * @private\n         * @member {PIXI.interation.InteractionData[]}\n         */\n        this.interactionDataPool = [];\n\n        /**\n         * An event data object to handle all the event tracking/dispatching\n         *\n         * @member {object}\n         */\n        this.eventData = new InteractionEvent();\n\n        /**\n         * The DOM element to bind to.\n         *\n         * @private\n         * @member {HTMLElement}\n         */\n        this.interactionDOMElement = null;\n\n        /**\n         * This property determines if mousemove and touchmove events are fired only when the cursor\n         * is over the object.\n         * Setting to true will make things work more in line with how the DOM verison works.\n         * Setting to false can make things easier for things like dragging\n         * It is currently set to false as this is how PixiJS used to work. This will be set to true in\n         * future versions of pixi.\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.moveWhenInside = false;\n\n        /**\n         * Have events been attached to the dom element?\n         *\n         * @private\n         * @member {boolean}\n         */\n        this.eventsAdded = false;\n\n        /**\n         * Is the mouse hovering over the renderer?\n         *\n         * @private\n         * @member {boolean}\n         */\n        this.mouseOverRenderer = false;\n\n        /**\n         * Does the device support touch events\n         * https://www.w3.org/TR/touch-events/\n         *\n         * @readonly\n         * @member {boolean}\n         */\n        this.supportsTouchEvents = 'ontouchstart' in window;\n\n        /**\n         * Does the device support pointer events\n         * https://www.w3.org/Submission/pointer-events/\n         *\n         * @readonly\n         * @member {boolean}\n         */\n        this.supportsPointerEvents = !!window.PointerEvent;\n\n        // this will make it so that you don't have to call bind all the time\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerUp = this.onPointerUp.bind(this);\n        this.processPointerUp = this.processPointerUp.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerCancel = this.onPointerCancel.bind(this);\n        this.processPointerCancel = this.processPointerCancel.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerDown = this.onPointerDown.bind(this);\n        this.processPointerDown = this.processPointerDown.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerMove = this.onPointerMove.bind(this);\n        this.processPointerMove = this.processPointerMove.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerOut = this.onPointerOut.bind(this);\n        this.processPointerOverOut = this.processPointerOverOut.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerOver = this.onPointerOver.bind(this);\n\n        /**\n         * Dictionary of how different cursor modes are handled. Strings are handled as CSS cursor\n         * values, objects are handled as dictionaries of CSS values for interactionDOMElement,\n         * and functions are called instead of changing the CSS.\n         * Default CSS cursor values are provided for 'default' and 'pointer' modes.\n         * @member {Object.<string, (string|Function|Object.<string, string>)>}\n         */\n        this.cursorStyles = {\n            default: 'inherit',\n            pointer: 'pointer',\n        };\n\n        /**\n         * The mode of the cursor that is being used.\n         * The value of this is a key from the cursorStyles dictionary.\n         *\n         * @member {string}\n         */\n        this.currentCursorMode = null;\n\n        /**\n         * Internal cached let.\n         *\n         * @private\n         * @member {string}\n         */\n        this.cursor = null;\n\n        /**\n         * Internal cached let.\n         *\n         * @private\n         * @member {PIXI.Point}\n         */\n        this._tempPoint = new core.Point();\n\n        /**\n         * The current resolution / device pixel ratio.\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.resolution = 1;\n\n        this.setTargetElement(this.renderer.view, this.renderer.resolution);\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed on the display\n         * object.\n         *\n         * @event PIXI.interaction.InteractionManager#mousedown\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * on the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#rightdown\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released over the display\n         * object.\n         *\n         * @event PIXI.interaction.InteractionManager#mouseup\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * over the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#rightup\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed and released on\n         * the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#click\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * and released on the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#rightclick\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released outside the\n         * display object that initially registered a\n         * [mousedown]{@link PIXI.interaction.InteractionManager#event:mousedown}.\n         *\n         * @event PIXI.interaction.InteractionManager#mouseupoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * outside the display object that initially registered a\n         * [rightdown]{@link PIXI.interaction.InteractionManager#event:rightdown}.\n         *\n         * @event PIXI.interaction.InteractionManager#rightupoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved while over the display object\n         *\n         * @event PIXI.interaction.InteractionManager#mousemove\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved onto the display object\n         *\n         * @event PIXI.interaction.InteractionManager#mouseover\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved off the display object\n         *\n         * @event PIXI.interaction.InteractionManager#mouseout\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed on the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#pointerdown\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released over the display object.\n         * Not always fired when some buttons are held down while others are released. In those cases,\n         * use [mousedown]{@link PIXI.interaction.InteractionManager#event:mousedown} and\n         * [mouseup]{@link PIXI.interaction.InteractionManager#event:mouseup} instead.\n         *\n         * @event PIXI.interaction.InteractionManager#pointerup\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a pointer event\n         *\n         * @event PIXI.interaction.InteractionManager#pointercancel\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed and released on the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#pointertap\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released outside the display object that initially\n         * registered a [pointerdown]{@link PIXI.interaction.InteractionManager#event:pointerdown}.\n         *\n         * @event PIXI.interaction.InteractionManager#pointerupoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved while over the display object\n         *\n         * @event PIXI.interaction.InteractionManager#pointermove\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved onto the display object\n         *\n         * @event PIXI.interaction.InteractionManager#pointerover\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved off the display object\n         *\n         * @event PIXI.interaction.InteractionManager#pointerout\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed on the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#touchstart\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed from the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#touchend\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a touch\n         *\n         * @event PIXI.interaction.InteractionManager#touchcancel\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed and removed from the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#tap\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed outside of the display object that initially\n         * registered a [touchstart]{@link PIXI.interaction.InteractionManager#event:touchstart}.\n         *\n         * @event PIXI.interaction.InteractionManager#touchendoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is moved along the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#touchmove\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\n         * object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mousedown\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#rightdown\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released over the display\n         * object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mouseup\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * over the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#rightup\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed and released on\n         * the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#click\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * and released on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#rightclick\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released outside the\n         * display object that initially registered a\n         * [mousedown]{@link PIXI.DisplayObject#event:mousedown}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mouseupoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * outside the display object that initially registered a\n         * [rightdown]{@link PIXI.DisplayObject#event:rightdown}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#rightupoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved while over the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mousemove\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved onto the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mouseover\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved off the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mouseout\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed on the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointerdown\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released over the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointerup\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a pointer event.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointercancel\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed and released on the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointertap\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released outside the display object that initially\n         * registered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointerupoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved while over the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointermove\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved onto the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointerover\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved off the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointerout\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed on the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#touchstart\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed from the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#touchend\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a touch.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#touchcancel\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed and removed from the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#tap\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed outside of the display object that initially\n         * registered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#touchendoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is moved along the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#touchmove\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n    }\n\n    /**\n     * Hit tests a point against the display tree, returning the first interactive object that is hit.\n     *\n     * @param {PIXI.Point} globalPoint - A point to hit test with, in global space.\n     * @param {PIXI.Container} [root] - The root display object to start from. If omitted, defaults\n     * to the last rendered root of the associated renderer.\n     * @return {PIXI.DisplayObject} The hit display object, if any.\n     */\n    hitTest(globalPoint, root)\n    {\n        // clear the target for our hit test\n        hitTestEvent.target = null;\n        // assign the global point\n        hitTestEvent.data.global = globalPoint;\n        // ensure safety of the root\n        if (!root)\n        {\n            root = this.renderer._lastObjectRendered;\n        }\n        // run the hit test\n        this.processInteractive(hitTestEvent, root, null, true);\n        // return our found object - it'll be null if we didn't hit anything\n\n        return hitTestEvent.target;\n    }\n\n    /**\n     * Sets the DOM element which will receive mouse/touch events. This is useful for when you have\n     * other DOM elements on top of the renderers Canvas element. With this you'll be bale to deletegate\n     * another DOM element to receive those events.\n     *\n     * @param {HTMLCanvasElement} element - the DOM element which will receive mouse and touch events.\n     * @param {number} [resolution=1] - The resolution / device pixel ratio of the new element (relative to the canvas).\n     */\n    setTargetElement(element, resolution = 1)\n    {\n        this.removeEvents();\n\n        this.interactionDOMElement = element;\n\n        this.resolution = resolution;\n\n        this.addEvents();\n    }\n\n    /**\n     * Registers all the DOM events\n     *\n     * @private\n     */\n    addEvents()\n    {\n        if (!this.interactionDOMElement)\n        {\n            return;\n        }\n\n        core.ticker.shared.add(this.update, this, core.UPDATE_PRIORITY.INTERACTION);\n\n        if (window.navigator.msPointerEnabled)\n        {\n            this.interactionDOMElement.style['-ms-content-zooming'] = 'none';\n            this.interactionDOMElement.style['-ms-touch-action'] = 'none';\n        }\n        else if (this.supportsPointerEvents)\n        {\n            this.interactionDOMElement.style['touch-action'] = 'none';\n        }\n\n        /**\n         * These events are added first, so that if pointer events are normalised, they are fired\n         * in the same order as non-normalised events. ie. pointer event 1st, mouse / touch 2nd\n         */\n        if (this.supportsPointerEvents)\n        {\n            window.document.addEventListener('pointermove', this.onPointerMove, true);\n            this.interactionDOMElement.addEventListener('pointerdown', this.onPointerDown, true);\n            // pointerout is fired in addition to pointerup (for touch events) and pointercancel\n            // we already handle those, so for the purposes of what we do in onPointerOut, we only\n            // care about the pointerleave event\n            this.interactionDOMElement.addEventListener('pointerleave', this.onPointerOut, true);\n            this.interactionDOMElement.addEventListener('pointerover', this.onPointerOver, true);\n            window.addEventListener('pointercancel', this.onPointerCancel, true);\n            window.addEventListener('pointerup', this.onPointerUp, true);\n        }\n        else\n        {\n            window.document.addEventListener('mousemove', this.onPointerMove, true);\n            this.interactionDOMElement.addEventListener('mousedown', this.onPointerDown, true);\n            this.interactionDOMElement.addEventListener('mouseout', this.onPointerOut, true);\n            this.interactionDOMElement.addEventListener('mouseover', this.onPointerOver, true);\n            window.addEventListener('mouseup', this.onPointerUp, true);\n        }\n\n        // always look directly for touch events so that we can provide original data\n        // In a future version we should change this to being just a fallback and rely solely on\n        // PointerEvents whenever available\n        if (this.supportsTouchEvents)\n        {\n            this.interactionDOMElement.addEventListener('touchstart', this.onPointerDown, true);\n            this.interactionDOMElement.addEventListener('touchcancel', this.onPointerCancel, true);\n            this.interactionDOMElement.addEventListener('touchend', this.onPointerUp, true);\n            this.interactionDOMElement.addEventListener('touchmove', this.onPointerMove, true);\n        }\n\n        this.eventsAdded = true;\n    }\n\n    /**\n     * Removes all the DOM events that were previously registered\n     *\n     * @private\n     */\n    removeEvents()\n    {\n        if (!this.interactionDOMElement)\n        {\n            return;\n        }\n\n        core.ticker.shared.remove(this.update, this);\n\n        if (window.navigator.msPointerEnabled)\n        {\n            this.interactionDOMElement.style['-ms-content-zooming'] = '';\n            this.interactionDOMElement.style['-ms-touch-action'] = '';\n        }\n        else if (this.supportsPointerEvents)\n        {\n            this.interactionDOMElement.style['touch-action'] = '';\n        }\n\n        if (this.supportsPointerEvents)\n        {\n            window.document.removeEventListener('pointermove', this.onPointerMove, true);\n            this.interactionDOMElement.removeEventListener('pointerdown', this.onPointerDown, true);\n            this.interactionDOMElement.removeEventListener('pointerleave', this.onPointerOut, true);\n            this.interactionDOMElement.removeEventListener('pointerover', this.onPointerOver, true);\n            window.removeEventListener('pointercancel', this.onPointerCancel, true);\n            window.removeEventListener('pointerup', this.onPointerUp, true);\n        }\n        else\n        {\n            window.document.removeEventListener('mousemove', this.onPointerMove, true);\n            this.interactionDOMElement.removeEventListener('mousedown', this.onPointerDown, true);\n            this.interactionDOMElement.removeEventListener('mouseout', this.onPointerOut, true);\n            this.interactionDOMElement.removeEventListener('mouseover', this.onPointerOver, true);\n            window.removeEventListener('mouseup', this.onPointerUp, true);\n        }\n\n        if (this.supportsTouchEvents)\n        {\n            this.interactionDOMElement.removeEventListener('touchstart', this.onPointerDown, true);\n            this.interactionDOMElement.removeEventListener('touchcancel', this.onPointerCancel, true);\n            this.interactionDOMElement.removeEventListener('touchend', this.onPointerUp, true);\n            this.interactionDOMElement.removeEventListener('touchmove', this.onPointerMove, true);\n        }\n\n        this.interactionDOMElement = null;\n\n        this.eventsAdded = false;\n    }\n\n    /**\n     * Updates the state of interactive objects.\n     * Invoked by a throttled ticker update from {@link PIXI.ticker.shared}.\n     *\n     * @param {number} deltaTime - time delta since last tick\n     */\n    update(deltaTime)\n    {\n        this._deltaTime += deltaTime;\n\n        if (this._deltaTime < this.interactionFrequency)\n        {\n            return;\n        }\n\n        this._deltaTime = 0;\n\n        if (!this.interactionDOMElement)\n        {\n            return;\n        }\n\n        // if the user move the mouse this check has already been done using the mouse move!\n        if (this.didMove)\n        {\n            this.didMove = false;\n\n            return;\n        }\n\n        this.cursor = null;\n\n        // Resets the flag as set by a stopPropagation call. This flag is usually reset by a user interaction of any kind,\n        // but there was a scenario of a display object moving under a static mouse cursor.\n        // In this case, mouseover and mouseevents would not pass the flag test in dispatchEvent function\n        for (const k in this.activeInteractionData)\n        {\n            // eslint-disable-next-line no-prototype-builtins\n            if (this.activeInteractionData.hasOwnProperty(k))\n            {\n                const interactionData = this.activeInteractionData[k];\n\n                if (interactionData.originalEvent && interactionData.pointerType !== 'touch')\n                {\n                    const interactionEvent = this.configureInteractionEventForDOMEvent(\n                        this.eventData,\n                        interactionData.originalEvent,\n                        interactionData\n                    );\n\n                    this.processInteractive(\n                        interactionEvent,\n                        this.renderer._lastObjectRendered,\n                        this.processPointerOverOut,\n                        true\n                    );\n                }\n            }\n        }\n\n        this.setCursorMode(this.cursor);\n\n        // TODO\n    }\n\n    /**\n     * Sets the current cursor mode, handling any callbacks or CSS style changes.\n     *\n     * @param {string} mode - cursor mode, a key from the cursorStyles dictionary\n     */\n    setCursorMode(mode)\n    {\n        mode = mode || 'default';\n        // if the mode didn't actually change, bail early\n        if (this.currentCursorMode === mode)\n        {\n            return;\n        }\n        this.currentCursorMode = mode;\n        const style = this.cursorStyles[mode];\n\n        // only do things if there is a cursor style for it\n        if (style)\n        {\n            switch (typeof style)\n            {\n                case 'string':\n                    // string styles are handled as cursor CSS\n                    this.interactionDOMElement.style.cursor = style;\n                    break;\n                case 'function':\n                    // functions are just called, and passed the cursor mode\n                    style(mode);\n                    break;\n                case 'object':\n                    // if it is an object, assume that it is a dictionary of CSS styles,\n                    // apply it to the interactionDOMElement\n                    Object.assign(this.interactionDOMElement.style, style);\n                    break;\n            }\n        }\n        else if (typeof mode === 'string' && !Object.prototype.hasOwnProperty.call(this.cursorStyles, mode))\n        {\n            // if it mode is a string (not a Symbol) and cursorStyles doesn't have any entry\n            // for the mode, then assume that the dev wants it to be CSS for the cursor.\n            this.interactionDOMElement.style.cursor = mode;\n        }\n    }\n\n    /**\n     * Dispatches an event on the display object that was interacted with\n     *\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - the display object in question\n     * @param {string} eventString - the name of the event (e.g, mousedown)\n     * @param {object} eventData - the event data object\n     * @private\n     */\n    dispatchEvent(displayObject, eventString, eventData)\n    {\n        if (!eventData.stopped)\n        {\n            eventData.currentTarget = displayObject;\n            eventData.type = eventString;\n\n            displayObject.emit(eventString, eventData);\n\n            if (displayObject[eventString])\n            {\n                displayObject[eventString](eventData);\n            }\n        }\n    }\n\n    /**\n     * Maps x and y coords from a DOM object and maps them correctly to the PixiJS view. The\n     * resulting value is stored in the point. This takes into account the fact that the DOM\n     * element could be scaled and positioned anywhere on the screen.\n     *\n     * @param  {PIXI.Point} point - the point that the result will be stored in\n     * @param  {number} x - the x coord of the position to map\n     * @param  {number} y - the y coord of the position to map\n     */\n    mapPositionToPoint(point, x, y)\n    {\n        let rect;\n\n        // IE 11 fix\n        if (!this.interactionDOMElement.parentElement)\n        {\n            rect = { x: 0, y: 0, width: 0, height: 0 };\n        }\n        else\n        {\n            rect = this.interactionDOMElement.getBoundingClientRect();\n        }\n\n        const resolutionMultiplier = navigator.isCocoonJS ? this.resolution : (1.0 / this.resolution);\n\n        point.x = ((x - rect.left) * (this.interactionDOMElement.width / rect.width)) * resolutionMultiplier;\n        point.y = ((y - rect.top) * (this.interactionDOMElement.height / rect.height)) * resolutionMultiplier;\n    }\n\n    /**\n     * This function is provides a neat way of crawling through the scene graph and running a\n     * specified function on all interactive objects it finds. It will also take care of hit\n     * testing the interactive objects and passes the hit across in the function.\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - event containing the point that\n     *  is tested for collision\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - the displayObject\n     *  that will be hit test (recursively crawls its children)\n     * @param {Function} [func] - the function that will be called on each interactive object. The\n     *  interactionEvent, displayObject and hit will be passed to the function\n     * @param {boolean} [hitTest] - this indicates if the objects inside should be hit test against the point\n     * @param {boolean} [interactive] - Whether the displayObject is interactive\n     * @return {boolean} returns true if the displayObject hit the point\n     */\n    processInteractive(interactionEvent, displayObject, func, hitTest, interactive)\n    {\n        if (!displayObject || !displayObject.visible)\n        {\n            return false;\n        }\n\n        const point = interactionEvent.data.global;\n\n        // Took a little while to rework this function correctly! But now it is done and nice and optimised. ^_^\n        //\n        // This function will now loop through all objects and then only hit test the objects it HAS\n        // to, not all of them. MUCH faster..\n        // An object will be hit test if the following is true:\n        //\n        // 1: It is interactive.\n        // 2: It belongs to a parent that is interactive AND one of the parents children have not already been hit.\n        //\n        // As another little optimisation once an interactive object has been hit we can carry on\n        // through the scenegraph, but we know that there will be no more hits! So we can avoid extra hit tests\n        // A final optimisation is that an object is not hit test directly if a child has already been hit.\n\n        interactive = displayObject.interactive || interactive;\n\n        let hit = false;\n        let interactiveParent = interactive;\n\n        // Flag here can set to false if the event is outside the parents hitArea or mask\n        let hitTestChildren = true;\n\n        // If there is a hitArea, no need to test against anything else if the pointer is not within the hitArea\n        // There is also no longer a need to hitTest children.\n        if (displayObject.hitArea)\n        {\n            if (hitTest)\n            {\n                displayObject.worldTransform.applyInverse(point, this._tempPoint);\n                if (!displayObject.hitArea.contains(this._tempPoint.x, this._tempPoint.y))\n                {\n                    hitTest = false;\n                    hitTestChildren = false;\n                }\n                else\n                {\n                    hit = true;\n                }\n            }\n            interactiveParent = false;\n        }\n        // If there is a mask, no need to test against anything else if the pointer is not within the mask\n        else if (displayObject._mask)\n        {\n            if (hitTest)\n            {\n                if (!displayObject._mask.containsPoint(point))\n                {\n                    hitTest = false;\n                    hitTestChildren = false;\n                }\n            }\n        }\n\n        // ** FREE TIP **! If an object is not interactive or has no buttons in it\n        // (such as a game scene!) set interactiveChildren to false for that displayObject.\n        // This will allow PixiJS to completely ignore and bypass checking the displayObjects children.\n        if (hitTestChildren && displayObject.interactiveChildren && displayObject.children)\n        {\n            const children = displayObject.children;\n\n            for (let i = children.length - 1; i >= 0; i--)\n            {\n                const child = children[i];\n\n                // time to get recursive.. if this function will return if something is hit..\n                const childHit = this.processInteractive(interactionEvent, child, func, hitTest, interactiveParent);\n\n                if (childHit)\n                {\n                    // its a good idea to check if a child has lost its parent.\n                    // this means it has been removed whilst looping so its best\n                    if (!child.parent)\n                    {\n                        continue;\n                    }\n\n                    // we no longer need to hit test any more objects in this container as we we\n                    // now know the parent has been hit\n                    interactiveParent = false;\n\n                    // If the child is interactive , that means that the object hit was actually\n                    // interactive and not just the child of an interactive object.\n                    // This means we no longer need to hit test anything else. We still need to run\n                    // through all objects, but we don't need to perform any hit tests.\n\n                    if (childHit)\n                    {\n                        if (interactionEvent.target)\n                        {\n                            hitTest = false;\n                        }\n                        hit = true;\n                    }\n                }\n            }\n        }\n\n        // no point running this if the item is not interactive or does not have an interactive parent.\n        if (interactive)\n        {\n            // if we are hit testing (as in we have no hit any objects yet)\n            // We also don't need to worry about hit testing if once of the displayObjects children\n            // has already been hit - but only if it was interactive, otherwise we need to keep\n            // looking for an interactive child, just in case we hit one\n            if (hitTest && !interactionEvent.target)\n            {\n                // already tested against hitArea if it is defined\n                if (!displayObject.hitArea && displayObject.containsPoint)\n                {\n                    if (displayObject.containsPoint(point))\n                    {\n                        hit = true;\n                    }\n                }\n            }\n\n            if (displayObject.interactive)\n            {\n                if (hit && !interactionEvent.target)\n                {\n                    interactionEvent.target = displayObject;\n                }\n\n                if (func)\n                {\n                    func(interactionEvent, displayObject, !!hit);\n                }\n            }\n        }\n\n        return hit;\n    }\n\n    /**\n     * Is called when the pointer button is pressed down on the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer button being pressed down\n     */\n    onPointerDown(originalEvent)\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') return;\n\n        const events = this.normalizeToPointerData(originalEvent);\n\n        /**\n         * No need to prevent default on natural pointer events, as there are no side effects\n         * Normalized events, however, may have the double mousedown/touchstart issue on the native android browser,\n         * so still need to be prevented.\n         */\n\n        // Guaranteed that there will be at least one event in events, and all events must have the same pointer type\n\n        if (this.autoPreventDefault && events[0].isNormalized)\n        {\n            originalEvent.preventDefault();\n        }\n\n        const eventLen = events.length;\n\n        for (let i = 0; i < eventLen; i++)\n        {\n            const event = events[i];\n\n            const interactionData = this.getInteractionDataForPointerId(event);\n\n            const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n            interactionEvent.data.originalEvent = originalEvent;\n\n            this.processInteractive(interactionEvent, this.renderer._lastObjectRendered, this.processPointerDown, true);\n\n            this.emit('pointerdown', interactionEvent);\n            if (event.pointerType === 'touch')\n            {\n                this.emit('touchstart', interactionEvent);\n            }\n            // emit a mouse event for \"pen\" pointers, the way a browser would emit a fallback event\n            else if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n            {\n                const isRightButton = event.button === 2;\n\n                this.emit(isRightButton ? 'rightdown' : 'mousedown', this.eventData);\n            }\n        }\n    }\n\n    /**\n     * Processes the result of the pointer down check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processPointerDown(interactionEvent, displayObject, hit)\n    {\n        const data = interactionEvent.data;\n        const id = interactionEvent.data.identifier;\n\n        if (hit)\n        {\n            if (!displayObject.trackedPointers[id])\n            {\n                displayObject.trackedPointers[id] = new InteractionTrackingData(id);\n            }\n            this.dispatchEvent(displayObject, 'pointerdown', interactionEvent);\n\n            if (data.pointerType === 'touch')\n            {\n                this.dispatchEvent(displayObject, 'touchstart', interactionEvent);\n            }\n            else if (data.pointerType === 'mouse' || data.pointerType === 'pen')\n            {\n                const isRightButton = data.button === 2;\n\n                if (isRightButton)\n                {\n                    displayObject.trackedPointers[id].rightDown = true;\n                }\n                else\n                {\n                    displayObject.trackedPointers[id].leftDown = true;\n                }\n\n                this.dispatchEvent(displayObject, isRightButton ? 'rightdown' : 'mousedown', interactionEvent);\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer button is released on the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer button being released\n     * @param {boolean} cancelled - true if the pointer is cancelled\n     * @param {Function} func - Function passed to {@link processInteractive}\n     */\n    onPointerComplete(originalEvent, cancelled, func)\n    {\n        const events = this.normalizeToPointerData(originalEvent);\n\n        const eventLen = events.length;\n\n        // if the event wasn't targeting our canvas, then consider it to be pointerupoutside\n        // in all cases (unless it was a pointercancel)\n        const eventAppend = originalEvent.target !== this.interactionDOMElement ? 'outside' : '';\n\n        for (let i = 0; i < eventLen; i++)\n        {\n            const event = events[i];\n\n            const interactionData = this.getInteractionDataForPointerId(event);\n\n            const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n            interactionEvent.data.originalEvent = originalEvent;\n\n            // perform hit testing for events targeting our canvas or cancel events\n            this.processInteractive(interactionEvent, this.renderer._lastObjectRendered, func, cancelled || !eventAppend);\n\n            this.emit(cancelled ? 'pointercancel' : `pointerup${eventAppend}`, interactionEvent);\n\n            if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n            {\n                const isRightButton = event.button === 2;\n\n                this.emit(isRightButton ? `rightup${eventAppend}` : `mouseup${eventAppend}`, interactionEvent);\n            }\n            else if (event.pointerType === 'touch')\n            {\n                this.emit(cancelled ? 'touchcancel' : `touchend${eventAppend}`, interactionEvent);\n                this.releaseInteractionDataForPointerId(event.pointerId, interactionData);\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer button is cancelled\n     *\n     * @private\n     * @param {PointerEvent} event - The DOM event of a pointer button being released\n     */\n    onPointerCancel(event)\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && event.pointerType === 'touch') return;\n\n        this.onPointerComplete(event, true, this.processPointerCancel);\n    }\n\n    /**\n     * Processes the result of the pointer cancel check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     */\n    processPointerCancel(interactionEvent, displayObject)\n    {\n        const data = interactionEvent.data;\n\n        const id = interactionEvent.data.identifier;\n\n        if (displayObject.trackedPointers[id] !== undefined)\n        {\n            delete displayObject.trackedPointers[id];\n            this.dispatchEvent(displayObject, 'pointercancel', interactionEvent);\n\n            if (data.pointerType === 'touch')\n            {\n                this.dispatchEvent(displayObject, 'touchcancel', interactionEvent);\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer button is released on the renderer element\n     *\n     * @private\n     * @param {PointerEvent} event - The DOM event of a pointer button being released\n     */\n    onPointerUp(event)\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && event.pointerType === 'touch') return;\n\n        this.onPointerComplete(event, false, this.processPointerUp);\n    }\n\n    /**\n     * Processes the result of the pointer up check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processPointerUp(interactionEvent, displayObject, hit)\n    {\n        const data = interactionEvent.data;\n\n        const id = interactionEvent.data.identifier;\n\n        const trackingData = displayObject.trackedPointers[id];\n\n        const isTouch = data.pointerType === 'touch';\n\n        const isMouse = (data.pointerType === 'mouse' || data.pointerType === 'pen');\n        // need to track mouse down status in the mouse block so that we can emit\n        // event in a later block\n        let isMouseTap = false;\n\n        // Mouse only\n        if (isMouse)\n        {\n            const isRightButton = data.button === 2;\n\n            const flags = InteractionTrackingData.FLAGS;\n\n            const test = isRightButton ? flags.RIGHT_DOWN : flags.LEFT_DOWN;\n\n            const isDown = trackingData !== undefined && (trackingData.flags & test);\n\n            if (hit)\n            {\n                this.dispatchEvent(displayObject, isRightButton ? 'rightup' : 'mouseup', interactionEvent);\n\n                if (isDown)\n                {\n                    this.dispatchEvent(displayObject, isRightButton ? 'rightclick' : 'click', interactionEvent);\n                    // because we can confirm that the mousedown happened on this object, flag for later emit of pointertap\n                    isMouseTap = true;\n                }\n            }\n            else if (isDown)\n            {\n                this.dispatchEvent(displayObject, isRightButton ? 'rightupoutside' : 'mouseupoutside', interactionEvent);\n            }\n            // update the down state of the tracking data\n            if (trackingData)\n            {\n                if (isRightButton)\n                {\n                    trackingData.rightDown = false;\n                }\n                else\n                {\n                    trackingData.leftDown = false;\n                }\n            }\n        }\n\n        // Pointers and Touches, and Mouse\n        if (hit)\n        {\n            this.dispatchEvent(displayObject, 'pointerup', interactionEvent);\n            if (isTouch) this.dispatchEvent(displayObject, 'touchend', interactionEvent);\n\n            if (trackingData)\n            {\n                // emit pointertap if not a mouse, or if the mouse block decided it was a tap\n                if (!isMouse || isMouseTap)\n                {\n                    this.dispatchEvent(displayObject, 'pointertap', interactionEvent);\n                }\n                if (isTouch)\n                {\n                    this.dispatchEvent(displayObject, 'tap', interactionEvent);\n                    // touches are no longer over (if they ever were) when we get the touchend\n                    // so we should ensure that we don't keep pretending that they are\n                    trackingData.over = false;\n                }\n            }\n        }\n        else if (trackingData)\n        {\n            this.dispatchEvent(displayObject, 'pointerupoutside', interactionEvent);\n            if (isTouch) this.dispatchEvent(displayObject, 'touchendoutside', interactionEvent);\n        }\n        // Only remove the tracking data if there is no over/down state still associated with it\n        if (trackingData && trackingData.none)\n        {\n            delete displayObject.trackedPointers[id];\n        }\n    }\n\n    /**\n     * Is called when the pointer moves across the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer moving\n     */\n    onPointerMove(originalEvent)\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') return;\n\n        const events = this.normalizeToPointerData(originalEvent);\n\n        if (events[0].pointerType === 'mouse' || events[0].pointerType === 'pen')\n        {\n            this.didMove = true;\n\n            this.cursor = null;\n        }\n\n        const eventLen = events.length;\n\n        for (let i = 0; i < eventLen; i++)\n        {\n            const event = events[i];\n\n            const interactionData = this.getInteractionDataForPointerId(event);\n\n            const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n            interactionEvent.data.originalEvent = originalEvent;\n\n            const interactive = event.pointerType === 'touch' ? this.moveWhenInside : true;\n\n            this.processInteractive(\n                interactionEvent,\n                this.renderer._lastObjectRendered,\n                this.processPointerMove,\n                interactive\n            );\n            this.emit('pointermove', interactionEvent);\n            if (event.pointerType === 'touch') this.emit('touchmove', interactionEvent);\n            if (event.pointerType === 'mouse' || event.pointerType === 'pen') this.emit('mousemove', interactionEvent);\n        }\n\n        if (events[0].pointerType === 'mouse')\n        {\n            this.setCursorMode(this.cursor);\n\n            // TODO BUG for parents interactive object (border order issue)\n        }\n    }\n\n    /**\n     * Processes the result of the pointer move check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processPointerMove(interactionEvent, displayObject, hit)\n    {\n        const data = interactionEvent.data;\n\n        const isTouch = data.pointerType === 'touch';\n\n        const isMouse = (data.pointerType === 'mouse' || data.pointerType === 'pen');\n\n        if (isMouse)\n        {\n            this.processPointerOverOut(interactionEvent, displayObject, hit);\n        }\n\n        if (!this.moveWhenInside || hit)\n        {\n            this.dispatchEvent(displayObject, 'pointermove', interactionEvent);\n            if (isTouch) this.dispatchEvent(displayObject, 'touchmove', interactionEvent);\n            if (isMouse) this.dispatchEvent(displayObject, 'mousemove', interactionEvent);\n        }\n    }\n\n    /**\n     * Is called when the pointer is moved out of the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer being moved out\n     */\n    onPointerOut(originalEvent)\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') return;\n\n        const events = this.normalizeToPointerData(originalEvent);\n\n        // Only mouse and pointer can call onPointerOut, so events will always be length 1\n        const event = events[0];\n\n        if (event.pointerType === 'mouse')\n        {\n            this.mouseOverRenderer = false;\n            this.setCursorMode(null);\n        }\n\n        const interactionData = this.getInteractionDataForPointerId(event);\n\n        const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n        interactionEvent.data.originalEvent = event;\n\n        this.processInteractive(interactionEvent, this.renderer._lastObjectRendered, this.processPointerOverOut, false);\n\n        this.emit('pointerout', interactionEvent);\n        if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n        {\n            this.emit('mouseout', interactionEvent);\n        }\n        else\n        {\n            // we can get touchleave events after touchend, so we want to make sure we don't\n            // introduce memory leaks\n            this.releaseInteractionDataForPointerId(interactionData.identifier);\n        }\n    }\n\n    /**\n     * Processes the result of the pointer over/out check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processPointerOverOut(interactionEvent, displayObject, hit)\n    {\n        const data = interactionEvent.data;\n\n        const id = interactionEvent.data.identifier;\n\n        const isMouse = (data.pointerType === 'mouse' || data.pointerType === 'pen');\n\n        let trackingData = displayObject.trackedPointers[id];\n\n        // if we just moused over the display object, then we need to track that state\n        if (hit && !trackingData)\n        {\n            trackingData = displayObject.trackedPointers[id] = new InteractionTrackingData(id);\n        }\n\n        if (trackingData === undefined) return;\n\n        if (hit && this.mouseOverRenderer)\n        {\n            if (!trackingData.over)\n            {\n                trackingData.over = true;\n                this.dispatchEvent(displayObject, 'pointerover', interactionEvent);\n                if (isMouse)\n                {\n                    this.dispatchEvent(displayObject, 'mouseover', interactionEvent);\n                }\n            }\n\n            // only change the cursor if it has not already been changed (by something deeper in the\n            // display tree)\n            if (isMouse && this.cursor === null)\n            {\n                this.cursor = displayObject.cursor;\n            }\n        }\n        else if (trackingData.over)\n        {\n            trackingData.over = false;\n            this.dispatchEvent(displayObject, 'pointerout', this.eventData);\n            if (isMouse)\n            {\n                this.dispatchEvent(displayObject, 'mouseout', interactionEvent);\n            }\n            // if there is no mouse down information for the pointer, then it is safe to delete\n            if (trackingData.none)\n            {\n                delete displayObject.trackedPointers[id];\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer is moved into the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer button being moved into the renderer view\n     */\n    onPointerOver(originalEvent)\n    {\n        const events = this.normalizeToPointerData(originalEvent);\n\n        // Only mouse and pointer can call onPointerOver, so events will always be length 1\n        const event = events[0];\n\n        const interactionData = this.getInteractionDataForPointerId(event);\n\n        const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n        interactionEvent.data.originalEvent = event;\n\n        if (event.pointerType === 'mouse')\n        {\n            this.mouseOverRenderer = true;\n        }\n\n        this.emit('pointerover', interactionEvent);\n        if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n        {\n            this.emit('mouseover', interactionEvent);\n        }\n    }\n\n    /**\n     * Get InteractionData for a given pointerId. Store that data as well\n     *\n     * @private\n     * @param {PointerEvent} event - Normalized pointer event, output from normalizeToPointerData\n     * @return {PIXI.interaction.InteractionData} - Interaction data for the given pointer identifier\n     */\n    getInteractionDataForPointerId(event)\n    {\n        const pointerId = event.pointerId;\n\n        let interactionData;\n\n        if (pointerId === MOUSE_POINTER_ID || event.pointerType === 'mouse')\n        {\n            interactionData = this.mouse;\n        }\n        else if (this.activeInteractionData[pointerId])\n        {\n            interactionData = this.activeInteractionData[pointerId];\n        }\n        else\n        {\n            interactionData = this.interactionDataPool.pop() || new InteractionData();\n            interactionData.identifier = pointerId;\n            this.activeInteractionData[pointerId] = interactionData;\n        }\n        // copy properties from the event, so that we can make sure that touch/pointer specific\n        // data is available\n        interactionData.copyEvent(event);\n\n        return interactionData;\n    }\n\n    /**\n     * Return unused InteractionData to the pool, for a given pointerId\n     *\n     * @private\n     * @param {number} pointerId - Identifier from a pointer event\n     */\n    releaseInteractionDataForPointerId(pointerId)\n    {\n        const interactionData = this.activeInteractionData[pointerId];\n\n        if (interactionData)\n        {\n            delete this.activeInteractionData[pointerId];\n            interactionData.reset();\n            this.interactionDataPool.push(interactionData);\n        }\n    }\n\n    /**\n     * Configure an InteractionEvent to wrap a DOM PointerEvent and InteractionData\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - The event to be configured\n     * @param {PointerEvent} pointerEvent - The DOM event that will be paired with the InteractionEvent\n     * @param {PIXI.interaction.InteractionData} interactionData - The InteractionData that will be paired\n     *        with the InteractionEvent\n     * @return {PIXI.interaction.InteractionEvent} the interaction event that was passed in\n     */\n    configureInteractionEventForDOMEvent(interactionEvent, pointerEvent, interactionData)\n    {\n        interactionEvent.data = interactionData;\n\n        this.mapPositionToPoint(interactionData.global, pointerEvent.clientX, pointerEvent.clientY);\n\n        // This is the way InteractionManager processed touch events before the refactoring, so I've kept\n        // it here. But it doesn't make that much sense to me, since mapPositionToPoint already factors\n        // in this.resolution, so this just divides by this.resolution twice for touch events...\n        if (navigator.isCocoonJS && pointerEvent.pointerType === 'touch')\n        {\n            interactionData.global.x = interactionData.global.x / this.resolution;\n            interactionData.global.y = interactionData.global.y / this.resolution;\n        }\n\n        // Not really sure why this is happening, but it's how a previous version handled things\n        if (pointerEvent.pointerType === 'touch')\n        {\n            pointerEvent.globalX = interactionData.global.x;\n            pointerEvent.globalY = interactionData.global.y;\n        }\n\n        interactionData.originalEvent = pointerEvent;\n        interactionEvent.reset();\n\n        return interactionEvent;\n    }\n\n    /**\n     * Ensures that the original event object contains all data that a regular pointer event would have\n     *\n     * @private\n     * @param {TouchEvent|MouseEvent|PointerEvent} event - The original event data from a touch or mouse event\n     * @return {PointerEvent[]} An array containing a single normalized pointer event, in the case of a pointer\n     *  or mouse event, or a multiple normalized pointer events if there are multiple changed touches\n     */\n    normalizeToPointerData(event)\n    {\n        const normalizedEvents = [];\n\n        if (this.supportsTouchEvents && event instanceof TouchEvent)\n        {\n            for (let i = 0, li = event.changedTouches.length; i < li; i++)\n            {\n                const touch = event.changedTouches[i];\n\n                if (typeof touch.button === 'undefined') touch.button = event.touches.length ? 1 : 0;\n                if (typeof touch.buttons === 'undefined') touch.buttons = event.touches.length ? 1 : 0;\n                if (typeof touch.isPrimary === 'undefined')\n                {\n                    touch.isPrimary = event.touches.length === 1 && event.type === 'touchstart';\n                }\n                if (typeof touch.width === 'undefined') touch.width = touch.radiusX || 1;\n                if (typeof touch.height === 'undefined') touch.height = touch.radiusY || 1;\n                if (typeof touch.tiltX === 'undefined') touch.tiltX = 0;\n                if (typeof touch.tiltY === 'undefined') touch.tiltY = 0;\n                if (typeof touch.pointerType === 'undefined') touch.pointerType = 'touch';\n                if (typeof touch.pointerId === 'undefined') touch.pointerId = touch.identifier || 0;\n                if (typeof touch.pressure === 'undefined') touch.pressure = touch.force || 0.5;\n                if (typeof touch.twist === 'undefined') touch.twist = 0;\n                if (typeof touch.tangentialPressure === 'undefined') touch.tangentialPressure = 0;\n                // TODO: Remove these, as layerX/Y is not a standard, is deprecated, has uneven\n                // support, and the fill ins are not quite the same\n                // offsetX/Y might be okay, but is not the same as clientX/Y when the canvas's top\n                // left is not 0,0 on the page\n                if (typeof touch.layerX === 'undefined') touch.layerX = touch.offsetX = touch.clientX;\n                if (typeof touch.layerY === 'undefined') touch.layerY = touch.offsetY = touch.clientY;\n\n                // mark the touch as normalized, just so that we know we did it\n                touch.isNormalized = true;\n\n                normalizedEvents.push(touch);\n            }\n        }\n        // apparently PointerEvent subclasses MouseEvent, so yay\n        else if (event instanceof MouseEvent && (!this.supportsPointerEvents || !(event instanceof window.PointerEvent)))\n        {\n            if (typeof event.isPrimary === 'undefined') event.isPrimary = true;\n            if (typeof event.width === 'undefined') event.width = 1;\n            if (typeof event.height === 'undefined') event.height = 1;\n            if (typeof event.tiltX === 'undefined') event.tiltX = 0;\n            if (typeof event.tiltY === 'undefined') event.tiltY = 0;\n            if (typeof event.pointerType === 'undefined') event.pointerType = 'mouse';\n            if (typeof event.pointerId === 'undefined') event.pointerId = MOUSE_POINTER_ID;\n            if (typeof event.pressure === 'undefined') event.pressure = 0.5;\n            if (typeof event.twist === 'undefined') event.twist = 0;\n            if (typeof event.tangentialPressure === 'undefined') event.tangentialPressure = 0;\n\n            // mark the mouse event as normalized, just so that we know we did it\n            event.isNormalized = true;\n\n            normalizedEvents.push(event);\n        }\n        else\n        {\n            normalizedEvents.push(event);\n        }\n\n        return normalizedEvents;\n    }\n\n    /**\n     * Destroys the interaction manager\n     *\n     */\n    destroy()\n    {\n        this.removeEvents();\n\n        this.removeAllListeners();\n\n        this.renderer = null;\n\n        this.mouse = null;\n\n        this.eventData = null;\n\n        this.interactionDOMElement = null;\n\n        this.onPointerDown = null;\n        this.processPointerDown = null;\n\n        this.onPointerUp = null;\n        this.processPointerUp = null;\n\n        this.onPointerCancel = null;\n        this.processPointerCancel = null;\n\n        this.onPointerMove = null;\n        this.processPointerMove = null;\n\n        this.onPointerOut = null;\n        this.processPointerOverOut = null;\n\n        this.onPointerOver = null;\n\n        this._tempPoint = null;\n    }\n}\n\ncore.WebGLRenderer.registerPlugin('interaction', InteractionManager);\ncore.CanvasRenderer.registerPlugin('interaction', InteractionManager);\n"]}