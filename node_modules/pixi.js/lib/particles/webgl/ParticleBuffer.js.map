{"version":3,"sources":["../../../src/particles/webgl/ParticleBuffer.js"],"names":["ParticleBuffer","gl","properties","dynamicPropertyFlags","size","dynamicProperties","staticProperties","i","length","property","attribute","uploadFunction","unsignedByte","offset","push","staticStride","staticBuffer","staticData","staticDataUint32","dynamicStride","dynamicBuffer","dynamicData","dynamicDataUint32","_updateID","initBuffers","dynamicOffset","indices","indexBuffer","GLBuffer","createIndexBuffer","STATIC_DRAW","dynBuffer","ArrayBuffer","Float32Array","Uint32Array","createVertexBuffer","STREAM_DRAW","staticOffset","statBuffer","vao","VertexArrayObject","addIndex","addAttribute","UNSIGNED_BYTE","FLOAT","uploadDynamic","children","startIndex","amount","upload","uploadStatic","destroy"],"mappings":"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","file":"ParticleBuffer.js","sourcesContent":["import glCore from 'pixi-gl-core';\nimport createIndicesForQuads from '../../core/utils/createIndicesForQuads';\n\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that\n * they now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleBuffer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleBuffer.java\n */\n\n/**\n * The particle buffer manages the static and dynamic buffers for a particle container.\n *\n * @class\n * @private\n * @memberof PIXI\n */\nexport default class ParticleBuffer\n{\n    /**\n     * @param {WebGLRenderingContext} gl - The rendering context.\n     * @param {object} properties - The properties to upload.\n     * @param {boolean[]} dynamicPropertyFlags - Flags for which properties are dynamic.\n     * @param {number} size - The size of the batch.\n     */\n    constructor(gl, properties, dynamicPropertyFlags, size)\n    {\n        /**\n         * The current WebGL drawing context.\n         *\n         * @member {WebGLRenderingContext}\n         */\n        this.gl = gl;\n\n        /**\n         * The number of particles the buffer can hold\n         *\n         * @member {number}\n         */\n        this.size = size;\n\n        /**\n         * A list of the properties that are dynamic.\n         *\n         * @member {object[]}\n         */\n        this.dynamicProperties = [];\n\n        /**\n         * A list of the properties that are static.\n         *\n         * @member {object[]}\n         */\n        this.staticProperties = [];\n\n        for (let i = 0; i < properties.length; ++i)\n        {\n            let property = properties[i];\n\n            // Make copy of properties object so that when we edit the offset it doesn't\n            // change all other instances of the object literal\n            property = {\n                attribute: property.attribute,\n                size: property.size,\n                uploadFunction: property.uploadFunction,\n                unsignedByte: property.unsignedByte,\n                offset: property.offset,\n            };\n\n            if (dynamicPropertyFlags[i])\n            {\n                this.dynamicProperties.push(property);\n            }\n            else\n            {\n                this.staticProperties.push(property);\n            }\n        }\n\n        this.staticStride = 0;\n        this.staticBuffer = null;\n        this.staticData = null;\n        this.staticDataUint32 = null;\n\n        this.dynamicStride = 0;\n        this.dynamicBuffer = null;\n        this.dynamicData = null;\n        this.dynamicDataUint32 = null;\n\n        this._updateID = 0;\n\n        this.initBuffers();\n    }\n\n    /**\n     * Sets up the renderer context and necessary buffers.\n     *\n     * @private\n     */\n    initBuffers()\n    {\n        const gl = this.gl;\n        let dynamicOffset = 0;\n\n        /**\n         * Holds the indices of the geometry (quads) to draw\n         *\n         * @member {Uint16Array}\n         */\n        this.indices = createIndicesForQuads(this.size);\n        this.indexBuffer = glCore.GLBuffer.createIndexBuffer(gl, this.indices, gl.STATIC_DRAW);\n\n        this.dynamicStride = 0;\n\n        for (let i = 0; i < this.dynamicProperties.length; ++i)\n        {\n            const property = this.dynamicProperties[i];\n\n            property.offset = dynamicOffset;\n            dynamicOffset += property.size;\n            this.dynamicStride += property.size;\n        }\n\n        const dynBuffer = new ArrayBuffer(this.size * this.dynamicStride * 4 * 4);\n\n        this.dynamicData = new Float32Array(dynBuffer);\n        this.dynamicDataUint32 = new Uint32Array(dynBuffer);\n        this.dynamicBuffer = glCore.GLBuffer.createVertexBuffer(gl, dynBuffer, gl.STREAM_DRAW);\n\n        // static //\n        let staticOffset = 0;\n\n        this.staticStride = 0;\n\n        for (let i = 0; i < this.staticProperties.length; ++i)\n        {\n            const property = this.staticProperties[i];\n\n            property.offset = staticOffset;\n            staticOffset += property.size;\n            this.staticStride += property.size;\n        }\n\n        const statBuffer = new ArrayBuffer(this.size * this.staticStride * 4 * 4);\n\n        this.staticData = new Float32Array(statBuffer);\n        this.staticDataUint32 = new Uint32Array(statBuffer);\n        this.staticBuffer = glCore.GLBuffer.createVertexBuffer(gl, statBuffer, gl.STATIC_DRAW);\n\n        this.vao = new glCore.VertexArrayObject(gl)\n        .addIndex(this.indexBuffer);\n\n        for (let i = 0; i < this.dynamicProperties.length; ++i)\n        {\n            const property = this.dynamicProperties[i];\n\n            if (property.unsignedByte)\n            {\n                this.vao.addAttribute(\n                    this.dynamicBuffer,\n                    property.attribute,\n                    gl.UNSIGNED_BYTE,\n                    true,\n                    this.dynamicStride * 4,\n                    property.offset * 4\n                );\n            }\n            else\n            {\n                this.vao.addAttribute(\n                    this.dynamicBuffer,\n                    property.attribute,\n                    gl.FLOAT,\n                    false,\n                    this.dynamicStride * 4,\n                    property.offset * 4\n                );\n            }\n        }\n\n        for (let i = 0; i < this.staticProperties.length; ++i)\n        {\n            const property = this.staticProperties[i];\n\n            if (property.unsignedByte)\n            {\n                this.vao.addAttribute(\n                    this.staticBuffer,\n                    property.attribute,\n                    gl.UNSIGNED_BYTE,\n                    true,\n                    this.staticStride * 4,\n                    property.offset * 4\n                );\n            }\n            else\n            {\n                this.vao.addAttribute(\n                    this.staticBuffer,\n                    property.attribute,\n                    gl.FLOAT,\n                    false,\n                    this.staticStride * 4,\n                    property.offset * 4\n                );\n            }\n        }\n    }\n\n    /**\n     * Uploads the dynamic properties.\n     *\n     * @param {PIXI.DisplayObject[]} children - The children to upload.\n     * @param {number} startIndex - The index to start at.\n     * @param {number} amount - The number to upload.\n     */\n    uploadDynamic(children, startIndex, amount)\n    {\n        for (let i = 0; i < this.dynamicProperties.length; i++)\n        {\n            const property = this.dynamicProperties[i];\n\n            property.uploadFunction(children, startIndex, amount,\n                property.unsignedByte ? this.dynamicDataUint32 : this.dynamicData,\n                this.dynamicStride, property.offset);\n        }\n\n        this.dynamicBuffer.upload();\n    }\n\n    /**\n     * Uploads the static properties.\n     *\n     * @param {PIXI.DisplayObject[]} children - The children to upload.\n     * @param {number} startIndex - The index to start at.\n     * @param {number} amount - The number to upload.\n     */\n    uploadStatic(children, startIndex, amount)\n    {\n        for (let i = 0; i < this.staticProperties.length; i++)\n        {\n            const property = this.staticProperties[i];\n\n            property.uploadFunction(children, startIndex, amount,\n                property.unsignedByte ? this.staticDataUint32 : this.staticData,\n                this.staticStride, property.offset);\n        }\n\n        this.staticBuffer.upload();\n    }\n\n    /**\n     * Destroys the ParticleBuffer.\n     *\n     */\n    destroy()\n    {\n        this.dynamicProperties = null;\n        this.dynamicBuffer.destroy();\n        this.dynamicBuffer = null;\n        this.dynamicData = null;\n        this.dynamicDataUint32 = null;\n\n        this.staticProperties = null;\n        this.staticBuffer.destroy();\n        this.staticBuffer = null;\n        this.staticData = null;\n        this.staticDataUint32 = null;\n    }\n\n}\n"]}