{"version":3,"sources":["../../src/loaders/bitmapFontParser.js"],"names":["parse","bitmapFontParser","resource","next","data","type","TYPE","XML","getElementsByTagName","length","getAttribute","xmlUrl","isDataUrl","path","dirname","url","baseUrl","charAt","replace","pages","textures","completed","page","metadata","pageFile","texture","Object","keys","i","exists","name","resources","bitmapResource","onAfterMiddleware","add","options","crossOrigin","loadType","LOAD_TYPE","IMAGE","assign","imageMetadata","parentResource","bitmapFont","registerFont"],"mappings":"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","file":"bitmapFontParser.js","sourcesContent":["import * as path from 'path';\nimport { Resource } from 'resource-loader';\nimport { BitmapText } from '../extras';\n\n/**\n * Register a BitmapText font from loader resource.\n *\n * @function parseBitmapFontData\n * @memberof PIXI.loaders\n * @param {PIXI.loaders.Resource} resource - Loader resource.\n * @param {PIXI.Texture|PIXI.Texture[]} textures - List of textures for each page.\n */\nexport function parse(resource, textures)\n{\n    resource.bitmapFont = BitmapText.registerFont(resource.data, textures);\n}\n\nexport default function ()\n{\n    return function bitmapFontParser(resource, next)\n    {\n        // skip if no data or not xml data\n        if (!resource.data || resource.type !== Resource.TYPE.XML)\n        {\n            next();\n\n            return;\n        }\n\n        // skip if not bitmap font data, using some silly duck-typing\n        if (resource.data.getElementsByTagName('page').length === 0\n            || resource.data.getElementsByTagName('info').length === 0\n            || resource.data.getElementsByTagName('info')[0].getAttribute('face') === null\n        )\n        {\n            next();\n\n            return;\n        }\n\n        let xmlUrl = !resource.isDataUrl ? path.dirname(resource.url) : '';\n\n        if (resource.isDataUrl)\n        {\n            if (xmlUrl === '.')\n            {\n                xmlUrl = '';\n            }\n\n            if (this.baseUrl && xmlUrl)\n            {\n                // if baseurl has a trailing slash then add one to xmlUrl so the replace works below\n                if (this.baseUrl.charAt(this.baseUrl.length - 1) === '/')\n                {\n                    xmlUrl += '/';\n                }\n            }\n        }\n\n        // remove baseUrl from xmlUrl\n        xmlUrl = xmlUrl.replace(this.baseUrl, '');\n\n        // if there is an xmlUrl now, it needs a trailing slash. Ensure that it does if the string isn't empty.\n        if (xmlUrl && xmlUrl.charAt(xmlUrl.length - 1) !== '/')\n        {\n            xmlUrl += '/';\n        }\n\n        const pages = resource.data.getElementsByTagName('page');\n        const textures = {};\n\n        // Handle completed, when the number of textures\n        // load is the same number as references in the fnt file\n        const completed = (page) =>\n        {\n            textures[page.metadata.pageFile] = page.texture;\n\n            if (Object.keys(textures).length === pages.length)\n            {\n                parse(resource, textures);\n                next();\n            }\n        };\n\n        for (let i = 0; i < pages.length; ++i)\n        {\n            const pageFile = pages[i].getAttribute('file');\n            const url = xmlUrl + pageFile;\n            let exists = false;\n\n            // incase the image is loaded outside\n            // using the same loader, resource will be available\n            for (const name in this.resources)\n            {\n                const bitmapResource = this.resources[name];\n\n                if (bitmapResource.url === url)\n                {\n                    bitmapResource.metadata.pageFile = pageFile;\n                    if (bitmapResource.texture)\n                    {\n                        completed(bitmapResource);\n                    }\n                    else\n                    {\n                        bitmapResource.onAfterMiddleware.add(completed);\n                    }\n                    exists = true;\n                    break;\n                }\n            }\n\n            // texture is not loaded, we'll attempt to add\n            // it to the load and add the texture to the list\n            if (!exists)\n            {\n                // Standard loading options for images\n                const options = {\n                    crossOrigin: resource.crossOrigin,\n                    loadType: Resource.LOAD_TYPE.IMAGE,\n                    metadata: Object.assign(\n                        { pageFile },\n                        resource.metadata.imageMetadata\n                    ),\n                    parentResource: resource,\n                };\n\n                this.add(url, options, completed);\n            }\n        }\n    };\n}\n"]}