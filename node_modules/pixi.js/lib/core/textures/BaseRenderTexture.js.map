{"version":3,"sources":["../../../src/core/textures/BaseRenderTexture.js"],"names":["BaseRenderTexture","width","height","scaleMode","resolution","RESOLUTION","Math","ceil","realWidth","realHeight","undefined","SCALE_MODE","hasLoaded","_glRenderTargets","_canvasRenderTarget","valid","resize","emit","destroy","renderer"],"mappings":";;;;AAAA;;;;AACA;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAwCqBA,iB;;;AAEjB;;;;;;AAMA,+BACA;AAAA,QADYC,KACZ,uEADoB,GACpB;AAAA,QADyBC,MACzB,uEADkC,GAClC;AAAA,QADuCC,SACvC;AAAA,QADkDC,UAClD;;AAAA;;AAAA,iDACI,wBAAM,IAAN,EAAYD,SAAZ,CADJ;;AAGI,UAAKC,UAAL,GAAkBA,cAAc,mBAASC,UAAzC;;AAEA,UAAKJ,KAAL,GAAaK,KAAKC,IAAL,CAAUN,KAAV,CAAb;AACA,UAAKC,MAAL,GAAcI,KAAKC,IAAL,CAAUL,MAAV,CAAd;;AAEA,UAAKM,SAAL,GAAiB,MAAKP,KAAL,GAAa,MAAKG,UAAnC;AACA,UAAKK,UAAL,GAAkB,MAAKP,MAAL,GAAc,MAAKE,UAArC;;AAEA,UAAKD,SAAL,GAAiBA,cAAcO,SAAd,GAA0BP,SAA1B,GAAsC,mBAASQ,UAAhE;AACA,UAAKC,SAAL,GAAiB,IAAjB;;AAEA;;;;;;AAMA,UAAKC,gBAAL,GAAwB,EAAxB;;AAEA;;;;;;AAMA,UAAKC,mBAAL,GAA2B,IAA3B;;AAEA;;;;;AAKA,UAAKC,KAAL,GAAa,KAAb;AAnCJ;AAoCC;;AAED;;;;;;;;8BAMAC,M,mBAAOf,K,EAAOC,M,EACd;AACID,YAAQK,KAAKC,IAAL,CAAUN,KAAV,CAAR;AACAC,aAASI,KAAKC,IAAL,CAAUL,MAAV,CAAT;;AAEA,QAAID,UAAU,KAAKA,KAAf,IAAwBC,WAAW,KAAKA,MAA5C,EACA;AACI;AACH;;AAED,SAAKa,KAAL,GAAcd,QAAQ,CAAR,IAAaC,SAAS,CAApC;;AAEA,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;;AAEA,SAAKM,SAAL,GAAiB,KAAKP,KAAL,GAAa,KAAKG,UAAnC;AACA,SAAKK,UAAL,GAAkB,KAAKP,MAAL,GAAc,KAAKE,UAArC;;AAEA,QAAI,CAAC,KAAKW,KAAV,EACA;AACI;AACH;;AAED,SAAKE,IAAL,CAAU,QAAV,EAAoB,IAApB;AACH,G;;AAED;;;;;;8BAIAC,O,sBACA;AACI,2BAAMA,OAAN,YAAc,IAAd;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACH,G;;;;;kBAvFgBnB,iB","file":"BaseRenderTexture.js","sourcesContent":["import BaseTexture from './BaseTexture';\nimport settings from '../settings';\n\n/**\n * A BaseRenderTexture is a special texture that allows any PixiJS display object to be rendered to it.\n *\n * __Hint__: All DisplayObjects (i.e. Sprites) that render to a BaseRenderTexture should be preloaded\n * otherwise black rectangles will be drawn instead.\n *\n * A BaseRenderTexture takes a snapshot of any Display Object given to its render method. The position\n * and rotation of the given Display Objects is ignored. For example:\n *\n * ```js\n * let renderer = PIXI.autoDetectRenderer(1024, 1024);\n * let baseRenderTexture = new PIXI.BaseRenderTexture(800, 600);\n * let renderTexture = new PIXI.RenderTexture(baseRenderTexture);\n * let sprite = PIXI.Sprite.fromImage(\"spinObj_01.png\");\n *\n * sprite.position.x = 800/2;\n * sprite.position.y = 600/2;\n * sprite.anchor.x = 0.5;\n * sprite.anchor.y = 0.5;\n *\n * renderer.render(sprite, renderTexture);\n * ```\n *\n * The Sprite in this case will be rendered using its local transform. To render this sprite at 0,0\n * you can clear the transform\n *\n * ```js\n *\n * sprite.setTransform()\n *\n * let baseRenderTexture = new PIXI.BaseRenderTexture(100, 100);\n * let renderTexture = new PIXI.RenderTexture(baseRenderTexture);\n *\n * renderer.render(sprite, renderTexture);  // Renders to center of RenderTexture\n * ```\n *\n * @class\n * @extends PIXI.BaseTexture\n * @memberof PIXI\n */\nexport default class BaseRenderTexture extends BaseTexture\n{\n    /**\n     * @param {number} [width=100] - The width of the base render texture\n     * @param {number} [height=100] - The height of the base render texture\n     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n     * @param {number} [resolution=1] - The resolution / device pixel ratio of the texture being generated\n     */\n    constructor(width = 100, height = 100, scaleMode, resolution)\n    {\n        super(null, scaleMode);\n\n        this.resolution = resolution || settings.RESOLUTION;\n\n        this.width = Math.ceil(width);\n        this.height = Math.ceil(height);\n\n        this.realWidth = this.width * this.resolution;\n        this.realHeight = this.height * this.resolution;\n\n        this.scaleMode = scaleMode !== undefined ? scaleMode : settings.SCALE_MODE;\n        this.hasLoaded = true;\n\n        /**\n         * A map of renderer IDs to webgl renderTargets\n         *\n         * @private\n         * @member {object<number, WebGLTexture>}\n         */\n        this._glRenderTargets = {};\n\n        /**\n         * A reference to the canvas render target (we only need one as this can be shared across renderers)\n         *\n         * @private\n         * @member {object<number, WebGLTexture>}\n         */\n        this._canvasRenderTarget = null;\n\n        /**\n         * This will let the renderer know if the texture is valid. If it's not then it cannot be rendered.\n         *\n         * @member {boolean}\n         */\n        this.valid = false;\n    }\n\n    /**\n     * Resizes the BaseRenderTexture.\n     *\n     * @param {number} width - The width to resize to.\n     * @param {number} height - The height to resize to.\n     */\n    resize(width, height)\n    {\n        width = Math.ceil(width);\n        height = Math.ceil(height);\n\n        if (width === this.width && height === this.height)\n        {\n            return;\n        }\n\n        this.valid = (width > 0 && height > 0);\n\n        this.width = width;\n        this.height = height;\n\n        this.realWidth = this.width * this.resolution;\n        this.realHeight = this.height * this.resolution;\n\n        if (!this.valid)\n        {\n            return;\n        }\n\n        this.emit('update', this);\n    }\n\n    /**\n     * Destroys this texture\n     *\n     */\n    destroy()\n    {\n        super.destroy(true);\n        this.renderer = null;\n    }\n}\n"]}