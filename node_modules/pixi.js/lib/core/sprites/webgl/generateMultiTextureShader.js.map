{"version":3,"sources":["../../../../src/core/sprites/webgl/generateMultiTextureShader.js"],"names":["generateMultiTextureShader","fragTemplate","join","gl","maxTextures","vertexSrc","fragmentSrc","replace","generateSampleSrc","shader","sampleValues","i","bind","uniforms","uSamplers","src"],"mappings":";;;kBAiBwBA,0B;;AAjBxB;;;;AAEA;;;;AAEA,IAAMC,eAAe,CACjB,6BADiB,EAEjB,sBAFiB,EAGjB,2BAHiB,EAIjB,uCAJiB,EAMjB,kBANiB,EAOjB,aAPiB,EAQjB,WARiB,EASjB,gCATiB,EAUjB,GAViB,EAWnBC,IAXmB,CAWd,IAXc,CAArB;;AAae,SAASF,0BAAT,CAAoCG,EAApC,EAAwCC,WAAxC,EACf;AACI,QAAMC,qdAAN;AACA,QAAIC,cAAcL,YAAlB;;AAEAK,kBAAcA,YAAYC,OAAZ,CAAoB,WAApB,EAAiCH,WAAjC,CAAd;AACAE,kBAAcA,YAAYC,OAAZ,CAAoB,aAApB,EAAmCC,kBAAkBJ,WAAlB,CAAnC,CAAd;;AAEA,QAAMK,SAAS,qBAAWN,EAAX,EAAeE,SAAf,EAA0BC,WAA1B,CAAf;;AAEA,QAAMI,eAAe,EAArB;;AAEA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIP,WAApB,EAAiCO,GAAjC,EACA;AACID,qBAAaC,CAAb,IAAkBA,CAAlB;AACH;;AAEDF,WAAOG,IAAP;AACAH,WAAOI,QAAP,CAAgBC,SAAhB,GAA4BJ,YAA5B;;AAEA,WAAOD,MAAP;AACH;;AAED,SAASD,iBAAT,CAA2BJ,WAA3B,EACA;AACI,QAAIW,MAAM,EAAV;;AAEAA,WAAO,IAAP;AACAA,WAAO,IAAP;;AAEA,SAAK,IAAIJ,IAAI,CAAb,EAAgBA,IAAIP,WAApB,EAAiCO,GAAjC,EACA;AACI,YAAIA,IAAI,CAAR,EACA;AACII,mBAAO,SAAP;AACH;;AAED,YAAIJ,IAAIP,cAAc,CAAtB,EACA;AACIW,wCAA0BJ,CAA1B;AACH;;AAEDI,eAAO,KAAP;AACAA,oDAA0CJ,CAA1C;AACAI,eAAO,KAAP;AACH;;AAEDA,WAAO,IAAP;AACAA,WAAO,IAAP;;AAEA,WAAOA,GAAP;AACH","file":"generateMultiTextureShader.js","sourcesContent":["import Shader from '../../Shader';\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\nconst fragTemplate = [\n    'varying vec2 vTextureCoord;',\n    'varying vec4 vColor;',\n    'varying float vTextureId;',\n    'uniform sampler2D uSamplers[%count%];',\n\n    'void main(void){',\n    'vec4 color;',\n    '%forloop%',\n    'gl_FragColor = color * vColor;',\n    '}',\n].join('\\n');\n\nexport default function generateMultiTextureShader(gl, maxTextures)\n{\n    const vertexSrc = readFileSync(join(__dirname, './texture.vert'), 'utf8');\n    let fragmentSrc = fragTemplate;\n\n    fragmentSrc = fragmentSrc.replace(/%count%/gi, maxTextures);\n    fragmentSrc = fragmentSrc.replace(/%forloop%/gi, generateSampleSrc(maxTextures));\n\n    const shader = new Shader(gl, vertexSrc, fragmentSrc);\n\n    const sampleValues = [];\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        sampleValues[i] = i;\n    }\n\n    shader.bind();\n    shader.uniforms.uSamplers = sampleValues;\n\n    return shader;\n}\n\nfunction generateSampleSrc(maxTextures)\n{\n    let src = '';\n\n    src += '\\n';\n    src += '\\n';\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        if (i > 0)\n        {\n            src += '\\nelse ';\n        }\n\n        if (i < maxTextures - 1)\n        {\n            src += `if(vTextureId < ${i}.5)`;\n        }\n\n        src += '\\n{';\n        src += `\\n\\tcolor = texture2D(uSamplers[${i}], vTextureCoord);`;\n        src += '\\n}';\n    }\n\n    src += '\\n';\n    src += '\\n';\n\n    return src;\n}\n"]}