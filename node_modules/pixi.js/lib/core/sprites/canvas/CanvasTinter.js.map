{"version":3,"sources":["../../../../src/core/sprites/canvas/CanvasTinter.js"],"names":["CanvasTinter","getTintedTexture","sprite","color","texture","_texture","roundColor","stringColor","toString","substr","tintCache","cachedTexture","canvas","tintId","_updateID","document","createElement","tintMethod","convertTintToImage","tintImage","Image","src","toDataURL","tintWithMultiply","context","getContext","crop","_frame","clone","resolution","baseTexture","x","y","width","height","Math","ceil","save","fillStyle","fillRect","globalCompositeOperation","drawImage","source","restore","tintWithOverlay","tintWithPerPixel","rgbValues","r","g","b","pixelData","getImageData","pixels","data","i","length","putImageData","step","cacheStepsPerColorChannel","min","canUseMultiply"],"mappings":"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","file":"CanvasTinter.js","sourcesContent":["import { hex2rgb, rgb2hex } from '../../utils';\nimport canUseNewCanvasBlendModes from '../../renderers/canvas/utils/canUseNewCanvasBlendModes';\n\n/**\n * Utility methods for Sprite/Texture tinting.\n *\n * @class\n * @memberof PIXI\n */\nconst CanvasTinter = {\n    /**\n     * Basically this method just needs a sprite and a color and tints the sprite with the given color.\n     *\n     * @memberof PIXI.CanvasTinter\n     * @param {PIXI.Sprite} sprite - the sprite to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @return {HTMLCanvasElement} The tinted canvas\n     */\n    getTintedTexture: (sprite, color) =>\n    {\n        const texture = sprite._texture;\n\n        color = CanvasTinter.roundColor(color);\n\n        const stringColor = `#${(`00000${(color | 0).toString(16)}`).substr(-6)}`;\n\n        texture.tintCache = texture.tintCache || {};\n\n        const cachedTexture = texture.tintCache[stringColor];\n\n        let canvas;\n\n        if (cachedTexture)\n        {\n            if (cachedTexture.tintId === texture._updateID)\n            {\n                return texture.tintCache[stringColor];\n            }\n\n            canvas = texture.tintCache[stringColor];\n        }\n        else\n        {\n            canvas = CanvasTinter.canvas || document.createElement('canvas');\n        }\n\n        CanvasTinter.tintMethod(texture, color, canvas);\n\n        canvas.tintId = texture._updateID;\n\n        if (CanvasTinter.convertTintToImage)\n        {\n            // is this better?\n            const tintImage = new Image();\n\n            tintImage.src = canvas.toDataURL();\n\n            texture.tintCache[stringColor] = tintImage;\n        }\n        else\n        {\n            texture.tintCache[stringColor] = canvas;\n            // if we are not converting the texture to an image then we need to lose the reference to the canvas\n            CanvasTinter.canvas = null;\n        }\n\n        return canvas;\n    },\n\n    /**\n     * Tint a texture using the 'multiply' operation.\n     *\n     * @memberof PIXI.CanvasTinter\n     * @param {PIXI.Texture} texture - the texture to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @param {HTMLCanvasElement} canvas - the current canvas\n     */\n    tintWithMultiply: (texture, color, canvas) =>\n    {\n        const context = canvas.getContext('2d');\n        const crop = texture._frame.clone();\n        const resolution = texture.baseTexture.resolution;\n\n        crop.x *= resolution;\n        crop.y *= resolution;\n        crop.width *= resolution;\n        crop.height *= resolution;\n\n        canvas.width = Math.ceil(crop.width);\n        canvas.height = Math.ceil(crop.height);\n\n        context.save();\n        context.fillStyle = `#${(`00000${(color | 0).toString(16)}`).substr(-6)}`;\n\n        context.fillRect(0, 0, crop.width, crop.height);\n\n        context.globalCompositeOperation = 'multiply';\n\n        context.drawImage(\n            texture.baseTexture.source,\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n\n        context.globalCompositeOperation = 'destination-atop';\n\n        context.drawImage(\n            texture.baseTexture.source,\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n        context.restore();\n    },\n\n    /**\n     * Tint a texture using the 'overlay' operation.\n     *\n     * @memberof PIXI.CanvasTinter\n     * @param {PIXI.Texture} texture - the texture to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @param {HTMLCanvasElement} canvas - the current canvas\n     */\n    tintWithOverlay(texture, color, canvas)\n    {\n        const context = canvas.getContext('2d');\n        const crop = texture._frame.clone();\n        const resolution = texture.baseTexture.resolution;\n\n        crop.x *= resolution;\n        crop.y *= resolution;\n        crop.width *= resolution;\n        crop.height *= resolution;\n\n        canvas.width = Math.ceil(crop.width);\n        canvas.height = Math.ceil(crop.height);\n\n        context.save();\n        context.globalCompositeOperation = 'copy';\n        context.fillStyle = `#${(`00000${(color | 0).toString(16)}`).substr(-6)}`;\n        context.fillRect(0, 0, crop.width, crop.height);\n\n        context.globalCompositeOperation = 'destination-atop';\n        context.drawImage(\n            texture.baseTexture.source,\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n\n        // context.globalCompositeOperation = 'copy';\n        context.restore();\n    },\n\n    /**\n     * Tint a texture pixel per pixel.\n     *\n     * @memberof PIXI.CanvasTinter\n     * @param {PIXI.Texture} texture - the texture to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @param {HTMLCanvasElement} canvas - the current canvas\n     */\n    tintWithPerPixel: (texture, color, canvas) =>\n    {\n        const context = canvas.getContext('2d');\n        const crop = texture._frame.clone();\n        const resolution = texture.baseTexture.resolution;\n\n        crop.x *= resolution;\n        crop.y *= resolution;\n        crop.width *= resolution;\n        crop.height *= resolution;\n\n        canvas.width = Math.ceil(crop.width);\n        canvas.height = Math.ceil(crop.height);\n\n        context.save();\n        context.globalCompositeOperation = 'copy';\n        context.drawImage(\n            texture.baseTexture.source,\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n        context.restore();\n\n        const rgbValues = hex2rgb(color);\n        const r = rgbValues[0];\n        const g = rgbValues[1];\n        const b = rgbValues[2];\n\n        const pixelData = context.getImageData(0, 0, crop.width, crop.height);\n\n        const pixels = pixelData.data;\n\n        for (let i = 0; i < pixels.length; i += 4)\n        {\n            pixels[i + 0] *= r;\n            pixels[i + 1] *= g;\n            pixels[i + 2] *= b;\n        }\n\n        context.putImageData(pixelData, 0, 0);\n    },\n\n    /**\n     * Rounds the specified color according to the CanvasTinter.cacheStepsPerColorChannel.\n     *\n     * @memberof PIXI.CanvasTinter\n     * @param {number} color - the color to round, should be a hex color\n     * @return {number} The rounded color.\n     */\n    roundColor: (color) =>\n    {\n        const step = CanvasTinter.cacheStepsPerColorChannel;\n\n        const rgbValues = hex2rgb(color);\n\n        rgbValues[0] = Math.min(255, (rgbValues[0] / step) * step);\n        rgbValues[1] = Math.min(255, (rgbValues[1] / step) * step);\n        rgbValues[2] = Math.min(255, (rgbValues[2] / step) * step);\n\n        return rgb2hex(rgbValues);\n    },\n\n    /**\n     * Number of steps which will be used as a cap when rounding colors.\n     *\n     * @memberof PIXI.CanvasTinter\n     * @type {number}\n     */\n    cacheStepsPerColorChannel: 8,\n\n    /**\n     * Tint cache boolean flag.\n     *\n     * @memberof PIXI.CanvasTinter\n     * @type {boolean}\n     */\n    convertTintToImage: false,\n\n    /**\n     * Whether or not the Canvas BlendModes are supported, consequently the ability to tint using the multiply method.\n     *\n     * @memberof PIXI.CanvasTinter\n     * @type {boolean}\n     */\n    canUseMultiply: canUseNewCanvasBlendModes(),\n\n    /**\n     * The tinting method that will be used.\n     *\n     * @memberof PIXI.CanvasTinter\n     * @type {tintMethodFunctionType}\n     */\n    tintMethod: 0,\n};\n\nCanvasTinter.tintMethod = CanvasTinter.canUseMultiply ? CanvasTinter.tintWithMultiply : CanvasTinter.tintWithPerPixel;\n\n/**\n * The tintMethod type.\n *\n * @memberof PIXI.CanvasTinter\n * @callback tintMethodFunctionType\n * @param texture {PIXI.Texture} the texture to tint\n * @param color {number} the color to use to tint the sprite with\n * @param canvas {HTMLCanvasElement} the current canvas\n */\n\nexport default CanvasTinter;\n"]}