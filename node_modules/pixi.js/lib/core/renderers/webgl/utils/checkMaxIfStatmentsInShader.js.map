{"version":3,"sources":["../../../../../src/core/renderers/webgl/utils/checkMaxIfStatmentsInShader.js"],"names":["checkMaxIfStatmentsInShader","fragTemplate","join","maxIfs","gl","createTempContext","Error","tinyCanvas","document","createElement","width","height","createContext","shader","createShader","FRAGMENT_SHADER","fragmentSrc","replace","generateIfTestSrc","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getExtension","loseContext","src","i"],"mappings":";;;kBAWwBA,2B;;AAXxB;;;;;;AAEA,IAAMC,eAAe,CACjB,0BADiB,EAEjB,kBAFiB,EAGjB,mBAHiB,EAIjB,WAJiB,EAKjB,2BALiB,EAMjB,GANiB,EAOnBC,IAPmB,CAOd,IAPc,CAArB;;AASe,SAASF,2BAAT,CAAqCG,MAArC,EAA6CC,EAA7C,EACf;AACI,QAAMC,oBAAoB,CAACD,EAA3B;;AAEA;AACA,QAAID,WAAW,CAAf,EACA;AACI,cAAM,IAAIG,KAAJ,CAAU,+DAAV,CAAN;AACH;AACD;;AAEA,QAAID,iBAAJ,EACA;AACI,YAAME,aAAaC,SAASC,aAAT,CAAuB,QAAvB,CAAnB;;AAEAF,mBAAWG,KAAX,GAAmB,CAAnB;AACAH,mBAAWI,MAAX,GAAoB,CAApB;;AAEAP,aAAK,qBAAOQ,aAAP,CAAqBL,UAArB,CAAL;AACH;;AAED,QAAMM,SAAST,GAAGU,YAAH,CAAgBV,GAAGW,eAAnB,CAAf;;AAEA,WAAO,IAAP,EAAa;AACb;AACI,YAAMC,cAAcf,aAAagB,OAAb,CAAqB,aAArB,EAAoCC,kBAAkBf,MAAlB,CAApC,CAApB;;AAEAC,WAAGe,YAAH,CAAgBN,MAAhB,EAAwBG,WAAxB;AACAZ,WAAGgB,aAAH,CAAiBP,MAAjB;;AAEA,YAAI,CAACT,GAAGiB,kBAAH,CAAsBR,MAAtB,EAA8BT,GAAGkB,cAAjC,CAAL,EACA;AACInB,qBAAUA,SAAS,CAAV,GAAe,CAAxB;AACH,SAHD,MAKA;AACI;AACA;AACH;AACJ;;AAED,QAAIE,iBAAJ,EACA;AACI;AACA,YAAID,GAAGmB,YAAH,CAAgB,oBAAhB,CAAJ,EACA;AACInB,eAAGmB,YAAH,CAAgB,oBAAhB,EAAsCC,WAAtC;AACH;AACJ;;AAED,WAAOrB,MAAP;AACH;;AAED,SAASe,iBAAT,CAA2Bf,MAA3B,EACA;AACI,QAAIsB,MAAM,EAAV;;AAEA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIvB,MAApB,EAA4B,EAAEuB,CAA9B,EACA;AACI,YAAIA,IAAI,CAAR,EACA;AACID,mBAAO,SAAP;AACH;;AAED,YAAIC,IAAIvB,SAAS,CAAjB,EACA;AACIsB,mCAAqBC,CAArB;AACH;AACJ;;AAED,WAAOD,GAAP;AACH","file":"checkMaxIfStatmentsInShader.js","sourcesContent":["import glCore from 'pixi-gl-core';\n\nconst fragTemplate = [\n    'precision mediump float;',\n    'void main(void){',\n    'float test = 0.1;',\n    '%forloop%',\n    'gl_FragColor = vec4(0.0);',\n    '}',\n].join('\\n');\n\nexport default function checkMaxIfStatmentsInShader(maxIfs, gl)\n{\n    const createTempContext = !gl;\n\n    // @if DEBUG\n    if (maxIfs === 0)\n    {\n        throw new Error('Invalid value of `0` passed to `checkMaxIfStatementsInShader`');\n    }\n    // @endif\n\n    if (createTempContext)\n    {\n        const tinyCanvas = document.createElement('canvas');\n\n        tinyCanvas.width = 1;\n        tinyCanvas.height = 1;\n\n        gl = glCore.createContext(tinyCanvas);\n    }\n\n    const shader = gl.createShader(gl.FRAGMENT_SHADER);\n\n    while (true) // eslint-disable-line no-constant-condition\n    {\n        const fragmentSrc = fragTemplate.replace(/%forloop%/gi, generateIfTestSrc(maxIfs));\n\n        gl.shaderSource(shader, fragmentSrc);\n        gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            maxIfs = (maxIfs / 2) | 0;\n        }\n        else\n        {\n            // valid!\n            break;\n        }\n    }\n\n    if (createTempContext)\n    {\n        // get rid of context\n        if (gl.getExtension('WEBGL_lose_context'))\n        {\n            gl.getExtension('WEBGL_lose_context').loseContext();\n        }\n    }\n\n    return maxIfs;\n}\n\nfunction generateIfTestSrc(maxIfs)\n{\n    let src = '';\n\n    for (let i = 0; i < maxIfs; ++i)\n    {\n        if (i > 0)\n        {\n            src += '\\nelse ';\n        }\n\n        if (i < maxIfs - 1)\n        {\n            src += `if(test == ${i}.0){}`;\n        }\n    }\n\n    return src;\n}\n"]}