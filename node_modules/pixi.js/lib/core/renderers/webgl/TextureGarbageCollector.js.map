{"version":3,"sources":["../../../../src/core/renderers/webgl/TextureGarbageCollector.js"],"names":["TextureGarbageCollector","renderer","count","checkCount","maxIdle","GC_MAX_IDLE","checkCountMax","GC_MAX_CHECK_COUNT","mode","GC_MODE","update","MANUAL","run","tm","textureManager","managedTextures","_managedTextures","wasRemoved","i","length","texture","_glRenderTargets","touched","destroyTexture","j","unload","displayObject","_texture","children"],"mappings":";;;;AAAA;;AACA;;;;;;;;AAEA;;;;;;;IAOqBA,uB;AAEjB;;;AAGA,qCAAYC,QAAZ,EACA;AAAA;;AACI,aAAKA,QAAL,GAAgBA,QAAhB;;AAEA,aAAKC,KAAL,GAAa,CAAb;AACA,aAAKC,UAAL,GAAkB,CAAlB;AACA,aAAKC,OAAL,GAAe,mBAASC,WAAxB;AACA,aAAKC,aAAL,GAAqB,mBAASC,kBAA9B;AACA,aAAKC,IAAL,GAAY,mBAASC,OAArB;AACH;;AAED;;;;;;sCAIAC,M,qBACA;AACI,aAAKR,KAAL;;AAEA,YAAI,KAAKM,IAAL,KAAc,gBAASG,MAA3B,EACA;AACI;AACH;;AAED,aAAKR,UAAL;;AAEA,YAAI,KAAKA,UAAL,GAAkB,KAAKG,aAA3B,EACA;AACI,iBAAKH,UAAL,GAAkB,CAAlB;;AAEA,iBAAKS,GAAL;AACH;AACJ,K;;AAED;;;;;;sCAIAA,G,kBACA;AACI,YAAMC,KAAK,KAAKZ,QAAL,CAAca,cAAzB;AACA,YAAMC,kBAAmBF,GAAGG,gBAA5B;AACA,YAAIC,aAAa,KAAjB;;AAEA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,gBAAgBI,MAApC,EAA4CD,GAA5C,EACA;AACI,gBAAME,UAAUL,gBAAgBG,CAAhB,CAAhB;;AAEA;AACA,gBAAI,CAACE,QAAQC,gBAAT,IAA6B,KAAKnB,KAAL,GAAakB,QAAQE,OAArB,GAA+B,KAAKlB,OAArE,EACA;AACIS,mBAAGU,cAAH,CAAkBH,OAAlB,EAA2B,IAA3B;AACAL,gCAAgBG,CAAhB,IAAqB,IAArB;AACAD,6BAAa,IAAb;AACH;AACJ;;AAED,YAAIA,UAAJ,EACA;AACI,gBAAIO,IAAI,CAAR;;AAEA,iBAAK,IAAIN,KAAI,CAAb,EAAgBA,KAAIH,gBAAgBI,MAApC,EAA4CD,IAA5C,EACA;AACI,oBAAIH,gBAAgBG,EAAhB,MAAuB,IAA3B,EACA;AACIH,oCAAgBS,GAAhB,IAAuBT,gBAAgBG,EAAhB,CAAvB;AACH;AACJ;;AAEDH,4BAAgBI,MAAhB,GAAyBK,CAAzB;AACH;AACJ,K;;AAED;;;;;;;sCAKAC,M,mBAAOC,a,EACP;AACI,YAAMb,KAAK,KAAKZ,QAAL,CAAca,cAAzB;;AAEA;AACA,YAAIY,cAAcC,QAAd,IAA0BD,cAAcC,QAAd,CAAuBN,gBAArD,EACA;AACIR,eAAGU,cAAH,CAAkBG,cAAcC,QAAhC,EAA0C,IAA1C;AACH;;AAED,aAAK,IAAIT,IAAIQ,cAAcE,QAAd,CAAuBT,MAAvB,GAAgC,CAA7C,EAAgDD,KAAK,CAArD,EAAwDA,GAAxD,EACA;AACI,iBAAKO,MAAL,CAAYC,cAAcE,QAAd,CAAuBV,CAAvB,CAAZ;AACH;AACJ,K;;;;;kBAjGgBlB,uB","file":"TextureGarbageCollector.js","sourcesContent":["import { GC_MODES } from '../../const';\nimport settings from '../../settings';\n\n/**\n * TextureGarbageCollector. This class manages the GPU and ensures that it does not get clogged\n * up with textures that are no longer being used.\n *\n * @class\n * @memberof PIXI\n */\nexport default class TextureGarbageCollector\n{\n    /**\n     * @param {PIXI.WebGLRenderer} renderer - The renderer this manager works for.\n     */\n    constructor(renderer)\n    {\n        this.renderer = renderer;\n\n        this.count = 0;\n        this.checkCount = 0;\n        this.maxIdle = settings.GC_MAX_IDLE;\n        this.checkCountMax = settings.GC_MAX_CHECK_COUNT;\n        this.mode = settings.GC_MODE;\n    }\n\n    /**\n     * Checks to see when the last time a texture was used\n     * if the texture has not been used for a specified amount of time it will be removed from the GPU\n     */\n    update()\n    {\n        this.count++;\n\n        if (this.mode === GC_MODES.MANUAL)\n        {\n            return;\n        }\n\n        this.checkCount++;\n\n        if (this.checkCount > this.checkCountMax)\n        {\n            this.checkCount = 0;\n\n            this.run();\n        }\n    }\n\n    /**\n     * Checks to see when the last time a texture was used\n     * if the texture has not been used for a specified amount of time it will be removed from the GPU\n     */\n    run()\n    {\n        const tm = this.renderer.textureManager;\n        const managedTextures =  tm._managedTextures;\n        let wasRemoved = false;\n\n        for (let i = 0; i < managedTextures.length; i++)\n        {\n            const texture = managedTextures[i];\n\n            // only supports non generated textures at the moment!\n            if (!texture._glRenderTargets && this.count - texture.touched > this.maxIdle)\n            {\n                tm.destroyTexture(texture, true);\n                managedTextures[i] = null;\n                wasRemoved = true;\n            }\n        }\n\n        if (wasRemoved)\n        {\n            let j = 0;\n\n            for (let i = 0; i < managedTextures.length; i++)\n            {\n                if (managedTextures[i] !== null)\n                {\n                    managedTextures[j++] = managedTextures[i];\n                }\n            }\n\n            managedTextures.length = j;\n        }\n    }\n\n    /**\n     * Removes all the textures within the specified displayObject and its children from the GPU\n     *\n     * @param {PIXI.DisplayObject} displayObject - the displayObject to remove the textures from.\n     */\n    unload(displayObject)\n    {\n        const tm = this.renderer.textureManager;\n\n        // only destroy non generated textures\n        if (displayObject._texture && displayObject._texture._glRenderTargets)\n        {\n            tm.destroyTexture(displayObject._texture, true);\n        }\n\n        for (let i = displayObject.children.length - 1; i >= 0; i--)\n        {\n            this.unload(displayObject.children[i]);\n        }\n    }\n}\n"]}