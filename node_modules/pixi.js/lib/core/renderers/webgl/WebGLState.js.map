{"version":3,"sources":["../../../../src/core/renderers/webgl/WebGLState.js"],"names":["BLEND","DEPTH_TEST","FRONT_FACE","CULL_FACE","BLEND_FUNC","WebGLState","gl","activeState","Uint8Array","defaultState","stackIndex","stack","maxAttribs","getParameter","MAX_VERTEX_ATTRIBS","attribState","tempAttribState","Array","blendModes","nativeVaoExtension","getExtension","push","state","i","length","pop","setState","setBlend","setDepthTest","setFrontFace","setCullFace","setBlendMode","value","mode","blendFunc","blendFuncSeparate","frontFace","resetAttributes","disableVertexAttribArray","resetToDefault","bindVertexArrayOES","pixelStorei","UNPACK_FLIP_Y_WEBGL"],"mappings":";;;;AAAA;;;;;;;;AAEA,IAAMA,QAAQ,CAAd;AACA,IAAMC,aAAa,CAAnB;AACA,IAAMC,aAAa,CAAnB;AACA,IAAMC,YAAY,CAAlB;AACA,IAAMC,aAAa,CAAnB;;AAEA;;;;;;;IAMqBC,U;AAEjB;;;AAGA,wBAAYC,EAAZ,EACA;AAAA;;AACI;;;;;AAKA,aAAKC,WAAL,GAAmB,IAAIC,UAAJ,CAAe,EAAf,CAAnB;;AAEA;;;;;AAKA,aAAKC,YAAL,GAAoB,IAAID,UAAJ,CAAe,EAAf,CAApB;;AAEA;AACA,aAAKC,YAAL,CAAkB,CAAlB,IAAuB,CAAvB;;AAEA;;;;;;AAMA,aAAKC,UAAL,GAAkB,CAAlB;;AAEA;;;;;;AAMA,aAAKC,KAAL,GAAa,EAAb;;AAEA;;;;;AAKA,aAAKL,EAAL,GAAUA,EAAV;;AAEA,aAAKM,UAAL,GAAkBN,GAAGO,YAAH,CAAgBP,GAAGQ,kBAAnB,CAAlB;;AAEA,aAAKC,WAAL,GAAmB;AACfC,6BAAiB,IAAIC,KAAJ,CAAU,KAAKL,UAAf,CADF;AAEfG,yBAAa,IAAIE,KAAJ,CAAU,KAAKL,UAAf;AAFE,SAAnB;;AAKA,aAAKM,UAAL,GAAkB,wCAAyBZ,EAAzB,CAAlB;;AAEA;AACA,aAAKa,kBAAL,GACIb,GAAGc,YAAH,CAAgB,yBAAhB,KACGd,GAAGc,YAAH,CAAgB,6BAAhB,CADH,IAEGd,GAAGc,YAAH,CAAgB,gCAAhB,CAHP;AAKH;;AAED;;;;;yBAGAC,I,mBACA;AACI;AACA,YAAIC,QAAQ,KAAKX,KAAL,CAAW,KAAKD,UAAhB,CAAZ;;AAEA,YAAI,CAACY,KAAL,EACA;AACIA,oBAAQ,KAAKX,KAAL,CAAW,KAAKD,UAAhB,IAA8B,IAAIF,UAAJ,CAAe,EAAf,CAAtC;AACH;;AAED,UAAE,KAAKE,UAAP;;AAEA;AACA;AACA,aAAK,IAAIa,IAAI,CAAb,EAAgBA,IAAI,KAAKhB,WAAL,CAAiBiB,MAArC,EAA6CD,GAA7C,EACA;AACID,kBAAMC,CAAN,IAAW,KAAKhB,WAAL,CAAiBgB,CAAjB,CAAX;AACH;AACJ,K;;AAED;;;;;yBAGAE,G,kBACA;AACI,YAAMH,QAAQ,KAAKX,KAAL,CAAW,EAAE,KAAKD,UAAlB,CAAd;;AAEA,aAAKgB,QAAL,CAAcJ,KAAd;AACH,K;;AAED;;;;;;;yBAKAI,Q,qBAASJ,K,EACT;AACI,aAAKK,QAAL,CAAcL,MAAMtB,KAAN,CAAd;AACA,aAAK4B,YAAL,CAAkBN,MAAMrB,UAAN,CAAlB;AACA,aAAK4B,YAAL,CAAkBP,MAAMpB,UAAN,CAAlB;AACA,aAAK4B,WAAL,CAAiBR,MAAMnB,SAAN,CAAjB;AACA,aAAK4B,YAAL,CAAkBT,MAAMlB,UAAN,CAAlB;AACH,K;;AAED;;;;;;;yBAKAuB,Q,qBAASK,K,EACT;AACIA,gBAAQA,QAAQ,CAAR,GAAY,CAApB;;AAEA,YAAI,KAAKzB,WAAL,CAAiBP,KAAjB,MAA4BgC,KAAhC,EACA;AACI;AACH;;AAED,aAAKzB,WAAL,CAAiBP,KAAjB,IAA0BgC,KAA1B;AACA,aAAK1B,EAAL,CAAQ0B,QAAQ,QAAR,GAAmB,SAA3B,EAAsC,KAAK1B,EAAL,CAAQN,KAA9C;AACH,K;;AAED;;;;;;;yBAKA+B,Y,yBAAaC,K,EACb;AACI,YAAIA,UAAU,KAAKzB,WAAL,CAAiBH,UAAjB,CAAd,EACA;AACI;AACH;;AAED,aAAKG,WAAL,CAAiBH,UAAjB,IAA+B4B,KAA/B;;AAEA,YAAMC,OAAO,KAAKf,UAAL,CAAgBc,KAAhB,CAAb;;AAEA,YAAIC,KAAKT,MAAL,KAAgB,CAApB,EACA;AACI,iBAAKlB,EAAL,CAAQ4B,SAAR,CAAkBD,KAAK,CAAL,CAAlB,EAA2BA,KAAK,CAAL,CAA3B;AACH,SAHD,MAKA;AACI,iBAAK3B,EAAL,CAAQ6B,iBAAR,CAA0BF,KAAK,CAAL,CAA1B,EAAmCA,KAAK,CAAL,CAAnC,EAA4CA,KAAK,CAAL,CAA5C,EAAqDA,KAAK,CAAL,CAArD;AACH;AACJ,K;;AAED;;;;;;;yBAKAL,Y,yBAAaI,K,EACb;AACIA,gBAAQA,QAAQ,CAAR,GAAY,CAApB;;AAEA,YAAI,KAAKzB,WAAL,CAAiBN,UAAjB,MAAiC+B,KAArC,EACA;AACI;AACH;;AAED,aAAKzB,WAAL,CAAiBN,UAAjB,IAA+B+B,KAA/B;AACA,aAAK1B,EAAL,CAAQ0B,QAAQ,QAAR,GAAmB,SAA3B,EAAsC,KAAK1B,EAAL,CAAQL,UAA9C;AACH,K;;AAED;;;;;;;yBAKA6B,W,wBAAYE,K,EACZ;AACIA,gBAAQA,QAAQ,CAAR,GAAY,CAApB;;AAEA,YAAI,KAAKzB,WAAL,CAAiBJ,SAAjB,MAAgC6B,KAApC,EACA;AACI;AACH;;AAED,aAAKzB,WAAL,CAAiBJ,SAAjB,IAA8B6B,KAA9B;AACA,aAAK1B,EAAL,CAAQ0B,QAAQ,QAAR,GAAmB,SAA3B,EAAsC,KAAK1B,EAAL,CAAQH,SAA9C;AACH,K;;AAED;;;;;;;yBAKA0B,Y,yBAAaG,K,EACb;AACIA,gBAAQA,QAAQ,CAAR,GAAY,CAApB;;AAEA,YAAI,KAAKzB,WAAL,CAAiBL,UAAjB,MAAiC8B,KAArC,EACA;AACI;AACH;;AAED,aAAKzB,WAAL,CAAiBL,UAAjB,IAA+B8B,KAA/B;AACA,aAAK1B,EAAL,CAAQ8B,SAAR,CAAkB,KAAK9B,EAAL,CAAQ0B,QAAQ,IAAR,GAAe,KAAvB,CAAlB;AACH,K;;AAED;;;;;;yBAIAK,e,8BACA;AACI,aAAK,IAAId,IAAI,CAAb,EAAgBA,IAAI,KAAKR,WAAL,CAAiBC,eAAjB,CAAiCQ,MAArD,EAA6DD,GAA7D,EACA;AACI,iBAAKR,WAAL,CAAiBC,eAAjB,CAAiCO,CAAjC,IAAsC,CAAtC;AACH;;AAED,aAAK,IAAIA,KAAI,CAAb,EAAgBA,KAAI,KAAKR,WAAL,CAAiBA,WAAjB,CAA6BS,MAAjD,EAAyDD,IAAzD,EACA;AACI,iBAAKR,WAAL,CAAiBA,WAAjB,CAA6BQ,EAA7B,IAAkC,CAAlC;AACH;;AAED;AACA,aAAK,IAAIA,MAAI,CAAb,EAAgBA,MAAI,KAAKX,UAAzB,EAAqCW,KAArC,EACA;AACI,iBAAKjB,EAAL,CAAQgC,wBAAR,CAAiCf,GAAjC;AACH;AACJ,K;;AAED;AACA;;;;;yBAGAgB,c,6BACA;AACI;AACA,YAAI,KAAKpB,kBAAT,EACA;AACI,iBAAKA,kBAAL,CAAwBqB,kBAAxB,CAA2C,IAA3C;AACH;;AAED;AACA,aAAKH,eAAL;;AAEA;AACA,aAAK,IAAId,IAAI,CAAb,EAAgBA,IAAI,KAAKhB,WAAL,CAAiBiB,MAArC,EAA6C,EAAED,CAA/C,EACA;AACI,iBAAKhB,WAAL,CAAiBgB,CAAjB,IAAsB,EAAtB;AACH;;AAED,aAAKjB,EAAL,CAAQmC,WAAR,CAAoB,KAAKnC,EAAL,CAAQoC,mBAA5B,EAAiD,KAAjD;;AAEA,aAAKhB,QAAL,CAAc,KAAKjB,YAAnB;AACH,K;;;;;kBAhQgBJ,U","file":"WebGLState.js","sourcesContent":["import mapWebGLBlendModesToPixi from './utils/mapWebGLBlendModesToPixi';\n\nconst BLEND = 0;\nconst DEPTH_TEST = 1;\nconst FRONT_FACE = 2;\nconst CULL_FACE = 3;\nconst BLEND_FUNC = 4;\n\n/**\n * A WebGL state machines\n *\n * @memberof PIXI\n * @class\n */\nexport default class WebGLState\n{\n    /**\n     * @param {WebGLRenderingContext} gl - The current WebGL rendering context\n     */\n    constructor(gl)\n    {\n        /**\n         * The current active state\n         *\n         * @member {Uint8Array}\n         */\n        this.activeState = new Uint8Array(16);\n\n        /**\n         * The default state\n         *\n         * @member {Uint8Array}\n         */\n        this.defaultState = new Uint8Array(16);\n\n        // default blend mode..\n        this.defaultState[0] = 1;\n\n        /**\n         * The current state index in the stack\n         *\n         * @member {number}\n         * @private\n         */\n        this.stackIndex = 0;\n\n        /**\n         * The stack holding all the different states\n         *\n         * @member {Array<*>}\n         * @private\n         */\n        this.stack = [];\n\n        /**\n         * The current WebGL rendering context\n         *\n         * @member {WebGLRenderingContext}\n         */\n        this.gl = gl;\n\n        this.maxAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n\n        this.attribState = {\n            tempAttribState: new Array(this.maxAttribs),\n            attribState: new Array(this.maxAttribs),\n        };\n\n        this.blendModes = mapWebGLBlendModesToPixi(gl);\n\n        // check we have vao..\n        this.nativeVaoExtension = (\n            gl.getExtension('OES_vertex_array_object')\n            || gl.getExtension('MOZ_OES_vertex_array_object')\n            || gl.getExtension('WEBKIT_OES_vertex_array_object')\n        );\n    }\n\n    /**\n     * Pushes a new active state\n     */\n    push()\n    {\n        // next state..\n        let state = this.stack[this.stackIndex];\n\n        if (!state)\n        {\n            state = this.stack[this.stackIndex] = new Uint8Array(16);\n        }\n\n        ++this.stackIndex;\n\n        // copy state..\n        // set active state so we can force overrides of gl state\n        for (let i = 0; i < this.activeState.length; i++)\n        {\n            state[i] = this.activeState[i];\n        }\n    }\n\n    /**\n     * Pops a state out\n     */\n    pop()\n    {\n        const state = this.stack[--this.stackIndex];\n\n        this.setState(state);\n    }\n\n    /**\n     * Sets the current state\n     *\n     * @param {*} state - The state to set.\n     */\n    setState(state)\n    {\n        this.setBlend(state[BLEND]);\n        this.setDepthTest(state[DEPTH_TEST]);\n        this.setFrontFace(state[FRONT_FACE]);\n        this.setCullFace(state[CULL_FACE]);\n        this.setBlendMode(state[BLEND_FUNC]);\n    }\n\n    /**\n     * Enables or disabled blending.\n     *\n     * @param {boolean} value - Turn on or off webgl blending.\n     */\n    setBlend(value)\n    {\n        value = value ? 1 : 0;\n\n        if (this.activeState[BLEND] === value)\n        {\n            return;\n        }\n\n        this.activeState[BLEND] = value;\n        this.gl[value ? 'enable' : 'disable'](this.gl.BLEND);\n    }\n\n    /**\n     * Sets the blend mode.\n     *\n     * @param {number} value - The blend mode to set to.\n     */\n    setBlendMode(value)\n    {\n        if (value === this.activeState[BLEND_FUNC])\n        {\n            return;\n        }\n\n        this.activeState[BLEND_FUNC] = value;\n\n        const mode = this.blendModes[value];\n\n        if (mode.length === 2)\n        {\n            this.gl.blendFunc(mode[0], mode[1]);\n        }\n        else\n        {\n            this.gl.blendFuncSeparate(mode[0], mode[1], mode[2], mode[3]);\n        }\n    }\n\n    /**\n     * Sets whether to enable or disable depth test.\n     *\n     * @param {boolean} value - Turn on or off webgl depth testing.\n     */\n    setDepthTest(value)\n    {\n        value = value ? 1 : 0;\n\n        if (this.activeState[DEPTH_TEST] === value)\n        {\n            return;\n        }\n\n        this.activeState[DEPTH_TEST] = value;\n        this.gl[value ? 'enable' : 'disable'](this.gl.DEPTH_TEST);\n    }\n\n    /**\n     * Sets whether to enable or disable cull face.\n     *\n     * @param {boolean} value - Turn on or off webgl cull face.\n     */\n    setCullFace(value)\n    {\n        value = value ? 1 : 0;\n\n        if (this.activeState[CULL_FACE] === value)\n        {\n            return;\n        }\n\n        this.activeState[CULL_FACE] = value;\n        this.gl[value ? 'enable' : 'disable'](this.gl.CULL_FACE);\n    }\n\n    /**\n     * Sets the gl front face.\n     *\n     * @param {boolean} value - true is clockwise and false is counter-clockwise\n     */\n    setFrontFace(value)\n    {\n        value = value ? 1 : 0;\n\n        if (this.activeState[FRONT_FACE] === value)\n        {\n            return;\n        }\n\n        this.activeState[FRONT_FACE] = value;\n        this.gl.frontFace(this.gl[value ? 'CW' : 'CCW']);\n    }\n\n    /**\n     * Disables all the vaos in use\n     *\n     */\n    resetAttributes()\n    {\n        for (let i = 0; i < this.attribState.tempAttribState.length; i++)\n        {\n            this.attribState.tempAttribState[i] = 0;\n        }\n\n        for (let i = 0; i < this.attribState.attribState.length; i++)\n        {\n            this.attribState.attribState[i] = 0;\n        }\n\n        // im going to assume one is always active for performance reasons.\n        for (let i = 1; i < this.maxAttribs; i++)\n        {\n            this.gl.disableVertexAttribArray(i);\n        }\n    }\n\n    // used\n    /**\n     * Resets all the logic and disables the vaos\n     */\n    resetToDefault()\n    {\n        // unbind any VAO if they exist..\n        if (this.nativeVaoExtension)\n        {\n            this.nativeVaoExtension.bindVertexArrayOES(null);\n        }\n\n        // reset all attributes..\n        this.resetAttributes();\n\n        // set active state so we can force overrides of gl state\n        for (let i = 0; i < this.activeState.length; ++i)\n        {\n            this.activeState[i] = 32;\n        }\n\n        this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);\n\n        this.setState(this.defaultState);\n    }\n}\n"]}