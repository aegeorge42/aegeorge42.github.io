{"version":3,"sources":["../../../../../src/core/renderers/webgl/managers/StencilManager.js"],"names":["StencilManager","renderer","stencilMaskStack","setMaskStack","gl","length","disable","STENCIL_TEST","enable","pushStencil","graphics","setObjectRenderer","plugins","_activeRenderTarget","attachStencilBuffer","prevMaskCount","push","colorMask","stencilFunc","EQUAL","_getBitwiseMask","stencilOp","KEEP","INCR","render","_useCurrent","popStencil","pop","clear","STENCIL_BUFFER_BIT","clearStencil","DECR","destroy","prototype","call","stencilStack"],"mappings":"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","file":"StencilManager.js","sourcesContent":["import WebGLManager from './WebGLManager';\n\n/**\n * @class\n * @extends PIXI.WebGLManager\n * @memberof PIXI\n */\nexport default class StencilManager extends WebGLManager\n{\n    /**\n     * @param {PIXI.WebGLRenderer} renderer - The renderer this manager works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n        this.stencilMaskStack = null;\n    }\n\n    /**\n     * Changes the mask stack that is used by this manager.\n     *\n     * @param {PIXI.Graphics[]} stencilMaskStack - The mask stack\n     */\n    setMaskStack(stencilMaskStack)\n    {\n        this.stencilMaskStack = stencilMaskStack;\n\n        const gl = this.renderer.gl;\n\n        if (stencilMaskStack.length === 0)\n        {\n            gl.disable(gl.STENCIL_TEST);\n        }\n        else\n        {\n            gl.enable(gl.STENCIL_TEST);\n        }\n    }\n\n    /**\n     * Applies the Mask and adds it to the current stencil stack. @alvin\n     *\n     * @param {PIXI.Graphics} graphics - The mask\n     */\n    pushStencil(graphics)\n    {\n        this.renderer.setObjectRenderer(this.renderer.plugins.graphics);\n\n        this.renderer._activeRenderTarget.attachStencilBuffer();\n\n        const gl = this.renderer.gl;\n        const prevMaskCount = this.stencilMaskStack.length;\n\n        if (prevMaskCount === 0)\n        {\n            gl.enable(gl.STENCIL_TEST);\n        }\n\n        this.stencilMaskStack.push(graphics);\n\n        // Increment the reference stencil value where the new mask overlaps with the old ones.\n        gl.colorMask(false, false, false, false);\n        gl.stencilFunc(gl.EQUAL, prevMaskCount, this._getBitwiseMask());\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.INCR);\n        this.renderer.plugins.graphics.render(graphics);\n\n        this._useCurrent();\n    }\n\n    /**\n     * Removes the last mask from the stencil stack. @alvin\n     */\n    popStencil()\n    {\n        this.renderer.setObjectRenderer(this.renderer.plugins.graphics);\n\n        const gl = this.renderer.gl;\n        const graphics = this.stencilMaskStack.pop();\n\n        if (this.stencilMaskStack.length === 0)\n        {\n            // the stack is empty!\n            gl.disable(gl.STENCIL_TEST);\n            gl.clear(gl.STENCIL_BUFFER_BIT);\n            gl.clearStencil(0);\n        }\n        else\n        {\n            // Decrement the reference stencil value where the popped mask overlaps with the other ones\n            gl.colorMask(false, false, false, false);\n            gl.stencilOp(gl.KEEP, gl.KEEP, gl.DECR);\n            this.renderer.plugins.graphics.render(graphics);\n\n            this._useCurrent();\n        }\n    }\n\n    /**\n     * Setup renderer to use the current stencil data.\n     */\n    _useCurrent()\n    {\n        const gl = this.renderer.gl;\n\n        gl.colorMask(true, true, true, true);\n        gl.stencilFunc(gl.EQUAL, this.stencilMaskStack.length, this._getBitwiseMask());\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n    }\n\n    /**\n     * Fill 1s equal to the number of acitve stencil masks.\n     *\n     * @return {number} The bitwise mask.\n     */\n    _getBitwiseMask()\n    {\n        return (1 << this.stencilMaskStack.length) - 1;\n    }\n\n    /**\n     * Destroys the mask stack.\n     *\n     */\n    destroy()\n    {\n        WebGLManager.prototype.destroy.call(this);\n\n        this.stencilMaskStack.stencilStack = null;\n    }\n}\n"]}