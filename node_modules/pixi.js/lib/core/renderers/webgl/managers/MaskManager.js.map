{"version":3,"sources":["../../../../../src/core/renderers/webgl/managers/MaskManager.js"],"names":["MaskManager","renderer","scissor","scissorData","scissorRenderTarget","enableScissor","alphaMaskPool","alphaMaskIndex","pushMask","target","maskData","texture","pushSpriteMask","_activeRenderTarget","root","stencilManager","stencilMaskStack","length","isFastRect","matrix","worldTransform","rot","Math","atan2","b","a","round","PI","pushStencilMask","pushScissorMask","popMask","popSpriteMask","popScissorMask","popStencilMask","alphaMaskFilter","resolution","maskSprite","stashFilterArea","filterArea","getBounds","filterManager","pushFilter","popFilter","currentRenderer","stop","pushStencil","popStencil","renderable","renderTarget","bounds","fit","size","gl","enable","SCISSOR_TEST","x","height","y","width","disable"],"mappings":";;;;AAAA;;;;AACA;;;;;;;;;;;;AAEA;;;;;IAKqBA,W;;;AAEjB;;;AAGA,yBAAYC,QAAZ,EACA;AAAA;;AAGI;AAHJ,qDACI,yBAAMA,QAAN,CADJ;;AAII,cAAKC,OAAL,GAAe,KAAf;AACA,cAAKC,WAAL,GAAmB,IAAnB;AACA,cAAKC,mBAAL,GAA2B,IAA3B;;AAEA,cAAKC,aAAL,GAAqB,IAArB;;AAEA,cAAKC,aAAL,GAAqB,EAArB;AACA,cAAKC,cAAL,GAAsB,CAAtB;AAXJ;AAYC;;AAED;;;;;;;;0BAMAC,Q,qBAASC,M,EAAQC,Q,EACjB;AACI;AACA;AACA;;AAEA,YAAIA,SAASC,OAAb,EACA;AACI,iBAAKC,cAAL,CAAoBH,MAApB,EAA4BC,QAA5B;AACH,SAHD,MAIK,IAAI,KAAKL,aAAL,IACF,CAAC,KAAKH,OADJ,IAEF,KAAKD,QAAL,CAAcY,mBAAd,CAAkCC,IAFhC,IAGF,CAAC,KAAKb,QAAL,CAAcc,cAAd,CAA6BC,gBAA7B,CAA8CC,MAH7C,IAIFP,SAASQ,UAAT,EAJF,EAKL;AACI,gBAAMC,SAAST,SAASU,cAAxB;;AAEA,gBAAIC,MAAMC,KAAKC,KAAL,CAAWJ,OAAOK,CAAlB,EAAqBL,OAAOM,CAA5B,CAAV;;AAEA;AACAJ,kBAAMC,KAAKI,KAAL,CAAWL,OAAO,MAAMC,KAAKK,EAAlB,CAAX,CAAN;;AAEA,gBAAIN,MAAM,EAAV,EACA;AACI,qBAAKO,eAAL,CAAqBlB,QAArB;AACH,aAHD,MAKA;AACI,qBAAKmB,eAAL,CAAqBpB,MAArB,EAA6BC,QAA7B;AACH;AACJ,SArBI,MAuBL;AACI,iBAAKkB,eAAL,CAAqBlB,QAArB;AACH;AACJ,K;;AAED;;;;;;;;0BAMAoB,O,oBAAQrB,M,EAAQC,Q,EAChB;AACI,YAAIA,SAASC,OAAb,EACA;AACI,iBAAKoB,aAAL,CAAmBtB,MAAnB,EAA2BC,QAA3B;AACH,SAHD,MAIK,IAAI,KAAKL,aAAL,IAAsB,CAAC,KAAKJ,QAAL,CAAcc,cAAd,CAA6BC,gBAA7B,CAA8CC,MAAzE,EACL;AACI,iBAAKe,cAAL,CAAoBvB,MAApB,EAA4BC,QAA5B;AACH,SAHI,MAKL;AACI,iBAAKuB,cAAL,CAAoBxB,MAApB,EAA4BC,QAA5B;AACH;AACJ,K;;AAED;;;;;;;;0BAMAE,c,2BAAeH,M,EAAQC,Q,EACvB;AACI,YAAIwB,kBAAkB,KAAK5B,aAAL,CAAmB,KAAKC,cAAxB,CAAtB;;AAEA,YAAI,CAAC2B,eAAL,EACA;AACIA,8BAAkB,KAAK5B,aAAL,CAAmB,KAAKC,cAAxB,IAA0C,CAAC,+BAAoBG,QAApB,CAAD,CAA5D;AACH;;AAEDwB,wBAAgB,CAAhB,EAAmBC,UAAnB,GAAgC,KAAKlC,QAAL,CAAckC,UAA9C;AACAD,wBAAgB,CAAhB,EAAmBE,UAAnB,GAAgC1B,QAAhC;;AAEA,YAAM2B,kBAAkB5B,OAAO6B,UAA/B;;AAEA7B,eAAO6B,UAAP,GAAoB5B,SAAS6B,SAAT,CAAmB,IAAnB,CAApB;AACA,aAAKtC,QAAL,CAAcuC,aAAd,CAA4BC,UAA5B,CAAuChC,MAAvC,EAA+CyB,eAA/C;AACAzB,eAAO6B,UAAP,GAAoBD,eAApB;;AAEA,aAAK9B,cAAL;AACH,K;;AAED;;;;;;0BAIAwB,a,4BACA;AACI,aAAK9B,QAAL,CAAcuC,aAAd,CAA4BE,SAA5B;AACA,aAAKnC,cAAL;AACH,K;;AAED;;;;;;;0BAKAqB,e,4BAAgBlB,Q,EAChB;AACI,aAAKT,QAAL,CAAc0C,eAAd,CAA8BC,IAA9B;AACA,aAAK3C,QAAL,CAAcc,cAAd,CAA6B8B,WAA7B,CAAyCnC,QAAzC;AACH,K;;AAED;;;;;;0BAIAuB,c,6BACA;AACI,aAAKhC,QAAL,CAAc0C,eAAd,CAA8BC,IAA9B;AACA,aAAK3C,QAAL,CAAcc,cAAd,CAA6B+B,UAA7B;AACH,K;;AAED;;;;;;;0BAKAjB,e,4BAAgBpB,M,EAAQC,Q,EACxB;AACIA,iBAASqC,UAAT,GAAsB,IAAtB;;AAEA,YAAMC,eAAe,KAAK/C,QAAL,CAAcY,mBAAnC;;AAEA,YAAMoC,SAASvC,SAAS6B,SAAT,EAAf;;AAEAU,eAAOC,GAAP,CAAWF,aAAaG,IAAxB;AACAzC,iBAASqC,UAAT,GAAsB,KAAtB;;AAEA,aAAK9C,QAAL,CAAcmD,EAAd,CAAiBC,MAAjB,CAAwB,KAAKpD,QAAL,CAAcmD,EAAd,CAAiBE,YAAzC;;AAEA,YAAMnB,aAAa,KAAKlC,QAAL,CAAckC,UAAjC;;AAEA,aAAKlC,QAAL,CAAcmD,EAAd,CAAiBlD,OAAjB,CACI+C,OAAOM,CAAP,GAAWpB,UADf,EAEI,CAACa,aAAalC,IAAb,GAAoBkC,aAAaG,IAAb,CAAkBK,MAAlB,GAA2BP,OAAOQ,CAAlC,GAAsCR,OAAOO,MAAjE,GAA0EP,OAAOQ,CAAlF,IAAuFtB,UAF3F,EAGIc,OAAOS,KAAP,GAAevB,UAHnB,EAIIc,OAAOO,MAAP,GAAgBrB,UAJpB;;AAOA,aAAK/B,mBAAL,GAA2B4C,YAA3B;AACA,aAAK7C,WAAL,GAAmBO,QAAnB;AACA,aAAKR,OAAL,GAAe,IAAf;AACH,K;;AAED;;;;;;0BAIA8B,c,6BACA;AACI,aAAK5B,mBAAL,GAA2B,IAA3B;AACA,aAAKD,WAAL,GAAmB,IAAnB;AACA,aAAKD,OAAL,GAAe,KAAf;;AAEA;AACA,YAAMkD,KAAK,KAAKnD,QAAL,CAAcmD,EAAzB;;AAEAA,WAAGO,OAAH,CAAWP,GAAGE,YAAd;AACH,K;;;;;kBA9LgBtD,W","file":"MaskManager.js","sourcesContent":["import WebGLManager from './WebGLManager';\nimport AlphaMaskFilter from '../filters/spriteMask/SpriteMaskFilter';\n\n/**\n * @class\n * @extends PIXI.WebGLManager\n * @memberof PIXI\n */\nexport default class MaskManager extends WebGLManager\n{\n    /**\n     * @param {PIXI.WebGLRenderer} renderer - The renderer this manager works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        // TODO - we don't need both!\n        this.scissor = false;\n        this.scissorData = null;\n        this.scissorRenderTarget = null;\n\n        this.enableScissor = true;\n\n        this.alphaMaskPool = [];\n        this.alphaMaskIndex = 0;\n    }\n\n    /**\n     * Applies the Mask and adds it to the current filter stack.\n     *\n     * @param {PIXI.DisplayObject} target - Display Object to push the mask to\n     * @param {PIXI.Sprite|PIXI.Graphics} maskData - The masking data.\n     */\n    pushMask(target, maskData)\n    {\n        // TODO the root check means scissor rect will not\n        // be used on render textures more info here:\n        // https://github.com/pixijs/pixi.js/pull/3545\n\n        if (maskData.texture)\n        {\n            this.pushSpriteMask(target, maskData);\n        }\n        else if (this.enableScissor\n            && !this.scissor\n            && this.renderer._activeRenderTarget.root\n            && !this.renderer.stencilManager.stencilMaskStack.length\n            && maskData.isFastRect())\n        {\n            const matrix = maskData.worldTransform;\n\n            let rot = Math.atan2(matrix.b, matrix.a);\n\n            // use the nearest degree!\n            rot = Math.round(rot * (180 / Math.PI));\n\n            if (rot % 90)\n            {\n                this.pushStencilMask(maskData);\n            }\n            else\n            {\n                this.pushScissorMask(target, maskData);\n            }\n        }\n        else\n        {\n            this.pushStencilMask(maskData);\n        }\n    }\n\n    /**\n     * Removes the last mask from the mask stack and doesn't return it.\n     *\n     * @param {PIXI.DisplayObject} target - Display Object to pop the mask from\n     * @param {PIXI.Sprite|PIXI.Graphics} maskData - The masking data.\n     */\n    popMask(target, maskData)\n    {\n        if (maskData.texture)\n        {\n            this.popSpriteMask(target, maskData);\n        }\n        else if (this.enableScissor && !this.renderer.stencilManager.stencilMaskStack.length)\n        {\n            this.popScissorMask(target, maskData);\n        }\n        else\n        {\n            this.popStencilMask(target, maskData);\n        }\n    }\n\n    /**\n     * Applies the Mask and adds it to the current filter stack.\n     *\n     * @param {PIXI.RenderTarget} target - Display Object to push the sprite mask to\n     * @param {PIXI.Sprite} maskData - Sprite to be used as the mask\n     */\n    pushSpriteMask(target, maskData)\n    {\n        let alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex];\n\n        if (!alphaMaskFilter)\n        {\n            alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex] = [new AlphaMaskFilter(maskData)];\n        }\n\n        alphaMaskFilter[0].resolution = this.renderer.resolution;\n        alphaMaskFilter[0].maskSprite = maskData;\n\n        const stashFilterArea = target.filterArea;\n\n        target.filterArea = maskData.getBounds(true);\n        this.renderer.filterManager.pushFilter(target, alphaMaskFilter);\n        target.filterArea = stashFilterArea;\n\n        this.alphaMaskIndex++;\n    }\n\n    /**\n     * Removes the last filter from the filter stack and doesn't return it.\n     *\n     */\n    popSpriteMask()\n    {\n        this.renderer.filterManager.popFilter();\n        this.alphaMaskIndex--;\n    }\n\n    /**\n     * Applies the Mask and adds it to the current filter stack.\n     *\n     * @param {PIXI.Sprite|PIXI.Graphics} maskData - The masking data.\n     */\n    pushStencilMask(maskData)\n    {\n        this.renderer.currentRenderer.stop();\n        this.renderer.stencilManager.pushStencil(maskData);\n    }\n\n    /**\n     * Removes the last filter from the filter stack and doesn't return it.\n     *\n     */\n    popStencilMask()\n    {\n        this.renderer.currentRenderer.stop();\n        this.renderer.stencilManager.popStencil();\n    }\n\n    /**\n     *\n     * @param {PIXI.DisplayObject} target - Display Object to push the mask to\n     * @param {PIXI.Graphics} maskData - The masking data.\n     */\n    pushScissorMask(target, maskData)\n    {\n        maskData.renderable = true;\n\n        const renderTarget = this.renderer._activeRenderTarget;\n\n        const bounds = maskData.getBounds();\n\n        bounds.fit(renderTarget.size);\n        maskData.renderable = false;\n\n        this.renderer.gl.enable(this.renderer.gl.SCISSOR_TEST);\n\n        const resolution = this.renderer.resolution;\n\n        this.renderer.gl.scissor(\n            bounds.x * resolution,\n            (renderTarget.root ? renderTarget.size.height - bounds.y - bounds.height : bounds.y) * resolution,\n            bounds.width * resolution,\n            bounds.height * resolution\n        );\n\n        this.scissorRenderTarget = renderTarget;\n        this.scissorData = maskData;\n        this.scissor = true;\n    }\n\n    /**\n     *\n     *\n     */\n    popScissorMask()\n    {\n        this.scissorRenderTarget = null;\n        this.scissorData = null;\n        this.scissor = false;\n\n        // must be scissor!\n        const gl = this.renderer.gl;\n\n        gl.disable(gl.SCISSOR_TEST);\n    }\n}\n"]}