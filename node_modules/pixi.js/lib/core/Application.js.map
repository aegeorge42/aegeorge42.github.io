{"version":3,"sources":["../../src/core/Application.js"],"names":["Application","options","arg2","arg3","arg4","arg5","Object","assign","width","height","RENDER_OPTIONS","forceCanvas","sharedTicker","_options","autoStart","sharedLoader","renderer","stage","_ticker","ticker","start","render","stop","destroy","removeView","stageOptions","oldTicker","remove","add","LOW","view","screen"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;;;;;;;;;;;IAkBqBA,W;AAEjB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,yBAAYC,OAAZ,EAAqBC,IAArB,EAA2BC,IAA3B,EAAiCC,IAAjC,EAAuCC,IAAvC,EACA;AAAA;;AACI;AACA,YAAI,OAAOJ,OAAP,KAAmB,QAAvB,EACA;AACIA,sBAAUK,OAAOC,MAAP,CAAc;AACpBC,uBAAOP,OADa;AAEpBQ,wBAAQP,QAAQ,mBAASQ,cAAT,CAAwBD,MAFpB;AAGpBE,6BAAa,CAAC,CAACP,IAHK;AAIpBQ,8BAAc,CAAC,CAACP;AAJI,aAAd,EAKPF,IALO,CAAV;AAMH;;AAED;;;;;AAKA,aAAKU,QAAL,GAAgBZ,UAAUK,OAAOC,MAAP,CAAc;AACpCO,uBAAW,IADyB;AAEpCF,0BAAc,KAFsB;AAGpCD,yBAAa,KAHuB;AAIpCI,0BAAc;AAJsB,SAAd,EAKvBd,OALuB,CAA1B;;AAOA;;;;AAIA,aAAKe,QAAL,GAAgB,4CAAmBf,OAAnB,CAAhB;;AAEA;;;;AAIA,aAAKgB,KAAL,GAAa,yBAAb;;AAEA;;;;;AAKA,aAAKC,OAAL,GAAe,IAAf;;AAEA;;;;;AAKA,aAAKC,MAAL,GAAclB,QAAQW,YAAR,oBAAgC,oBAA9C;;AAEA;AACA,YAAIX,QAAQa,SAAZ,EACA;AACI,iBAAKM,KAAL;AACH;AACJ;;AAmBD;;;0BAGAC,M,qBACA;AACI,aAAKL,QAAL,CAAcK,MAAd,CAAqB,KAAKJ,KAA1B;AACH,K;;AAED;;;;;0BAGAK,I,mBACA;AACI,aAAKJ,OAAL,CAAaI,IAAb;AACH,K;;AAED;;;;;0BAGAF,K,oBACA;AACI,aAAKF,OAAL,CAAaE,KAAb;AACH,K;;AAED;;;;;;;AAoBA;;;;;;;;;;;;0BAYAG,O,oBAAQC,U,EAAYC,Y,EACpB;AACI,YAAI,KAAKP,OAAT,EACA;AACI,gBAAMQ,YAAY,KAAKR,OAAvB;;AAEA,iBAAKC,MAAL,GAAc,IAAd;AACAO,sBAAUH,OAAV;AACH;;AAED,aAAKN,KAAL,CAAWM,OAAX,CAAmBE,YAAnB;AACA,aAAKR,KAAL,GAAa,IAAb;;AAEA,aAAKD,QAAL,CAAcO,OAAd,CAAsBC,UAAtB;AACA,aAAKR,QAAL,GAAgB,IAAhB;;AAEA,aAAKH,QAAL,GAAgB,IAAhB;AACH,K;;;;0BA1FUM,M,EAAQ;AACnB;AACI,gBAAI,KAAKD,OAAT,EACA;AACI,qBAAKA,OAAL,CAAaS,MAAb,CAAoB,KAAKN,MAAzB,EAAiC,IAAjC;AACH;AACD,iBAAKH,OAAL,GAAeC,MAAf;AACA,gBAAIA,MAAJ,EACA;AACIA,uBAAOS,GAAP,CAAW,KAAKP,MAAhB,EAAwB,IAAxB,EAA8B,uBAAgBQ,GAA9C;AACH;AACJ,S;4BACY;AACb;AACI,mBAAO,KAAKX,OAAZ;AACH;;;4BAgCD;AACI,mBAAO,KAAKF,QAAL,CAAcc,IAArB;AACH;;AAED;;;;;;;;4BAMA;AACI,mBAAO,KAAKd,QAAL,CAAce,MAArB;AACH;;;;;;kBArJgB/B,W","file":"Application.js","sourcesContent":["import { autoDetectRenderer } from './autoDetectRenderer';\nimport Container from './display/Container';\nimport { shared, Ticker } from './ticker';\nimport settings from './settings';\nimport { UPDATE_PRIORITY } from './const';\n\n/**\n * Convenience class to create a new PIXI application.\n * This class automatically creates the renderer, ticker\n * and root container.\n *\n * @example\n * // Create the application\n * const app = new PIXI.Application();\n *\n * // Add the view to the DOM\n * document.body.appendChild(app.view);\n *\n * // ex, add display objects\n * app.stage.addChild(PIXI.Sprite.fromImage('something.png'));\n *\n * @class\n * @memberof PIXI\n */\nexport default class Application\n{\n    // eslint-disable-next-line valid-jsdoc\n    /**\n     * @param {object} [options] - The optional renderer parameters\n     * @param {boolean} [options.autoStart=true] - automatically starts the rendering after the construction.\n     *     Note that setting this parameter to false does NOT stop the shared ticker even if you set\n     *     options.sharedTicker to true in case that it is already started. Stop it by your own.\n     * @param {number} [options.width=800] - the width of the renderers view\n     * @param {number} [options.height=600] - the height of the renderers view\n     * @param {HTMLCanvasElement} [options.view] - the canvas to use as a view, optional\n     * @param {boolean} [options.transparent=false] - If the render view is transparent, default false\n     * @param {boolean} [options.antialias=false] - sets antialias (only applicable in chrome at the moment)\n     * @param {boolean} [options.preserveDrawingBuffer=false] - enables drawing buffer preservation, enable this if you\n     *  need to call toDataUrl on the webgl context\n     * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the renderer, retina would be 2\n     * @param {boolean} [options.forceCanvas=false] - prevents selection of WebGL renderer, even if such is present\n     * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n     *  (shown if not transparent).\n     * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\n     *   not before the new render pass.\n     * @param {boolean} [options.roundPixels=false] - If true PixiJS will Math.floor() x/y values when rendering,\n     *  stopping pixel interpolation.\n     * @param {boolean} [options.forceFXAA=false] - forces FXAA antialiasing to be used over native.\n     *  FXAA is faster, but may not always look as great **webgl only**\n     * @param {boolean} [options.legacy=false] - `true` to ensure compatibility with older / less advanced devices.\n     *  If you experience unexplained flickering try setting this to true. **webgl only**\n     * @param {string} [options.powerPreference] - Parameter passed to webgl context, set to \"high-performance\"\n     *  for devices with dual graphics card **webgl only**\n     * @param {boolean} [options.sharedTicker=false] - `true` to use PIXI.ticker.shared, `false` to create new ticker.\n     * @param {boolean} [options.sharedLoader=false] - `true` to use PIXI.loaders.shared, `false` to create new Loader.\n     */\n    constructor(options, arg2, arg3, arg4, arg5)\n    {\n        // Support for constructor(width, height, options, noWebGL, useSharedTicker)\n        if (typeof options === 'number')\n        {\n            options = Object.assign({\n                width: options,\n                height: arg2 || settings.RENDER_OPTIONS.height,\n                forceCanvas: !!arg4,\n                sharedTicker: !!arg5,\n            }, arg3);\n        }\n\n        /**\n         * The default options, so we mixin functionality later.\n         * @member {object}\n         * @protected\n         */\n        this._options = options = Object.assign({\n            autoStart: true,\n            sharedTicker: false,\n            forceCanvas: false,\n            sharedLoader: false,\n        }, options);\n\n        /**\n         * WebGL renderer if available, otherwise CanvasRenderer\n         * @member {PIXI.WebGLRenderer|PIXI.CanvasRenderer}\n         */\n        this.renderer = autoDetectRenderer(options);\n\n        /**\n         * The root display container that's rendered.\n         * @member {PIXI.Container}\n         */\n        this.stage = new Container();\n\n        /**\n         * Internal reference to the ticker\n         * @member {PIXI.ticker.Ticker}\n         * @private\n         */\n        this._ticker = null;\n\n        /**\n         * Ticker for doing render updates.\n         * @member {PIXI.ticker.Ticker}\n         * @default PIXI.ticker.shared\n         */\n        this.ticker = options.sharedTicker ? shared : new Ticker();\n\n        // Start the rendering\n        if (options.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    set ticker(ticker) // eslint-disable-line require-jsdoc\n    {\n        if (this._ticker)\n        {\n            this._ticker.remove(this.render, this);\n        }\n        this._ticker = ticker;\n        if (ticker)\n        {\n            ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n        }\n    }\n    get ticker() // eslint-disable-line require-jsdoc\n    {\n        return this._ticker;\n    }\n\n    /**\n     * Render the current stage.\n     */\n    render()\n    {\n        this.renderer.render(this.stage);\n    }\n\n    /**\n     * Convenience method for stopping the render.\n     */\n    stop()\n    {\n        this._ticker.stop();\n    }\n\n    /**\n     * Convenience method for starting the render.\n     */\n    start()\n    {\n        this._ticker.start();\n    }\n\n    /**\n     * Reference to the renderer's canvas element.\n     * @member {HTMLCanvasElement}\n     * @readonly\n     */\n    get view()\n    {\n        return this.renderer.view;\n    }\n\n    /**\n     * Reference to the renderer's screen rectangle. Its safe to use as filterArea or hitArea for whole screen\n     * @member {PIXI.Rectangle}\n     * @readonly\n     */\n    get screen()\n    {\n        return this.renderer.screen;\n    }\n\n    /**\n     * Destroy and don't use after this.\n     * @param {Boolean} [removeView=false] Automatically remove canvas from DOM.\n     * @param {object|boolean} [stageOptions] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [stageOptions.children=false] - if set to true, all the children will have their destroy\n     *  method called as well. 'stageOptions' will be passed on to those calls.\n     * @param {boolean} [stageOptions.texture=false] - Only used for child Sprites if stageOptions.children is set\n     *  to true. Should it destroy the texture of the child sprite\n     * @param {boolean} [stageOptions.baseTexture=false] - Only used for child Sprites if stageOptions.children is set\n     *  to true. Should it destroy the base texture of the child sprite\n     */\n    destroy(removeView, stageOptions)\n    {\n        if (this._ticker)\n        {\n            const oldTicker = this._ticker;\n\n            this.ticker = null;\n            oldTicker.destroy();\n        }\n\n        this.stage.destroy(stageOptions);\n        this.stage = null;\n\n        this.renderer.destroy(removeView);\n        this.renderer = null;\n\n        this._options = null;\n    }\n}\n"]}