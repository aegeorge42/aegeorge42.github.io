{"version":3,"sources":["../../../src/core/utils/mixin.js"],"names":["mixin","delayMixin","performMixins","target","source","keys","Object","i","length","propertyName","defineProperty","getOwnPropertyDescriptor","mixins","push"],"mappings":";;;QAQgBA,K,GAAAA,K;QA+BAC,U,GAAAA,U;QAYAC,a,GAAAA,a;AAnDhB;;;;;;;;AAQO,SAASF,KAAT,CAAeG,MAAf,EAAuBC,MAAvB,EACP;AACI,QAAI,CAACD,MAAD,IAAW,CAACC,MAAhB,EAAwB;AACxB;AACA;;AAEA;AACA,QAAMC,OAAOC,OAAOD,IAAP,CAAYD,MAAZ,CAAb;;AAEA;AACA,SAAK,IAAIG,IAAI,CAAb,EAAgBA,IAAIF,KAAKG,MAAzB,EAAiC,EAAED,CAAnC,EACA;AACI,YAAME,eAAeJ,KAAKE,CAAL,CAArB;;AAEA;AACAD,eAAOI,cAAP,CAAsBP,MAAtB,EAA8BM,YAA9B,EAA4CH,OAAOK,wBAAP,CAAgCP,MAAhC,EAAwCK,YAAxC,CAA5C;AACH;AACJ;;AAED,IAAMG,SAAS,EAAf;;AAEA;;;;;;;;;;AAUO,SAASX,UAAT,CAAoBE,MAApB,EAA4BC,MAA5B,EACP;AACIQ,WAAOC,IAAP,CAAYV,MAAZ,EAAoBC,MAApB;AACH;;AAED;;;;;;;AAOO,SAASF,aAAT,GACP;AACI,SAAK,IAAIK,IAAI,CAAb,EAAgBA,IAAIK,OAAOJ,MAA3B,EAAmCD,KAAK,CAAxC,EACA;AACIP,cAAMY,OAAOL,CAAP,CAAN,EAAiBK,OAAOL,IAAI,CAAX,CAAjB;AACH;AACDK,WAAOJ,MAAP,GAAgB,CAAhB;AACH","file":"mixin.js","sourcesContent":["/**\n * Mixes all enumerable properties and methods from a source object to a target object.\n *\n * @memberof PIXI.utils.mixins\n * @function mixin\n * @param {object} target The prototype or instance that properties and methods should be added to.\n * @param {object} source The source of properties and methods to mix in.\n */\nexport function mixin(target, source)\n{\n    if (!target || !source) return;\n    // in ES8/ES2017, this would be really easy:\n    // Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n\n    // get all the enumerable property keys\n    const keys = Object.keys(source);\n\n    // loop through properties\n    for (let i = 0; i < keys.length; ++i)\n    {\n        const propertyName = keys[i];\n\n        // Set the property using the property descriptor - this works for accessors and normal value properties\n        Object.defineProperty(target, propertyName, Object.getOwnPropertyDescriptor(source, propertyName));\n    }\n}\n\nconst mixins = [];\n\n/**\n * Queues a mixin to be handled towards the end of the initialization of PIXI, so that deprecation\n * can take effect.\n *\n * @memberof PIXI.utils.mixins\n * @function delayMixin\n * @private\n * @param {object} target The prototype or instance that properties and methods should be added to.\n * @param {object} source The source of properties and methods to mix in.\n */\nexport function delayMixin(target, source)\n{\n    mixins.push(target, source);\n}\n\n/**\n * Handles all mixins queued via delayMixin().\n *\n * @memberof PIXI.utils.mixins\n * @function performMixins\n * @private\n */\nexport function performMixins()\n{\n    for (let i = 0; i < mixins.length; i += 2)\n    {\n        mixin(mixins[i], mixins[i + 1]);\n    }\n    mixins.length = 0;\n}\n"]}