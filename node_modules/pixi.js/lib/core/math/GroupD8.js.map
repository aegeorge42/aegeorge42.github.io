{"version":3,"sources":["../../../src/core/math/GroupD8.js"],"names":["ux","uy","vx","vy","tempMatrices","mul","signum","x","init","i","row","push","j","_ux","_uy","_vx","_vy","k","mat","set","GroupD8","E","SE","S","SW","W","NW","N","NE","MIRROR_VERTICAL","MIRROR_HORIZONTAL","uX","ind","uY","vX","vY","inv","rotation","add","rotationSecond","rotationFirst","sub","rotate180","isVertical","byDirection","dx","dy","Math","abs","matrixAppendRotationInv","matrix","tx","ty","append"],"mappings":";;;;AACA;;;;;;AAEA,IAAMA,KAAK,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAC,CAAX,EAAc,CAAC,CAAf,EAAkB,CAAC,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAAC,CAAtC,EAAyC,CAAC,CAA1C,EAA6C,CAAC,CAA9C,EAAiD,CAAjD,EAAoD,CAApD,CAAX,C,CAHA;;AAIA,IAAMC,KAAK,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAC,CAAjB,EAAoB,CAAC,CAArB,EAAwB,CAAC,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAAC,CAA5C,EAA+C,CAAC,CAAhD,EAAmD,CAAC,CAApD,CAAX;AACA,IAAMC,KAAK,CAAC,CAAD,EAAI,CAAC,CAAL,EAAQ,CAAC,CAAT,EAAY,CAAC,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAAC,CAA5C,EAA+C,CAAC,CAAhD,EAAmD,CAAC,CAApD,CAAX;AACA,IAAMC,KAAK,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAC,CAAX,EAAc,CAAC,CAAf,EAAkB,CAAC,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAAC,CAA7B,EAAgC,CAAC,CAAjC,EAAoC,CAApC,EAAuC,CAAvC,EAA0C,CAA1C,EAA6C,CAA7C,EAAgD,CAAhD,EAAmD,CAAC,CAApD,CAAX;AACA,IAAMC,eAAe,EAArB;;AAEA,IAAMC,MAAM,EAAZ;;AAEA,SAASC,MAAT,CAAgBC,CAAhB,EACA;AACI,QAAIA,IAAI,CAAR,EACA;AACI,eAAO,CAAC,CAAR;AACH;AACD,QAAIA,IAAI,CAAR,EACA;AACI,eAAO,CAAP;AACH;;AAED,WAAO,CAAP;AACH;;AAED,SAASC,IAAT,GACA;AACI,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,EAApB,EAAwBA,GAAxB,EACA;AACI,YAAMC,MAAM,EAAZ;;AAEAL,YAAIM,IAAJ,CAASD,GAAT;;AAEA,aAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAI,EAApB,EAAwBA,GAAxB,EACA;AACI,gBAAMC,MAAMP,OAAQN,GAAGS,CAAH,IAAQT,GAAGY,CAAH,CAAT,GAAmBV,GAAGO,CAAH,IAAQR,GAAGW,CAAH,CAAlC,CAAZ;AACA,gBAAME,MAAMR,OAAQL,GAAGQ,CAAH,IAAQT,GAAGY,CAAH,CAAT,GAAmBT,GAAGM,CAAH,IAAQR,GAAGW,CAAH,CAAlC,CAAZ;AACA,gBAAMG,MAAMT,OAAQN,GAAGS,CAAH,IAAQP,GAAGU,CAAH,CAAT,GAAmBV,GAAGO,CAAH,IAAQN,GAAGS,CAAH,CAAlC,CAAZ;AACA,gBAAMI,MAAMV,OAAQL,GAAGQ,CAAH,IAAQP,GAAGU,CAAH,CAAT,GAAmBT,GAAGM,CAAH,IAAQN,GAAGS,CAAH,CAAlC,CAAZ;;AAEA,iBAAK,IAAIK,IAAI,CAAb,EAAgBA,IAAI,EAApB,EAAwBA,GAAxB,EACA;AACI,oBAAIjB,GAAGiB,CAAH,MAAUJ,GAAV,IAAiBZ,GAAGgB,CAAH,MAAUH,GAA3B,IAAkCZ,GAAGe,CAAH,MAAUF,GAA5C,IAAmDZ,GAAGc,CAAH,MAAUD,GAAjE,EACA;AACIN,wBAAIC,IAAJ,CAASM,CAAT;AACA;AACH;AACJ;AACJ;AACJ;;AAED,SAAK,IAAIR,KAAI,CAAb,EAAgBA,KAAI,EAApB,EAAwBA,IAAxB,EACA;AACI,YAAMS,MAAM,sBAAZ;;AAEAA,YAAIC,GAAJ,CAAQnB,GAAGS,EAAH,CAAR,EAAeR,GAAGQ,EAAH,CAAf,EAAsBP,GAAGO,EAAH,CAAtB,EAA6BN,GAAGM,EAAH,CAA7B,EAAoC,CAApC,EAAuC,CAAvC;AACAL,qBAAaO,IAAb,CAAkBO,GAAlB;AACH;AACJ;;AAEDV;;AAEA;;;;;;;;;;;;;;AAcA,IAAMY,UAAU;AACZC,OAAG,CADS;AAEZC,QAAI,CAFQ;AAGZC,OAAG,CAHS;AAIZC,QAAI,CAJQ;AAKZC,OAAG,CALS;AAMZC,QAAI,CANQ;AAOZC,OAAG,CAPS;AAQZC,QAAI,CARQ;AASZC,qBAAiB,CATL;AAUZC,uBAAmB,EAVP;AAWZC,QAAI,YAACC,GAAD;AAAA,eAAShC,GAAGgC,GAAH,CAAT;AAAA,KAXQ;AAYZC,QAAI,YAACD,GAAD;AAAA,eAAS/B,GAAG+B,GAAH,CAAT;AAAA,KAZQ;AAaZE,QAAI,YAACF,GAAD;AAAA,eAAS9B,GAAG8B,GAAH,CAAT;AAAA,KAbQ;AAcZG,QAAI,YAACH,GAAD;AAAA,eAAS7B,GAAG6B,GAAH,CAAT;AAAA,KAdQ;AAeZI,SAAK,aAACC,QAAD,EACL;AACI,YAAIA,WAAW,CAAf,EACA;AACI,mBAAOA,WAAW,EAAlB;AACH;;AAED,eAAQ,CAACA,QAAF,GAAc,CAArB;AACH,KAvBW;AAwBZC,SAAK,aAACC,cAAD,EAAiBC,aAAjB;AAAA,eAAmCnC,IAAIkC,cAAJ,EAAoBC,aAApB,CAAnC;AAAA,KAxBO;AAyBZC,SAAK,aAACF,cAAD,EAAiBC,aAAjB;AAAA,eAAmCnC,IAAIkC,cAAJ,EAAoBnB,QAAQgB,GAAR,CAAYI,aAAZ,CAApB,CAAnC;AAAA,KAzBO;;AA2BZ;;;;;;;AAOAE,eAAW,mBAACL,QAAD;AAAA,eAAcA,WAAW,CAAzB;AAAA,KAlCC;;AAoCZ;;;;;;;;AAQAM,gBAAY,oBAACN,QAAD;AAAA,eAAc,CAACA,WAAW,CAAZ,MAAmB,CAAjC;AAAA,KA5CA;;AA8CZ;;;;;;;AAOAO,iBAAa,qBAACC,EAAD,EAAKC,EAAL,EACb;AACI,YAAIC,KAAKC,GAAL,CAASH,EAAT,IAAe,CAAf,IAAoBE,KAAKC,GAAL,CAASF,EAAT,CAAxB,EACA;AACI,gBAAIA,MAAM,CAAV,EACA;AACI,uBAAO1B,QAAQG,CAAf;AACH;;AAED,mBAAOH,QAAQO,CAAf;AACH,SARD,MASK,IAAIoB,KAAKC,GAAL,CAASF,EAAT,IAAe,CAAf,IAAoBC,KAAKC,GAAL,CAASH,EAAT,CAAxB,EACL;AACI,gBAAIA,KAAK,CAAT,EACA;AACI,uBAAOzB,QAAQC,CAAf;AACH;;AAED,mBAAOD,QAAQK,CAAf;AACH,SARI,MASA,IAAIqB,KAAK,CAAT,EACL;AACI,gBAAID,KAAK,CAAT,EACA;AACI,uBAAOzB,QAAQE,EAAf;AACH;;AAED,mBAAOF,QAAQI,EAAf;AACH,SARI,MASA,IAAIqB,KAAK,CAAT,EACL;AACI,mBAAOzB,QAAQQ,EAAf;AACH;;AAED,eAAOR,QAAQM,EAAf;AACH,KAxFW;;AA0FZ;;;;;;;;;AASAuB,6BAAyB,iCAACC,MAAD,EAASb,QAAT,EACzB;AAAA,YAD4Cc,EAC5C,uEADiD,CACjD;AAAA,YADoDC,EACpD,uEADyD,CACzD;;AACI;AACA,YAAMlC,MAAMd,aAAagB,QAAQgB,GAAR,CAAYC,QAAZ,CAAb,CAAZ;;AAEAnB,YAAIiC,EAAJ,GAASA,EAAT;AACAjC,YAAIkC,EAAJ,GAASA,EAAT;AACAF,eAAOG,MAAP,CAAcnC,GAAd;AACH;AA3GW,CAAhB;;kBA8GeE,O","file":"GroupD8.js","sourcesContent":["// Your friendly neighbour https://en.wikipedia.org/wiki/Dihedral_group of order 16\nimport Matrix from './Matrix';\n\nconst ux = [1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1];\nconst uy = [0, 1, 1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1];\nconst vx = [0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1];\nconst vy = [1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, 1, 1, 1, 0, -1];\nconst tempMatrices = [];\n\nconst mul = [];\n\nfunction signum(x)\n{\n    if (x < 0)\n    {\n        return -1;\n    }\n    if (x > 0)\n    {\n        return 1;\n    }\n\n    return 0;\n}\n\nfunction init()\n{\n    for (let i = 0; i < 16; i++)\n    {\n        const row = [];\n\n        mul.push(row);\n\n        for (let j = 0; j < 16; j++)\n        {\n            const _ux = signum((ux[i] * ux[j]) + (vx[i] * uy[j]));\n            const _uy = signum((uy[i] * ux[j]) + (vy[i] * uy[j]));\n            const _vx = signum((ux[i] * vx[j]) + (vx[i] * vy[j]));\n            const _vy = signum((uy[i] * vx[j]) + (vy[i] * vy[j]));\n\n            for (let k = 0; k < 16; k++)\n            {\n                if (ux[k] === _ux && uy[k] === _uy && vx[k] === _vx && vy[k] === _vy)\n                {\n                    row.push(k);\n                    break;\n                }\n            }\n        }\n    }\n\n    for (let i = 0; i < 16; i++)\n    {\n        const mat = new Matrix();\n\n        mat.set(ux[i], uy[i], vx[i], vy[i], 0, 0);\n        tempMatrices.push(mat);\n    }\n}\n\ninit();\n\n/**\n * Implements Dihedral Group D_8, see [group D4]{@link http://mathworld.wolfram.com/DihedralGroupD4.html},\n * D8 is the same but with diagonals. Used for texture rotations.\n *\n * Vector xX(i), xY(i) is U-axis of sprite with rotation i\n * Vector yY(i), yY(i) is V-axis of sprite with rotation i\n * Rotations: 0 grad (0), 90 grad (2), 180 grad (4), 270 grad (6)\n * Mirrors: vertical (8), main diagonal (10), horizontal (12), reverse diagonal (14)\n * This is the small part of gameofbombs.com portal system. It works.\n *\n * @author Ivan @ivanpopelyshev\n * @class\n * @memberof PIXI\n */\nconst GroupD8 = {\n    E: 0,\n    SE: 1,\n    S: 2,\n    SW: 3,\n    W: 4,\n    NW: 5,\n    N: 6,\n    NE: 7,\n    MIRROR_VERTICAL: 8,\n    MIRROR_HORIZONTAL: 12,\n    uX: (ind) => ux[ind],\n    uY: (ind) => uy[ind],\n    vX: (ind) => vx[ind],\n    vY: (ind) => vy[ind],\n    inv: (rotation) =>\n    {\n        if (rotation & 8)\n        {\n            return rotation & 15;\n        }\n\n        return (-rotation) & 7;\n    },\n    add: (rotationSecond, rotationFirst) => mul[rotationSecond][rotationFirst],\n    sub: (rotationSecond, rotationFirst) => mul[rotationSecond][GroupD8.inv(rotationFirst)],\n\n    /**\n     * Adds 180 degrees to rotation. Commutative operation.\n     *\n     * @memberof PIXI.GroupD8\n     * @param {number} rotation - The number to rotate.\n     * @returns {number} rotated number\n     */\n    rotate180: (rotation) => rotation ^ 4,\n\n    /**\n     * Direction of main vector can be horizontal, vertical or diagonal.\n     * Some objects work with vertical directions different.\n     *\n     * @memberof PIXI.GroupD8\n     * @param {number} rotation - The number to check.\n     * @returns {boolean} Whether or not the direction is vertical\n     */\n    isVertical: (rotation) => (rotation & 3) === 2,\n\n    /**\n     * @memberof PIXI.GroupD8\n     * @param {number} dx - TODO\n     * @param {number} dy - TODO\n     *\n     * @return {number} TODO\n     */\n    byDirection: (dx, dy) =>\n    {\n        if (Math.abs(dx) * 2 <= Math.abs(dy))\n        {\n            if (dy >= 0)\n            {\n                return GroupD8.S;\n            }\n\n            return GroupD8.N;\n        }\n        else if (Math.abs(dy) * 2 <= Math.abs(dx))\n        {\n            if (dx > 0)\n            {\n                return GroupD8.E;\n            }\n\n            return GroupD8.W;\n        }\n        else if (dy > 0)\n        {\n            if (dx > 0)\n            {\n                return GroupD8.SE;\n            }\n\n            return GroupD8.SW;\n        }\n        else if (dx > 0)\n        {\n            return GroupD8.NE;\n        }\n\n        return GroupD8.NW;\n    },\n\n    /**\n     * Helps sprite to compensate texture packer rotation.\n     *\n     * @memberof PIXI.GroupD8\n     * @param {PIXI.Matrix} matrix - sprite world matrix\n     * @param {number} rotation - The rotation factor to use.\n     * @param {number} tx - sprite anchoring\n     * @param {number} ty - sprite anchoring\n     */\n    matrixAppendRotationInv: (matrix, rotation, tx = 0, ty = 0) =>\n    {\n        // Packer used \"rotation\", we use \"inv(rotation)\"\n        const mat = tempMatrices[GroupD8.inv(rotation)];\n\n        mat.tx = tx;\n        mat.ty = ty;\n        matrix.append(mat);\n    },\n};\n\nexport default GroupD8;\n"]}