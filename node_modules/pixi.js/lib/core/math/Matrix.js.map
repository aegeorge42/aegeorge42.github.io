{"version":3,"sources":["../../../src/core/math/Matrix.js"],"names":["Matrix","a","b","c","d","tx","ty","array","fromArray","set","toArray","transpose","out","Float32Array","apply","pos","newPos","x","y","applyInverse","id","translate","scale","rotate","angle","cos","Math","sin","a1","c1","tx1","append","matrix","b1","d1","setTransform","pivotX","pivotY","scaleX","scaleY","rotation","skewX","skewY","prepend","decompose","transform","atan2","delta","abs","skew","sqrt","position","invert","n","identity","clone","copy"],"mappings":"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","file":"Matrix.js","sourcesContent":["import Point from './Point';\nimport { PI_2 } from '../const';\n\n/**\n * The PixiJS Matrix class as an object, which makes it a lot faster,\n * here is a representation of it :\n * | a | c | tx|\n * | b | d | ty|\n * | 0 | 0 | 1 |\n *\n * @class\n * @memberof PIXI\n */\nexport default class Matrix\n{\n    /**\n     * @param {number} [a=1] - x scale\n     * @param {number} [b=0] - x skew\n     * @param {number} [c=0] - y skew\n     * @param {number} [d=1] - y scale\n     * @param {number} [tx=0] - x translation\n     * @param {number} [ty=0] - y translation\n     */\n    constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0)\n    {\n        /**\n         * @member {number}\n         * @default 1\n         */\n        this.a = a;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.b = b;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.c = c;\n\n        /**\n         * @member {number}\n         * @default 1\n         */\n        this.d = d;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.tx = tx;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.ty = ty;\n\n        this.array = null;\n    }\n\n    /**\n     * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:\n     *\n     * a = array[0]\n     * b = array[1]\n     * c = array[3]\n     * d = array[4]\n     * tx = array[2]\n     * ty = array[5]\n     *\n     * @param {number[]} array - The array that the matrix will be populated from.\n     */\n    fromArray(array)\n    {\n        this.a = array[0];\n        this.b = array[1];\n        this.c = array[3];\n        this.d = array[4];\n        this.tx = array[2];\n        this.ty = array[5];\n    }\n\n    /**\n     * sets the matrix properties\n     *\n     * @param {number} a - Matrix component\n     * @param {number} b - Matrix component\n     * @param {number} c - Matrix component\n     * @param {number} d - Matrix component\n     * @param {number} tx - Matrix component\n     * @param {number} ty - Matrix component\n     *\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    set(a, b, c, d, tx, ty)\n    {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n\n        return this;\n    }\n\n    /**\n     * Creates an array from the current Matrix object.\n     *\n     * @param {boolean} transpose - Whether we need to transpose the matrix or not\n     * @param {Float32Array} [out=new Float32Array(9)] - If provided the array will be assigned to out\n     * @return {number[]} the newly created array which contains the matrix\n     */\n    toArray(transpose, out)\n    {\n        if (!this.array)\n        {\n            this.array = new Float32Array(9);\n        }\n\n        const array = out || this.array;\n\n        if (transpose)\n        {\n            array[0] = this.a;\n            array[1] = this.b;\n            array[2] = 0;\n            array[3] = this.c;\n            array[4] = this.d;\n            array[5] = 0;\n            array[6] = this.tx;\n            array[7] = this.ty;\n            array[8] = 1;\n        }\n        else\n        {\n            array[0] = this.a;\n            array[1] = this.c;\n            array[2] = this.tx;\n            array[3] = this.b;\n            array[4] = this.d;\n            array[5] = this.ty;\n            array[6] = 0;\n            array[7] = 0;\n            array[8] = 1;\n        }\n\n        return array;\n    }\n\n    /**\n     * Get a new position with the current transformation applied.\n     * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n     *\n     * @param {PIXI.Point} pos - The origin\n     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @return {PIXI.Point} The new point, transformed through this matrix\n     */\n    apply(pos, newPos)\n    {\n        newPos = newPos || new Point();\n\n        const x = pos.x;\n        const y = pos.y;\n\n        newPos.x = (this.a * x) + (this.c * y) + this.tx;\n        newPos.y = (this.b * x) + (this.d * y) + this.ty;\n\n        return newPos;\n    }\n\n    /**\n     * Get a new position with the inverse of the current transformation applied.\n     * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n     *\n     * @param {PIXI.Point} pos - The origin\n     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @return {PIXI.Point} The new point, inverse-transformed through this matrix\n     */\n    applyInverse(pos, newPos)\n    {\n        newPos = newPos || new Point();\n\n        const id = 1 / ((this.a * this.d) + (this.c * -this.b));\n\n        const x = pos.x;\n        const y = pos.y;\n\n        newPos.x = (this.d * id * x) + (-this.c * id * y) + (((this.ty * this.c) - (this.tx * this.d)) * id);\n        newPos.y = (this.a * id * y) + (-this.b * id * x) + (((-this.ty * this.a) + (this.tx * this.b)) * id);\n\n        return newPos;\n    }\n\n    /**\n     * Translates the matrix on the x and y.\n     *\n     * @param {number} x How much to translate x by\n     * @param {number} y How much to translate y by\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    translate(x, y)\n    {\n        this.tx += x;\n        this.ty += y;\n\n        return this;\n    }\n\n    /**\n     * Applies a scale transformation to the matrix.\n     *\n     * @param {number} x The amount to scale horizontally\n     * @param {number} y The amount to scale vertically\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    scale(x, y)\n    {\n        this.a *= x;\n        this.d *= y;\n        this.c *= x;\n        this.b *= y;\n        this.tx *= x;\n        this.ty *= y;\n\n        return this;\n    }\n\n    /**\n     * Applies a rotation transformation to the matrix.\n     *\n     * @param {number} angle - The angle in radians.\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    rotate(angle)\n    {\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        const a1 = this.a;\n        const c1 = this.c;\n        const tx1 = this.tx;\n\n        this.a = (a1 * cos) - (this.b * sin);\n        this.b = (a1 * sin) + (this.b * cos);\n        this.c = (c1 * cos) - (this.d * sin);\n        this.d = (c1 * sin) + (this.d * cos);\n        this.tx = (tx1 * cos) - (this.ty * sin);\n        this.ty = (tx1 * sin) + (this.ty * cos);\n\n        return this;\n    }\n\n    /**\n     * Appends the given Matrix to this Matrix.\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to append.\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    append(matrix)\n    {\n        const a1 = this.a;\n        const b1 = this.b;\n        const c1 = this.c;\n        const d1 = this.d;\n\n        this.a = (matrix.a * a1) + (matrix.b * c1);\n        this.b = (matrix.a * b1) + (matrix.b * d1);\n        this.c = (matrix.c * a1) + (matrix.d * c1);\n        this.d = (matrix.c * b1) + (matrix.d * d1);\n\n        this.tx = (matrix.tx * a1) + (matrix.ty * c1) + this.tx;\n        this.ty = (matrix.tx * b1) + (matrix.ty * d1) + this.ty;\n\n        return this;\n    }\n\n    /**\n     * Sets the matrix based on all the available properties\n     *\n     * @param {number} x - Position on the x axis\n     * @param {number} y - Position on the y axis\n     * @param {number} pivotX - Pivot on the x axis\n     * @param {number} pivotY - Pivot on the y axis\n     * @param {number} scaleX - Scale on the x axis\n     * @param {number} scaleY - Scale on the y axis\n     * @param {number} rotation - Rotation in radians\n     * @param {number} skewX - Skew on the x axis\n     * @param {number} skewY - Skew on the y axis\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    setTransform(x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY)\n    {\n        this.a = Math.cos(rotation + skewY) * scaleX;\n        this.b = Math.sin(rotation + skewY) * scaleX;\n        this.c = -Math.sin(rotation - skewX) * scaleY;\n        this.d = Math.cos(rotation - skewX) * scaleY;\n\n        this.tx = x - ((pivotX * this.a) + (pivotY * this.c));\n        this.ty = y - ((pivotX * this.b) + (pivotY * this.d));\n\n        return this;\n    }\n\n    /**\n     * Prepends the given Matrix to this Matrix.\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to prepend\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    prepend(matrix)\n    {\n        const tx1 = this.tx;\n\n        if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1)\n        {\n            const a1 = this.a;\n            const c1 = this.c;\n\n            this.a = (a1 * matrix.a) + (this.b * matrix.c);\n            this.b = (a1 * matrix.b) + (this.b * matrix.d);\n            this.c = (c1 * matrix.a) + (this.d * matrix.c);\n            this.d = (c1 * matrix.b) + (this.d * matrix.d);\n        }\n\n        this.tx = (tx1 * matrix.a) + (this.ty * matrix.c) + matrix.tx;\n        this.ty = (tx1 * matrix.b) + (this.ty * matrix.d) + matrix.ty;\n\n        return this;\n    }\n\n    /**\n     * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.\n     *\n     * @param {PIXI.Transform|PIXI.TransformStatic} transform - The transform to apply the properties to.\n     * @return {PIXI.Transform|PIXI.TransformStatic} The transform with the newly applied properties\n     */\n    decompose(transform)\n    {\n        // sort out rotation / skew..\n        const a = this.a;\n        const b = this.b;\n        const c = this.c;\n        const d = this.d;\n\n        const skewX = -Math.atan2(-c, d);\n        const skewY = Math.atan2(b, a);\n\n        const delta = Math.abs(skewX + skewY);\n\n        if (delta < 0.00001 || Math.abs(PI_2 - delta) < 0.00001)\n        {\n            transform.rotation = skewY;\n            transform.skew.x = transform.skew.y = 0;\n        }\n        else\n        {\n            transform.rotation = 0;\n            transform.skew.x = skewX;\n            transform.skew.y = skewY;\n        }\n\n        // next set scale\n        transform.scale.x = Math.sqrt((a * a) + (b * b));\n        transform.scale.y = Math.sqrt((c * c) + (d * d));\n\n        // next set position\n        transform.position.x = this.tx;\n        transform.position.y = this.ty;\n\n        return transform;\n    }\n\n    /**\n     * Inverts this matrix\n     *\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    invert()\n    {\n        const a1 = this.a;\n        const b1 = this.b;\n        const c1 = this.c;\n        const d1 = this.d;\n        const tx1 = this.tx;\n        const n = (a1 * d1) - (b1 * c1);\n\n        this.a = d1 / n;\n        this.b = -b1 / n;\n        this.c = -c1 / n;\n        this.d = a1 / n;\n        this.tx = ((c1 * this.ty) - (d1 * tx1)) / n;\n        this.ty = -((a1 * this.ty) - (b1 * tx1)) / n;\n\n        return this;\n    }\n\n    /**\n     * Resets this Matix to an identity (default) matrix.\n     *\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    identity()\n    {\n        this.a = 1;\n        this.b = 0;\n        this.c = 0;\n        this.d = 1;\n        this.tx = 0;\n        this.ty = 0;\n\n        return this;\n    }\n\n    /**\n     * Creates a new Matrix object with the same values as this one.\n     *\n     * @return {PIXI.Matrix} A copy of this matrix. Good for chaining method calls.\n     */\n    clone()\n    {\n        const matrix = new Matrix();\n\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n\n        return matrix;\n    }\n\n    /**\n     * Changes the values of the given matrix to be the same as the ones in this matrix\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to copy from.\n     * @return {PIXI.Matrix} The matrix given in parameter with its values updated.\n     */\n    copy(matrix)\n    {\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n\n        return matrix;\n    }\n\n    /**\n     * A default (identity) matrix\n     *\n     * @static\n     * @const\n     */\n    static get IDENTITY()\n    {\n        return new Matrix();\n    }\n\n    /**\n     * A temp matrix\n     *\n     * @static\n     * @const\n     */\n    static get TEMP_MATRIX()\n    {\n        return new Matrix();\n    }\n}\n"]}