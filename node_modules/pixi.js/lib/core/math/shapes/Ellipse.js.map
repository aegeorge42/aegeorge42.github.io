{"version":3,"sources":["../../../../src/core/math/shapes/Ellipse.js"],"names":["Ellipse","x","y","halfWidth","halfHeight","width","height","type","ELIP","clone","contains","normx","normy","getBounds"],"mappings":";;;;AAAA;;;;AACA;;;;;;AAEA;;;;;;IAMqBA,O;AAEjB;;;;;;AAMA,qBACA;AAAA,QADYC,CACZ,uEADgB,CAChB;AAAA,QADmBC,CACnB,uEADuB,CACvB;AAAA,QAD0BC,SAC1B,uEADsC,CACtC;AAAA,QADyCC,UACzC,uEADsD,CACtD;;AAAA;;AACI;;;;AAIA,SAAKH,CAAL,GAASA,CAAT;;AAEA;;;;AAIA,SAAKC,CAAL,GAASA,CAAT;;AAEA;;;;AAIA,SAAKG,KAAL,GAAaF,SAAb;;AAEA;;;;AAIA,SAAKG,MAAL,GAAcF,UAAd;;AAEA;;;;;;;;AAQA,SAAKG,IAAL,GAAY,cAAOC,IAAnB;AACH;;AAED;;;;;;;oBAKAC,K,oBACA;AACI,WAAO,IAAIT,OAAJ,CAAY,KAAKC,CAAjB,EAAoB,KAAKC,CAAzB,EAA4B,KAAKG,KAAjC,EAAwC,KAAKC,MAA7C,CAAP;AACH,G;;AAED;;;;;;;;;oBAOAI,Q,qBAAST,C,EAAGC,C,EACZ;AACI,QAAI,KAAKG,KAAL,IAAc,CAAd,IAAmB,KAAKC,MAAL,IAAe,CAAtC,EACA;AACI,aAAO,KAAP;AACH;;AAED;AACA,QAAIK,QAAS,CAACV,IAAI,KAAKA,CAAV,IAAe,KAAKI,KAAjC;AACA,QAAIO,QAAS,CAACV,IAAI,KAAKA,CAAV,IAAe,KAAKI,MAAjC;;AAEAK,aAASA,KAAT;AACAC,aAASA,KAAT;;AAEA,WAAQD,QAAQC,KAAR,IAAiB,CAAzB;AACH,G;;AAED;;;;;;;oBAKAC,S,wBACA;AACI,WAAO,wBAAc,KAAKZ,CAAL,GAAS,KAAKI,KAA5B,EAAmC,KAAKH,CAAL,GAAS,KAAKI,MAAjD,EAAyD,KAAKD,KAA9D,EAAqE,KAAKC,MAA1E,CAAP;AACH,G;;;;;kBAvFgBN,O","file":"Ellipse.js","sourcesContent":["import Rectangle from './Rectangle';\nimport { SHAPES } from '../../const';\n\n/**\n * The Ellipse object can be used to specify a hit area for displayObjects\n *\n * @class\n * @memberof PIXI\n */\nexport default class Ellipse\n{\n    /**\n     * @param {number} [x=0] - The X coordinate of the center of this ellipse\n     * @param {number} [y=0] - The Y coordinate of the center of this ellipse\n     * @param {number} [halfWidth=0] - The half width of this ellipse\n     * @param {number} [halfHeight=0] - The half height of this ellipse\n     */\n    constructor(x = 0, y = 0, halfWidth = 0, halfHeight = 0)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = x;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = y;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.width = halfWidth;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.height = halfHeight;\n\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readOnly\n         * @default PIXI.SHAPES.ELIP\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.ELIP;\n    }\n\n    /**\n     * Creates a clone of this Ellipse instance\n     *\n     * @return {PIXI.Ellipse} a copy of the ellipse\n     */\n    clone()\n    {\n        return new Ellipse(this.x, this.y, this.width, this.height);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this ellipse\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coords are within this ellipse\n     */\n    contains(x, y)\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n\n        // normalize the coords to an ellipse with center 0,0\n        let normx = ((x - this.x) / this.width);\n        let normy = ((y - this.y) / this.height);\n\n        normx *= normx;\n        normy *= normy;\n\n        return (normx + normy <= 1);\n    }\n\n    /**\n     * Returns the framing rectangle of the ellipse as a Rectangle object\n     *\n     * @return {PIXI.Rectangle} the framing rectangle\n     */\n    getBounds()\n    {\n        return new Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);\n    }\n}\n"]}