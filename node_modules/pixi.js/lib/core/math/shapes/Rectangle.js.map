{"version":3,"sources":["../../../../src/core/math/shapes/Rectangle.js"],"names":["Rectangle","x","y","width","height","Number","type","RECT","clone","copy","rectangle","contains","pad","paddingX","paddingY","fit","x1","Math","max","x2","min","y1","y2","enlarge","ceil","resolution","eps","floor"],"mappings":"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","file":"Rectangle.js","sourcesContent":["import { SHAPES } from '../../const';\n\n/**\n * Rectangle object is an area defined by its position, as indicated by its top-left corner\n * point (x, y) and by its width and its height.\n *\n * @class\n * @memberof PIXI\n */\nexport default class Rectangle\n{\n    /**\n     * @param {number} [x=0] - The X coordinate of the upper-left corner of the rectangle\n     * @param {number} [y=0] - The Y coordinate of the upper-left corner of the rectangle\n     * @param {number} [width=0] - The overall width of this rectangle\n     * @param {number} [height=0] - The overall height of this rectangle\n     */\n    constructor(x = 0, y = 0, width = 0, height = 0)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = Number(x);\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = Number(y);\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.width = Number(width);\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.height = Number(height);\n\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readOnly\n         * @default PIXI.SHAPES.RECT\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.RECT;\n    }\n\n    /**\n     * returns the left edge of the rectangle\n     *\n     * @member {number}\n     */\n    get left()\n    {\n        return this.x;\n    }\n\n    /**\n     * returns the right edge of the rectangle\n     *\n     * @member {number}\n     */\n    get right()\n    {\n        return this.x + this.width;\n    }\n\n    /**\n     * returns the top edge of the rectangle\n     *\n     * @member {number}\n     */\n    get top()\n    {\n        return this.y;\n    }\n\n    /**\n     * returns the bottom edge of the rectangle\n     *\n     * @member {number}\n     */\n    get bottom()\n    {\n        return this.y + this.height;\n    }\n\n    /**\n     * A constant empty rectangle.\n     *\n     * @static\n     * @constant\n     */\n    static get EMPTY()\n    {\n        return new Rectangle(0, 0, 0, 0);\n    }\n\n    /**\n     * Creates a clone of this Rectangle\n     *\n     * @return {PIXI.Rectangle} a copy of the rectangle\n     */\n    clone()\n    {\n        return new Rectangle(this.x, this.y, this.width, this.height);\n    }\n\n    /**\n     * Copies another rectangle to this one.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to copy.\n     * @return {PIXI.Rectangle} Returns itself.\n     */\n    copy(rectangle)\n    {\n        this.x = rectangle.x;\n        this.y = rectangle.y;\n        this.width = rectangle.width;\n        this.height = rectangle.height;\n\n        return this;\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rectangle\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coordinates are within this Rectangle\n     */\n    contains(x, y)\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n\n        if (x >= this.x && x < this.x + this.width)\n        {\n            if (y >= this.y && y < this.y + this.height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Pads the rectangle making it grow in all directions.\n     *\n     * @param {number} paddingX - The horizontal padding amount.\n     * @param {number} [paddingY] - The vertical padding amount.\n     */\n    pad(paddingX, paddingY)\n    {\n        paddingX = paddingX || 0;\n        paddingY = paddingY || ((paddingY !== 0) ? paddingX : 0);\n\n        this.x -= paddingX;\n        this.y -= paddingY;\n\n        this.width += paddingX * 2;\n        this.height += paddingY * 2;\n    }\n\n    /**\n     * Fits this rectangle around the passed one.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to fit.\n     */\n    fit(rectangle)\n    {\n        const x1 = Math.max(this.x, rectangle.x);\n        const x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.max(this.y, rectangle.y);\n        const y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = Math.max(x2 - x1, 0);\n        this.y = y1;\n        this.height = Math.max(y2 - y1, 0);\n    }\n\n    /**\n     * Enlarges this rectangle to include the passed rectangle.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to include.\n     */\n    enlarge(rectangle)\n    {\n        const x1 = Math.min(this.x, rectangle.x);\n        const x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.min(this.y, rectangle.y);\n        const y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = x2 - x1;\n        this.y = y1;\n        this.height = y2 - y1;\n    }\n\n    /**\n     * Enlarges rectangle that way its corners lie on grid\n     *\n     * @param {number} [resolution=1] resolution\n     * @param {number} [eps=0.001] precision\n     */\n    ceil(resolution = 1, eps = 0.001)\n    {\n        const x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n        const y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n\n        this.x = Math.floor((this.x + eps) * resolution) / resolution;\n        this.y = Math.floor((this.y + eps) * resolution) / resolution;\n\n        this.width = x2 - this.x;\n        this.height = y2 - this.y;\n    }\n}\n"]}