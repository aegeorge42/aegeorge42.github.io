{"version":3,"sources":["../../../../src/core/math/shapes/Circle.js"],"names":["Circle","x","y","radius","type","CIRC","clone","contains","r2","dx","dy","getBounds"],"mappings":";;;;AAAA;;;;AACA;;;;;;AAEA;;;;;;IAMqBA,M;AAEjB;;;;;AAKA,oBACA;AAAA,QADYC,CACZ,uEADgB,CAChB;AAAA,QADmBC,CACnB,uEADuB,CACvB;AAAA,QAD0BC,MAC1B,uEADmC,CACnC;;AAAA;;AACI;;;;AAIA,SAAKF,CAAL,GAASA,CAAT;;AAEA;;;;AAIA,SAAKC,CAAL,GAASA,CAAT;;AAEA;;;;AAIA,SAAKC,MAAL,GAAcA,MAAd;;AAEA;;;;;;;;AAQA,SAAKC,IAAL,GAAY,cAAOC,IAAnB;AACH;;AAED;;;;;;;mBAKAC,K,oBACA;AACI,WAAO,IAAIN,MAAJ,CAAW,KAAKC,CAAhB,EAAmB,KAAKC,CAAxB,EAA2B,KAAKC,MAAhC,CAAP;AACH,G;;AAED;;;;;;;;;mBAOAI,Q,qBAASN,C,EAAGC,C,EACZ;AACI,QAAI,KAAKC,MAAL,IAAe,CAAnB,EACA;AACI,aAAO,KAAP;AACH;;AAED,QAAMK,KAAK,KAAKL,MAAL,GAAc,KAAKA,MAA9B;AACA,QAAIM,KAAM,KAAKR,CAAL,GAASA,CAAnB;AACA,QAAIS,KAAM,KAAKR,CAAL,GAASA,CAAnB;;AAEAO,UAAMA,EAAN;AACAC,UAAMA,EAAN;;AAEA,WAAQD,KAAKC,EAAL,IAAWF,EAAnB;AACH,G;;AAED;;;;;;;mBAKAG,S,wBACA;AACI,WAAO,wBAAc,KAAKV,CAAL,GAAS,KAAKE,MAA5B,EAAoC,KAAKD,CAAL,GAAS,KAAKC,MAAlD,EAA0D,KAAKA,MAAL,GAAc,CAAxE,EAA2E,KAAKA,MAAL,GAAc,CAAzF,CAAP;AACH,G;;;;;kBAhFgBH,M","file":"Circle.js","sourcesContent":["import Rectangle from './Rectangle';\nimport { SHAPES } from '../../const';\n\n/**\n * The Circle object can be used to specify a hit area for displayObjects\n *\n * @class\n * @memberof PIXI\n */\nexport default class Circle\n{\n    /**\n     * @param {number} [x=0] - The X coordinate of the center of this circle\n     * @param {number} [y=0] - The Y coordinate of the center of this circle\n     * @param {number} [radius=0] - The radius of the circle\n     */\n    constructor(x = 0, y = 0, radius = 0)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = x;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = y;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.radius = radius;\n\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readOnly\n         * @default PIXI.SHAPES.CIRC\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.CIRC;\n    }\n\n    /**\n     * Creates a clone of this Circle instance\n     *\n     * @return {PIXI.Circle} a copy of the Circle\n     */\n    clone()\n    {\n        return new Circle(this.x, this.y, this.radius);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this circle\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coordinates are within this Circle\n     */\n    contains(x, y)\n    {\n        if (this.radius <= 0)\n        {\n            return false;\n        }\n\n        const r2 = this.radius * this.radius;\n        let dx = (this.x - x);\n        let dy = (this.y - y);\n\n        dx *= dx;\n        dy *= dy;\n\n        return (dx + dy <= r2);\n    }\n\n    /**\n    * Returns the framing rectangle of the circle as a Rectangle object\n    *\n    * @return {PIXI.Rectangle} the framing rectangle\n    */\n    getBounds()\n    {\n        return new Rectangle(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);\n    }\n}\n"]}