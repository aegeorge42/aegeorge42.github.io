{"version":3,"sources":["../../../../src/core/math/shapes/RoundedRectangle.js"],"names":["RoundedRectangle","x","y","width","height","radius","type","RREC","clone","contains","dx","dy","radius2"],"mappings":";;;;AAAA;;;;AAEA;;;;;;;IAOqBA,gB;AAEjB;;;;;;;AAOA,gCACA;AAAA,YADYC,CACZ,uEADgB,CAChB;AAAA,YADmBC,CACnB,uEADuB,CACvB;AAAA,YAD0BC,KAC1B,uEADkC,CAClC;AAAA,YADqCC,MACrC,uEAD8C,CAC9C;AAAA,YADiDC,MACjD,uEAD0D,EAC1D;;AAAA;;AACI;;;;AAIA,aAAKJ,CAAL,GAASA,CAAT;;AAEA;;;;AAIA,aAAKC,CAAL,GAASA,CAAT;;AAEA;;;;AAIA,aAAKC,KAAL,GAAaA,KAAb;;AAEA;;;;AAIA,aAAKC,MAAL,GAAcA,MAAd;;AAEA;;;;AAIA,aAAKC,MAAL,GAAcA,MAAd;;AAEA;;;;;;;;AAQA,aAAKC,IAAL,GAAY,cAAOC,IAAnB;AACH;;AAED;;;;;;;+BAKAC,K,oBACA;AACI,eAAO,IAAIR,gBAAJ,CAAqB,KAAKC,CAA1B,EAA6B,KAAKC,CAAlC,EAAqC,KAAKC,KAA1C,EAAiD,KAAKC,MAAtD,EAA8D,KAAKC,MAAnE,CAAP;AACH,K;;AAED;;;;;;;;;+BAOAI,Q,qBAASR,C,EAAGC,C,EACZ;AACI,YAAI,KAAKC,KAAL,IAAc,CAAd,IAAmB,KAAKC,MAAL,IAAe,CAAtC,EACA;AACI,mBAAO,KAAP;AACH;AACD,YAAIH,KAAK,KAAKA,CAAV,IAAeA,KAAK,KAAKA,CAAL,GAAS,KAAKE,KAAtC,EACA;AACI,gBAAID,KAAK,KAAKA,CAAV,IAAeA,KAAK,KAAKA,CAAL,GAAS,KAAKE,MAAtC,EACA;AACI,oBAAKF,KAAK,KAAKA,CAAL,GAAS,KAAKG,MAAnB,IAA6BH,KAAK,KAAKA,CAAL,GAAS,KAAKE,MAAd,GAAuB,KAAKC,MAA/D,IACAJ,KAAK,KAAKA,CAAL,GAAS,KAAKI,MAAnB,IAA6BJ,KAAK,KAAKA,CAAL,GAAS,KAAKE,KAAd,GAAsB,KAAKE,MADjE,EAEA;AACI,2BAAO,IAAP;AACH;AACD,oBAAIK,KAAKT,KAAK,KAAKA,CAAL,GAAS,KAAKI,MAAnB,CAAT;AACA,oBAAIM,KAAKT,KAAK,KAAKA,CAAL,GAAS,KAAKG,MAAnB,CAAT;AACA,oBAAMO,UAAU,KAAKP,MAAL,GAAc,KAAKA,MAAnC;;AAEA,oBAAKK,KAAKA,EAAN,GAAaC,KAAKA,EAAlB,IAAyBC,OAA7B,EACA;AACI,2BAAO,IAAP;AACH;AACDF,qBAAKT,KAAK,KAAKA,CAAL,GAAS,KAAKE,KAAd,GAAsB,KAAKE,MAAhC,CAAL;AACA,oBAAKK,KAAKA,EAAN,GAAaC,KAAKA,EAAlB,IAAyBC,OAA7B,EACA;AACI,2BAAO,IAAP;AACH;AACDD,qBAAKT,KAAK,KAAKA,CAAL,GAAS,KAAKE,MAAd,GAAuB,KAAKC,MAAjC,CAAL;AACA,oBAAKK,KAAKA,EAAN,GAAaC,KAAKA,EAAlB,IAAyBC,OAA7B,EACA;AACI,2BAAO,IAAP;AACH;AACDF,qBAAKT,KAAK,KAAKA,CAAL,GAAS,KAAKI,MAAnB,CAAL;AACA,oBAAKK,KAAKA,EAAN,GAAaC,KAAKA,EAAlB,IAAyBC,OAA7B,EACA;AACI,2BAAO,IAAP;AACH;AACJ;AACJ;;AAED,eAAO,KAAP;AACH,K;;;;;kBA/GgBZ,gB","file":"RoundedRectangle.js","sourcesContent":["import { SHAPES } from '../../const';\n\n/**\n * The Rounded Rectangle object is an area that has nice rounded corners, as indicated by its\n * top-left corner point (x, y) and by its width and its height and its radius.\n *\n * @class\n * @memberof PIXI\n */\nexport default class RoundedRectangle\n{\n    /**\n     * @param {number} [x=0] - The X coordinate of the upper-left corner of the rounded rectangle\n     * @param {number} [y=0] - The Y coordinate of the upper-left corner of the rounded rectangle\n     * @param {number} [width=0] - The overall width of this rounded rectangle\n     * @param {number} [height=0] - The overall height of this rounded rectangle\n     * @param {number} [radius=20] - Controls the radius of the rounded corners\n     */\n    constructor(x = 0, y = 0, width = 0, height = 0, radius = 20)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = x;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = y;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.width = width;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.height = height;\n\n        /**\n         * @member {number}\n         * @default 20\n         */\n        this.radius = radius;\n\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readonly\n         * @default PIXI.SHAPES.RREC\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.RREC;\n    }\n\n    /**\n     * Creates a clone of this Rounded Rectangle\n     *\n     * @return {PIXI.RoundedRectangle} a copy of the rounded rectangle\n     */\n    clone()\n    {\n        return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coordinates are within this Rounded Rectangle\n     */\n    contains(x, y)\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n        if (x >= this.x && x <= this.x + this.width)\n        {\n            if (y >= this.y && y <= this.y + this.height)\n            {\n                if ((y >= this.y + this.radius && y <= this.y + this.height - this.radius)\n                || (x >= this.x + this.radius && x <= this.x + this.width - this.radius))\n                {\n                    return true;\n                }\n                let dx = x - (this.x + this.radius);\n                let dy = y - (this.y + this.radius);\n                const radius2 = this.radius * this.radius;\n\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + this.width - this.radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dy = y - (this.y + this.height - this.radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + this.radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n}\n"]}