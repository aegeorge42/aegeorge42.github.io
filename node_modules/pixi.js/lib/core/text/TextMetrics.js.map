{"version":3,"sources":["../../../src/core/text/TextMetrics.js"],"names":["TextMetrics","text","style","width","height","lines","lineWidths","lineHeight","maxLineWidth","fontProperties","measureText","wordWrap","canvas","_canvas","undefined","font","toFontString","measureFont","context","getContext","outputText","split","Array","length","i","lineWidth","letterSpacing","Math","max","strokeThickness","dropShadow","dropShadowDistance","fontSize","leading","line","cache","whiteSpace","collapseSpaces","collapseNewlines","canPrependSpaces","wordWrapWidth","tokens","tokenize","token","isNewline","addLine","currIsBreakingSpace","isBreakingSpace","lastIsBreakingSpace","tokenWidth","getFromCache","canBreakWords","breakWords","characters","j","char","k","nextChar","lastChar","canBreakChars","characterWidth","isLastToken","newLine","trimRight","key","spacing","slice","_newlines","indexOf","charCodeAt","_breakingSpaces","push","index","_fonts","properties","_context","metricsString","METRICS_STRING","BASELINE_SYMBOL","ceil","baseline","BASELINE_MULTIPLIER","fillStyle","fillRect","textBaseline","fillText","imagedata","getImageData","data","pixels","idx","stop","ascent","descent","clearMetrics","document","createElement"],"mappings":"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","file":"TextMetrics.js","sourcesContent":["/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n *\n * ```js\n * let style = new PIXI.TextStyle({fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'})\n * let textMetrics = PIXI.TextMetrics.measureText('Your text', style)\n * ```\n *\n * @class\n * @memberOf PIXI\n */\nexport default class TextMetrics\n{\n    /**\n     * @param {string} text - the text that was measured\n     * @param {PIXI.TextStyle} style - the style that was measured\n     * @param {number} width - the measured width of the text\n     * @param {number} height - the measured height of the text\n     * @param {array} lines - an array of the lines of text broken by new lines and wrapping if specified in style\n     * @param {array} lineWidths - an array of the line widths for each line matched to `lines`\n     * @param {number} lineHeight - the measured line height for this style\n     * @param {number} maxLineWidth - the maximum line width for all measured lines\n     * @param {Object} fontProperties - the font properties object from TextMetrics.measureFont\n     */\n    constructor(text, style, width, height, lines, lineWidths, lineHeight, maxLineWidth, fontProperties)\n    {\n        this.text = text;\n        this.style = style;\n        this.width = width;\n        this.height = height;\n        this.lines = lines;\n        this.lineWidths = lineWidths;\n        this.lineHeight = lineHeight;\n        this.maxLineWidth = maxLineWidth;\n        this.fontProperties = fontProperties;\n    }\n\n    /**\n     * Measures the supplied string of text and returns a Rectangle.\n     *\n     * @param {string} text - the text to measure.\n     * @param {PIXI.TextStyle} style - the text style to use for measuring\n     * @param {boolean} [wordWrap] - optional override for if word-wrap should be applied to the text.\n     * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.\n     * @return {PIXI.TextMetrics} measured width and height of the text.\n     */\n    static measureText(text, style, wordWrap, canvas = TextMetrics._canvas)\n    {\n        wordWrap = (wordWrap === undefined || wordWrap === null) ? style.wordWrap : wordWrap;\n        const font = style.toFontString();\n        const fontProperties = TextMetrics.measureFont(font);\n        const context = canvas.getContext('2d');\n\n        context.font = font;\n\n        const outputText = wordWrap ? TextMetrics.wordWrap(text, style, canvas) : text;\n        const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n        const lineWidths = new Array(lines.length);\n        let maxLineWidth = 0;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const lineWidth = context.measureText(lines[i]).width + ((lines[i].length - 1) * style.letterSpacing);\n\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n        let width = maxLineWidth + style.strokeThickness;\n\n        if (style.dropShadow)\n        {\n            width += style.dropShadowDistance;\n        }\n\n        const lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n        let height = Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness)\n            + ((lines.length - 1) * (lineHeight + style.leading));\n\n        if (style.dropShadow)\n        {\n            height += style.dropShadowDistance;\n        }\n\n        return new TextMetrics(\n            text,\n            style,\n            width,\n            height,\n            lines,\n            lineWidths,\n            lineHeight + style.leading,\n            maxLineWidth,\n            fontProperties\n        );\n    }\n\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     *\n     * @private\n     * @param {string} text - String to apply word wrapping to\n     * @param {PIXI.TextStyle} style - the style to use when wrapping\n     * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.\n     * @return {string} New string with new lines applied where required\n     */\n    static wordWrap(text, style, canvas = TextMetrics._canvas)\n    {\n        const context = canvas.getContext('2d');\n\n        let width = 0;\n        let line = '';\n        let lines = '';\n\n        const cache = {};\n        const { letterSpacing, whiteSpace } = style;\n\n        // How to handle whitespaces\n        const collapseSpaces = TextMetrics.collapseSpaces(whiteSpace);\n        const collapseNewlines = TextMetrics.collapseNewlines(whiteSpace);\n\n        // whether or not spaces may be added to the beginning of lines\n        let canPrependSpaces = !collapseSpaces;\n\n        // There is letterSpacing after every char except the last one\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n        // so for convenience the above needs to be compared to width + 1 extra letterSpace\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n        // ________________________________________________\n        // And then the final space is simply no appended to each line\n        const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n\n        // break text into words, spaces and newline chars\n        const tokens = TextMetrics.tokenize(text);\n\n        for (let i = 0; i < tokens.length; i++)\n        {\n            // get the word, space or newlineChar\n            let token = tokens[i];\n\n            // if word is a new line\n            if (TextMetrics.isNewline(token))\n            {\n                // keep the new line\n                if (!collapseNewlines)\n                {\n                    lines += TextMetrics.addLine(line);\n                    canPrependSpaces = !collapseSpaces;\n                    line = '';\n                    width = 0;\n                    continue;\n                }\n\n                // if we should collapse new lines\n                // we simply convert it into a space\n                token = ' ';\n            }\n\n            // if we should collapse repeated whitespaces\n            if (collapseSpaces)\n            {\n                // check both this and the last tokens for spaces\n                const currIsBreakingSpace = TextMetrics.isBreakingSpace(token);\n                const lastIsBreakingSpace = TextMetrics.isBreakingSpace(line[line.length - 1]);\n\n                if (currIsBreakingSpace && lastIsBreakingSpace)\n                {\n                    continue;\n                }\n            }\n\n            // get word width from cache if possible\n            const tokenWidth = TextMetrics.getFromCache(token, letterSpacing, cache, context);\n\n            // word is longer than desired bounds\n            if (tokenWidth > wordWrapWidth)\n            {\n                // if we are not already at the beginning of a line\n                if (line !== '')\n                {\n                    // start newlines for overflow words\n                    lines += TextMetrics.addLine(line);\n                    line = '';\n                    width = 0;\n                }\n\n                // break large word over multiple lines\n                if (TextMetrics.canBreakWords(token, style.breakWords))\n                {\n                    // break word into characters\n                    const characters = token.split('');\n\n                    // loop the characters\n                    for (let j = 0; j < characters.length; j++)\n                    {\n                        let char = characters[j];\n\n                        let k = 1;\n                        // we are not at the end of the token\n\n                        while (characters[j + k])\n                        {\n                            const nextChar = characters[j + k];\n                            const lastChar = char[char.length - 1];\n\n                            // should not split chars\n                            if (!TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords))\n                            {\n                                // combine chars & move forward one\n                                char += nextChar;\n                            }\n                            else\n                            {\n                                break;\n                            }\n\n                            k++;\n                        }\n\n                        j += char.length - 1;\n\n                        const characterWidth = TextMetrics.getFromCache(char, letterSpacing, cache, context);\n\n                        if (characterWidth + width > wordWrapWidth)\n                        {\n                            lines += TextMetrics.addLine(line);\n                            canPrependSpaces = false;\n                            line = '';\n                            width = 0;\n                        }\n\n                        line += char;\n                        width += characterWidth;\n                    }\n                }\n\n                // run word out of the bounds\n                else\n                {\n                   // if there are words in this line already\n                    // finish that line and start a new one\n                    if (line.length > 0)\n                    {\n                        lines += TextMetrics.addLine(line);\n                        line = '';\n                        width = 0;\n                    }\n\n                    const isLastToken = i === tokens.length - 1;\n\n                    // give it its own line if it's not the end\n                    lines += TextMetrics.addLine(token, !isLastToken);\n                    canPrependSpaces = false;\n                    line = '';\n                    width = 0;\n                }\n            }\n\n            // word could fit\n            else\n            {\n                // word won't fit because of existing words\n                // start a new line\n                if (tokenWidth + width > wordWrapWidth)\n                {\n                    // if its a space we don't want it\n                    canPrependSpaces = false;\n\n                    // add a new line\n                    lines += TextMetrics.addLine(line);\n\n                    // start a new line\n                    line = '';\n                    width = 0;\n                }\n\n                // don't add spaces to the beginning of lines\n                if (line.length > 0 || !TextMetrics.isBreakingSpace(token) || canPrependSpaces)\n                {\n                    // add the word to the current line\n                    line += token;\n\n                    // update width counter\n                    width += tokenWidth;\n                }\n            }\n        }\n\n        lines += TextMetrics.addLine(line, false);\n\n        return lines;\n    }\n\n    /**\n     * Convienience function for logging each line added during the wordWrap\n     * method\n     *\n     * @private\n     * @param  {string}   line        - The line of text to add\n     * @param  {boolean}  newLine     - Add new line character to end\n     * @return {string}   A formatted line\n     */\n    static addLine(line, newLine = true)\n    {\n        line = TextMetrics.trimRight(line);\n\n        line = (newLine) ? `${line}\\n` : line;\n\n        return line;\n    }\n\n    /**\n     * Gets & sets the widths of calculated characters in a cache object\n     *\n     * @private\n     * @param  {string}                    key            The key\n     * @param  {number}                    letterSpacing  The letter spacing\n     * @param  {object}                    cache          The cache\n     * @param  {CanvasRenderingContext2D}  context        The canvas context\n     * @return {number}                    The from cache.\n     */\n    static getFromCache(key, letterSpacing, cache, context)\n    {\n        let width = cache[key];\n\n        if (width === undefined)\n        {\n            const spacing = ((key.length) * letterSpacing);\n\n            width = context.measureText(key).width + spacing;\n            cache[key] = width;\n        }\n\n        return width;\n    }\n\n    /**\n     * Determines whether we should collapse breaking spaces\n     *\n     * @private\n     * @param  {string}   whiteSpace  The TextStyle property whiteSpace\n     * @return {boolean}  should collapse\n     */\n    static collapseSpaces(whiteSpace)\n    {\n        return (whiteSpace === 'normal' || whiteSpace === 'pre-line');\n    }\n\n    /**\n     * Determines whether we should collapse newLine chars\n     *\n     * @private\n     * @param  {string}   whiteSpace  The white space\n     * @return {boolean}  should collapse\n     */\n    static collapseNewlines(whiteSpace)\n    {\n        return (whiteSpace === 'normal');\n    }\n\n    /**\n     * trims breaking whitespaces from string\n     *\n     * @private\n     * @param  {string}  text  The text\n     * @return {string}  trimmed string\n     */\n    static trimRight(text)\n    {\n        if (typeof text !== 'string')\n        {\n            return '';\n        }\n\n        for (let i = text.length - 1; i >= 0; i--)\n        {\n            const char = text[i];\n\n            if (!TextMetrics.isBreakingSpace(char))\n            {\n                break;\n            }\n\n            text = text.slice(0, -1);\n        }\n\n        return text;\n    }\n\n    /**\n     * Determines if char is a newline.\n     *\n     * @private\n     * @param  {string}  char  The character\n     * @return {boolean}  True if newline, False otherwise.\n     */\n    static isNewline(char)\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return (TextMetrics._newlines.indexOf(char.charCodeAt(0)) >= 0);\n    }\n\n    /**\n     * Determines if char is a breaking whitespace.\n     *\n     * @private\n     * @param  {string}  char  The character\n     * @return {boolean}  True if whitespace, False otherwise.\n     */\n    static isBreakingSpace(char)\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return (TextMetrics._breakingSpaces.indexOf(char.charCodeAt(0)) >= 0);\n    }\n\n    /**\n     * Splits a string into words, breaking-spaces and newLine characters\n     *\n     * @private\n     * @param  {string}  text       The text\n     * @return {array}  A tokenized array\n     */\n    static tokenize(text)\n    {\n        const tokens = [];\n        let token = '';\n\n        if (typeof text !== 'string')\n        {\n            return tokens;\n        }\n\n        for (let i = 0; i < text.length; i++)\n        {\n            const char = text[i];\n\n            if (TextMetrics.isBreakingSpace(char) || TextMetrics.isNewline(char))\n            {\n                if (token !== '')\n                {\n                    tokens.push(token);\n                    token = '';\n                }\n\n                tokens.push(char);\n\n                continue;\n            }\n\n            token += char;\n        }\n\n        if (token !== '')\n        {\n            tokens.push(token);\n        }\n\n        return tokens;\n    }\n\n    /**\n     * This method exists to be easily overridden\n     * It allows one to customise which words should break\n     * Examples are if the token is CJK or numbers.\n     * It must return a boolean.\n     *\n     * @private\n     * @param  {string}  token       The token\n     * @param  {boolean}  breakWords  The style attr break words\n     * @return {boolean} whether to break word or not\n     */\n    static canBreakWords(token, breakWords)\n    {\n        return breakWords;\n    }\n\n    /**\n     * This method exists to be easily overridden\n     * It allows one to determine whether a pair of characters\n     * should be broken by newlines\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     *\n     * @private\n     * @param  {string}  char      The character\n     * @param  {string}  nextChar  The next character\n     * @param  {string}  token     The token/word the characters are from\n     * @param  {number}  index     The index in the token of the char\n     * @param  {boolean}  breakWords  The style attr break words\n     * @return {boolean} whether to break word or not\n     */\n    static canBreakChars(char, nextChar, token, index, breakWords) // eslint-disable-line no-unused-vars\n    {\n        return true;\n    }\n\n    /**\n     * Calculates the ascent, descent and fontSize of a given font-style\n     *\n     * @static\n     * @param {string} font - String representing the style of the font\n     * @return {PIXI.TextMetrics~FontMetrics} Font properties object\n     */\n    static measureFont(font)\n    {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (TextMetrics._fonts[font])\n        {\n            return TextMetrics._fonts[font];\n        }\n\n        const properties = {};\n\n        const canvas = TextMetrics._canvas;\n        const context = TextMetrics._context;\n\n        context.font = font;\n\n        const metricsString = TextMetrics.METRICS_STRING + TextMetrics.BASELINE_SYMBOL;\n        const width = Math.ceil(context.measureText(metricsString).width);\n        let baseline = Math.ceil(context.measureText(TextMetrics.BASELINE_SYMBOL).width);\n        const height = 2 * baseline;\n\n        baseline = baseline * TextMetrics.BASELINE_MULTIPLIER | 0;\n\n        canvas.width = width;\n        canvas.height = height;\n\n        context.fillStyle = '#f00';\n        context.fillRect(0, 0, width, height);\n\n        context.font = font;\n\n        context.textBaseline = 'alphabetic';\n        context.fillStyle = '#000';\n        context.fillText(metricsString, 0, baseline);\n\n        const imagedata = context.getImageData(0, 0, width, height).data;\n        const pixels = imagedata.length;\n        const line = width * 4;\n\n        let i = 0;\n        let idx = 0;\n        let stop = false;\n\n        // ascent. scan from top to bottom until we find a non red pixel\n        for (i = 0; i < baseline; ++i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n            if (!stop)\n            {\n                idx += line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.ascent = baseline - i;\n\n        idx = pixels - line;\n        stop = false;\n\n        // descent. scan from bottom to top until we find a non red pixel\n        for (i = height; i > baseline; --i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n\n            if (!stop)\n            {\n                idx -= line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.descent = i - baseline;\n        properties.fontSize = properties.ascent + properties.descent;\n\n        TextMetrics._fonts[font] = properties;\n\n        return properties;\n    }\n\n    /**\n     * Clear font metrics in metrics cache.\n     *\n     * @static\n     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n     */\n    static clearMetrics(font = '')\n    {\n        if (font)\n        {\n            delete TextMetrics._fonts[font];\n        }\n        else\n        {\n            TextMetrics._fonts = {};\n        }\n    }\n}\n\n/**\n * Internal return object for {@link PIXI.TextMetrics.measureFont `TextMetrics.measureFont`}.\n * @class FontMetrics\n * @memberof PIXI.TextMetrics~\n * @property {number} ascent - The ascent distance\n * @property {number} descent - The descent distance\n * @property {number} fontSize - Font size from ascent to descent\n */\n\nconst canvas = document.createElement('canvas');\n\ncanvas.width = canvas.height = 10;\n\n/**\n * Cached canvas element for measuring text\n * @memberof PIXI.TextMetrics\n * @type {HTMLCanvasElement}\n * @private\n */\nTextMetrics._canvas = canvas;\n\n/**\n * Cache for context to use.\n * @memberof PIXI.TextMetrics\n * @type {CanvasRenderingContext2D}\n * @private\n */\nTextMetrics._context = canvas.getContext('2d');\n\n/**\n * Cache of PIXI.TextMetrics~FontMetrics objects.\n * @memberof PIXI.TextMetrics\n * @type {Object}\n * @private\n */\nTextMetrics._fonts = {};\n\n/**\n * String used for calculate font metrics.\n * @static\n * @memberof PIXI.TextMetrics\n * @name METRICS_STRING\n * @type {string}\n * @default |Éq\n */\nTextMetrics.METRICS_STRING = '|Éq';\n\n/**\n * Baseline symbol for calculate font metrics.\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_SYMBOL\n * @type {string}\n * @default M\n */\nTextMetrics.BASELINE_SYMBOL = 'M';\n\n/**\n * Baseline multiplier for calculate font metrics.\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_MULTIPLIER\n * @type {number}\n * @default 1.4\n */\nTextMetrics.BASELINE_MULTIPLIER = 1.4;\n\n/**\n * Cache of new line chars.\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._newlines = [\n    0x000A, // line feed\n    0x000D, // carriage return\n];\n\n/**\n * Cache of breaking spaces.\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._breakingSpaces = [\n    0x0009, // character tabulation\n    0x0020, // space\n    0x2000, // en quad\n    0x2001, // em quad\n    0x2002, // en space\n    0x2003, // em space\n    0x2004, // three-per-em space\n    0x2005, // four-per-em space\n    0x2006, // six-per-em space\n    0x2008, // punctuation space\n    0x2009, // thin space\n    0x200A, // hair space\n    0x205F, // medium mathematical space\n    0x3000, // ideographic space\n];\n"]}