{"version":3,"sources":["../../../src/core/display/Bounds.js"],"names":["Bounds","minX","Infinity","minY","maxX","maxY","rect","isEmpty","clear","updateID","getRectangle","EMPTY","x","y","width","height","addPoint","point","Math","min","max","addQuad","vertices","addFrame","transform","x0","y0","x1","y1","matrix","worldTransform","a","b","c","d","tx","ty","addVertices","beginOffset","endOffset","i","rawX","rawY","addBounds","bounds","addBoundsMask","mask","_minX","_minY","_maxX","_maxY","addBoundsArea","area"],"mappings":"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","file":"Bounds.js","sourcesContent":["import { Rectangle } from '../math';\n\n/**\n * 'Builder' pattern for bounds rectangles\n * Axis-Aligned Bounding Box\n * It is not a shape! Its mutable thing, no 'EMPTY' or that kind of problems\n *\n * @class\n * @memberof PIXI\n */\nexport default class Bounds\n{\n    /**\n     *\n     */\n    constructor()\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.minX = Infinity;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.minY = Infinity;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.maxX = -Infinity;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.maxY = -Infinity;\n\n        this.rect = null;\n    }\n\n    /**\n     * Checks if bounds are empty.\n     *\n     * @return {boolean} True if empty.\n     */\n    isEmpty()\n    {\n        return this.minX > this.maxX || this.minY > this.maxY;\n    }\n\n    /**\n     * Clears the bounds and resets.\n     *\n     */\n    clear()\n    {\n        this.updateID++;\n\n        this.minX = Infinity;\n        this.minY = Infinity;\n        this.maxX = -Infinity;\n        this.maxY = -Infinity;\n    }\n\n    /**\n     * Can return Rectangle.EMPTY constant, either construct new rectangle, either use your rectangle\n     * It is not guaranteed that it will return tempRect\n     *\n     * @param {PIXI.Rectangle} rect - temporary object will be used if AABB is not empty\n     * @returns {PIXI.Rectangle} A rectangle of the bounds\n     */\n    getRectangle(rect)\n    {\n        if (this.minX > this.maxX || this.minY > this.maxY)\n        {\n            return Rectangle.EMPTY;\n        }\n\n        rect = rect || new Rectangle(0, 0, 1, 1);\n\n        rect.x = this.minX;\n        rect.y = this.minY;\n        rect.width = this.maxX - this.minX;\n        rect.height = this.maxY - this.minY;\n\n        return rect;\n    }\n\n    /**\n     * This function should be inlined when its possible.\n     *\n     * @param {PIXI.Point} point - The point to add.\n     */\n    addPoint(point)\n    {\n        this.minX = Math.min(this.minX, point.x);\n        this.maxX = Math.max(this.maxX, point.x);\n        this.minY = Math.min(this.minY, point.y);\n        this.maxY = Math.max(this.maxY, point.y);\n    }\n\n    /**\n     * Adds a quad, not transformed\n     *\n     * @param {Float32Array} vertices - The verts to add.\n     */\n    addQuad(vertices)\n    {\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        let x = vertices[0];\n        let y = vertices[1];\n\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = vertices[2];\n        y = vertices[3];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = vertices[4];\n        y = vertices[5];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = vertices[6];\n        y = vertices[7];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Adds sprite frame, transformed.\n     *\n     * @param {PIXI.TransformBase} transform - TODO\n     * @param {number} x0 - TODO\n     * @param {number} y0 - TODO\n     * @param {number} x1 - TODO\n     * @param {number} y1 - TODO\n     */\n    addFrame(transform, x0, y0, x1, y1)\n    {\n        const matrix = transform.worldTransform;\n        const a = matrix.a;\n        const b = matrix.b;\n        const c = matrix.c;\n        const d = matrix.d;\n        const tx = matrix.tx;\n        const ty = matrix.ty;\n\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        let x = (a * x0) + (c * y0) + tx;\n        let y = (b * x0) + (d * y0) + ty;\n\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = (a * x1) + (c * y0) + tx;\n        y = (b * x1) + (d * y0) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = (a * x0) + (c * y1) + tx;\n        y = (b * x0) + (d * y1) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = (a * x1) + (c * y1) + tx;\n        y = (b * x1) + (d * y1) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Add an array of vertices\n     *\n     * @param {PIXI.TransformBase} transform - TODO\n     * @param {Float32Array} vertices - TODO\n     * @param {number} beginOffset - TODO\n     * @param {number} endOffset - TODO\n     */\n    addVertices(transform, vertices, beginOffset, endOffset)\n    {\n        const matrix = transform.worldTransform;\n        const a = matrix.a;\n        const b = matrix.b;\n        const c = matrix.c;\n        const d = matrix.d;\n        const tx = matrix.tx;\n        const ty = matrix.ty;\n\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        for (let i = beginOffset; i < endOffset; i += 2)\n        {\n            const rawX = vertices[i];\n            const rawY = vertices[i + 1];\n            const x = (a * rawX) + (c * rawY) + tx;\n            const y = (d * rawY) + (b * rawX) + ty;\n\n            minX = x < minX ? x : minX;\n            minY = y < minY ? y : minY;\n            maxX = x > maxX ? x : maxX;\n            maxY = y > maxY ? y : maxY;\n        }\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Adds other Bounds\n     *\n     * @param {PIXI.Bounds} bounds - TODO\n     */\n    addBounds(bounds)\n    {\n        const minX = this.minX;\n        const minY = this.minY;\n        const maxX = this.maxX;\n        const maxY = this.maxY;\n\n        this.minX = bounds.minX < minX ? bounds.minX : minX;\n        this.minY = bounds.minY < minY ? bounds.minY : minY;\n        this.maxX = bounds.maxX > maxX ? bounds.maxX : maxX;\n        this.maxY = bounds.maxY > maxY ? bounds.maxY : maxY;\n    }\n\n    /**\n     * Adds other Bounds, masked with Bounds\n     *\n     * @param {PIXI.Bounds} bounds - TODO\n     * @param {PIXI.Bounds} mask - TODO\n     */\n    addBoundsMask(bounds, mask)\n    {\n        const _minX = bounds.minX > mask.minX ? bounds.minX : mask.minX;\n        const _minY = bounds.minY > mask.minY ? bounds.minY : mask.minY;\n        const _maxX = bounds.maxX < mask.maxX ? bounds.maxX : mask.maxX;\n        const _maxY = bounds.maxY < mask.maxY ? bounds.maxY : mask.maxY;\n\n        if (_minX <= _maxX && _minY <= _maxY)\n        {\n            const minX = this.minX;\n            const minY = this.minY;\n            const maxX = this.maxX;\n            const maxY = this.maxY;\n\n            this.minX = _minX < minX ? _minX : minX;\n            this.minY = _minY < minY ? _minY : minY;\n            this.maxX = _maxX > maxX ? _maxX : maxX;\n            this.maxY = _maxY > maxY ? _maxY : maxY;\n        }\n    }\n\n    /**\n     * Adds other Bounds, masked with Rectangle\n     *\n     * @param {PIXI.Bounds} bounds - TODO\n     * @param {PIXI.Rectangle} area - TODO\n     */\n    addBoundsArea(bounds, area)\n    {\n        const _minX = bounds.minX > area.x ? bounds.minX : area.x;\n        const _minY = bounds.minY > area.y ? bounds.minY : area.y;\n        const _maxX = bounds.maxX < area.x + area.width ? bounds.maxX : (area.x + area.width);\n        const _maxY = bounds.maxY < area.y + area.height ? bounds.maxY : (area.y + area.height);\n\n        if (_minX <= _maxX && _minY <= _maxY)\n        {\n            const minX = this.minX;\n            const minY = this.minY;\n            const maxX = this.maxX;\n            const maxY = this.maxY;\n\n            this.minX = _minX < minX ? _minX : minX;\n            this.minY = _minY < minY ? _minY : minY;\n            this.maxX = _maxX > maxX ? _maxX : maxX;\n            this.maxY = _maxY > maxY ? _maxY : maxY;\n        }\n    }\n}\n"]}