{"version":3,"sources":["../../../src/core/display/DisplayObject.js"],"names":["DisplayObject","TransformClass","TRANSFORM_MODE","STATIC","tempDisplayObjectParent","transform","alpha","visible","renderable","parent","worldAlpha","filterArea","_filters","_enabledFilters","_bounds","_boundsID","_lastBoundsID","_boundsRect","_localBoundsRect","_mask","_destroyed","updateTransform","updateID","_recursivePostUpdateTransform","_tempDisplayObjectParent","getBounds","skipUpdate","rect","calculateBounds","getRectangle","getLocalBounds","transformRef","parentRef","bounds","toGlobal","position","point","displayObjectUpdateTransform","worldTransform","apply","toLocal","from","applyInverse","renderWebGL","renderer","renderCanvas","setParent","container","addChild","Error","setTransform","x","y","scaleX","scaleY","rotation","skewX","skewY","pivotX","pivotY","scale","skew","pivot","destroy","removeAllListeners","removeChild","_currentBounds","interactive","interactiveChildren","value","localTransform","copy","item","isMask","slice","prototype"],"mappings":"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","file":"DisplayObject.js","sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { TRANSFORM_MODE } from '../const';\nimport settings from '../settings';\nimport TransformStatic from './TransformStatic';\nimport Transform from './Transform';\nimport Bounds from './Bounds';\nimport { Rectangle } from '../math';\n// _tempDisplayObjectParent = new DisplayObject();\n\n/**\n * The base class for all objects that are rendered on the screen.\n * This is an abstract class and should not be used on its own rather it should be extended.\n *\n * @class\n * @extends EventEmitter\n * @memberof PIXI\n */\nexport default class DisplayObject extends EventEmitter\n{\n    /**\n     *\n     */\n    constructor()\n    {\n        super();\n\n        const TransformClass = settings.TRANSFORM_MODE === TRANSFORM_MODE.STATIC ? TransformStatic : Transform;\n\n        this.tempDisplayObjectParent = null;\n\n        // TODO: need to create Transform from factory\n        /**\n         * World transform and local transform of this object.\n         * This will become read-only later, please do not assign anything there unless you know what are you doing\n         *\n         * @member {PIXI.TransformBase}\n         */\n        this.transform = new TransformClass();\n\n        /**\n         * The opacity of the object.\n         *\n         * @member {number}\n         */\n        this.alpha = 1;\n\n        /**\n         * The visibility of the object. If false the object will not be drawn, and\n         * the updateTransform function will not be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually\n         *\n         * @member {boolean}\n         */\n        this.visible = true;\n\n        /**\n         * Can this object be rendered, if false the object will not be drawn but the updateTransform\n         * methods will still be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds manually\n         *\n         * @member {boolean}\n         */\n        this.renderable = true;\n\n        /**\n         * The display object container that contains this display object.\n         *\n         * @member {PIXI.Container}\n         * @readonly\n         */\n        this.parent = null;\n\n        /**\n         * The multiplied alpha of the displayObject\n         *\n         * @member {number}\n         * @readonly\n         */\n        this.worldAlpha = 1;\n\n        /**\n         * The area the filter is applied to. This is used as more of an optimisation\n         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle\n         *\n         * Also works as an interaction mask\n         *\n         * @member {PIXI.Rectangle}\n         */\n        this.filterArea = null;\n\n        this._filters = null;\n        this._enabledFilters = null;\n\n        /**\n         * The bounds object, this is used to calculate and store the bounds of the displayObject\n         *\n         * @member {PIXI.Rectangle}\n         * @private\n         */\n        this._bounds = new Bounds();\n        this._boundsID = 0;\n        this._lastBoundsID = -1;\n        this._boundsRect = null;\n        this._localBoundsRect = null;\n\n        /**\n         * The original, cached mask of the object\n         *\n         * @member {PIXI.Graphics|PIXI.Sprite}\n         * @private\n         */\n        this._mask = null;\n\n        /**\n         * If the object has been destroyed via destroy(). If true, it should not be used.\n         *\n         * @member {boolean}\n         * @private\n         * @readonly\n         */\n        this._destroyed = false;\n\n        /**\n         * Fired when this DisplayObject is added to a Container.\n         *\n         * @event PIXI.DisplayObject#added\n         * @param {PIXI.Container} container - The container added to.\n         */\n\n        /**\n         * Fired when this DisplayObject is removed from a Container.\n         *\n         * @event PIXI.DisplayObject#removed\n         * @param {PIXI.Container} container - The container removed from.\n         */\n    }\n\n    /**\n     * @private\n     * @member {PIXI.DisplayObject}\n     */\n    get _tempDisplayObjectParent()\n    {\n        if (this.tempDisplayObjectParent === null)\n        {\n            this.tempDisplayObjectParent = new DisplayObject();\n        }\n\n        return this.tempDisplayObjectParent;\n    }\n\n    /**\n     * Updates the object transform for rendering\n     *\n     * TODO - Optimization pass!\n     */\n    updateTransform()\n    {\n        this.transform.updateTransform(this.parent.transform);\n        // multiply the alphas..\n        this.worldAlpha = this.alpha * this.parent.worldAlpha;\n\n        this._bounds.updateID++;\n    }\n\n    /**\n     * recursively updates transform of all objects from the root to this one\n     * internal function for toLocal()\n     */\n    _recursivePostUpdateTransform()\n    {\n        if (this.parent)\n        {\n            this.parent._recursivePostUpdateTransform();\n            this.transform.updateTransform(this.parent.transform);\n        }\n        else\n        {\n            this.transform.updateTransform(this._tempDisplayObjectParent.transform);\n        }\n    }\n\n    /**\n     * Retrieves the bounds of the displayObject as a rectangle object.\n     *\n     * @param {boolean} skipUpdate - setting to true will stop the transforms of the scene graph from\n     *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n     *  nice performance boost\n     * @param {PIXI.Rectangle} rect - Optional rectangle to store the result of the bounds calculation\n     * @return {PIXI.Rectangle} the rectangular bounding area\n     */\n    getBounds(skipUpdate, rect)\n    {\n        if (!skipUpdate)\n        {\n            if (!this.parent)\n            {\n                this.parent = this._tempDisplayObjectParent;\n                this.updateTransform();\n                this.parent = null;\n            }\n            else\n            {\n                this._recursivePostUpdateTransform();\n                this.updateTransform();\n            }\n        }\n\n        if (this._boundsID !== this._lastBoundsID)\n        {\n            this.calculateBounds();\n        }\n\n        if (!rect)\n        {\n            if (!this._boundsRect)\n            {\n                this._boundsRect = new Rectangle();\n            }\n\n            rect = this._boundsRect;\n        }\n\n        return this._bounds.getRectangle(rect);\n    }\n\n    /**\n     * Retrieves the local bounds of the displayObject as a rectangle object\n     *\n     * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation\n     * @return {PIXI.Rectangle} the rectangular bounding area\n     */\n    getLocalBounds(rect)\n    {\n        const transformRef = this.transform;\n        const parentRef = this.parent;\n\n        this.parent = null;\n        this.transform = this._tempDisplayObjectParent.transform;\n\n        if (!rect)\n        {\n            if (!this._localBoundsRect)\n            {\n                this._localBoundsRect = new Rectangle();\n            }\n\n            rect = this._localBoundsRect;\n        }\n\n        const bounds = this.getBounds(false, rect);\n\n        this.parent = parentRef;\n        this.transform = transformRef;\n\n        return bounds;\n    }\n\n    /**\n     * Calculates the global position of the display object\n     *\n     * @param {PIXI.Point} position - The world origin to calculate from\n     * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n     *  (otherwise will create a new Point)\n     * @param {boolean} [skipUpdate=false] - Should we skip the update transform.\n     * @return {PIXI.Point} A point object representing the position of this object\n     */\n    toGlobal(position, point, skipUpdate = false)\n    {\n        if (!skipUpdate)\n        {\n            this._recursivePostUpdateTransform();\n\n            // this parent check is for just in case the item is a root object.\n            // If it is we need to give it a temporary parent so that displayObjectUpdateTransform works correctly\n            // this is mainly to avoid a parent check in the main loop. Every little helps for performance :)\n            if (!this.parent)\n            {\n                this.parent = this._tempDisplayObjectParent;\n                this.displayObjectUpdateTransform();\n                this.parent = null;\n            }\n            else\n            {\n                this.displayObjectUpdateTransform();\n            }\n        }\n\n        // don't need to update the lot\n        return this.worldTransform.apply(position, point);\n    }\n\n    /**\n     * Calculates the local position of the display object relative to another point\n     *\n     * @param {PIXI.Point} position - The world origin to calculate from\n     * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from\n     * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n     *  (otherwise will create a new Point)\n     * @param {boolean} [skipUpdate=false] - Should we skip the update transform\n     * @return {PIXI.Point} A point object representing the position of this object\n     */\n    toLocal(position, from, point, skipUpdate)\n    {\n        if (from)\n        {\n            position = from.toGlobal(position, point, skipUpdate);\n        }\n\n        if (!skipUpdate)\n        {\n            this._recursivePostUpdateTransform();\n\n            // this parent check is for just in case the item is a root object.\n            // If it is we need to give it a temporary parent so that displayObjectUpdateTransform works correctly\n            // this is mainly to avoid a parent check in the main loop. Every little helps for performance :)\n            if (!this.parent)\n            {\n                this.parent = this._tempDisplayObjectParent;\n                this.displayObjectUpdateTransform();\n                this.parent = null;\n            }\n            else\n            {\n                this.displayObjectUpdateTransform();\n            }\n        }\n\n        // simply apply the matrix..\n        return this.worldTransform.applyInverse(position, point);\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @param {PIXI.WebGLRenderer} renderer - The renderer\n     */\n    renderWebGL(renderer) // eslint-disable-line no-unused-vars\n    {\n        // OVERWRITE;\n    }\n\n    /**\n     * Renders the object using the Canvas renderer\n     *\n     * @param {PIXI.CanvasRenderer} renderer - The renderer\n     */\n    renderCanvas(renderer) // eslint-disable-line no-unused-vars\n    {\n        // OVERWRITE;\n    }\n\n    /**\n     * Set the parent Container of this DisplayObject\n     *\n     * @param {PIXI.Container} container - The Container to add this DisplayObject to\n     * @return {PIXI.Container} The Container that this DisplayObject was added to\n     */\n    setParent(container)\n    {\n        if (!container || !container.addChild)\n        {\n            throw new Error('setParent: Argument must be a Container');\n        }\n\n        container.addChild(this);\n\n        return container;\n    }\n\n    /**\n     * Convenience function to set the position, scale, skew and pivot at once.\n     *\n     * @param {number} [x=0] - The X position\n     * @param {number} [y=0] - The Y position\n     * @param {number} [scaleX=1] - The X scale value\n     * @param {number} [scaleY=1] - The Y scale value\n     * @param {number} [rotation=0] - The rotation\n     * @param {number} [skewX=0] - The X skew value\n     * @param {number} [skewY=0] - The Y skew value\n     * @param {number} [pivotX=0] - The X pivot value\n     * @param {number} [pivotY=0] - The Y pivot value\n     * @return {PIXI.DisplayObject} The DisplayObject instance\n     */\n    setTransform(x = 0, y = 0, scaleX = 1, scaleY = 1, rotation = 0, skewX = 0, skewY = 0, pivotX = 0, pivotY = 0)\n    {\n        this.position.x = x;\n        this.position.y = y;\n        this.scale.x = !scaleX ? 1 : scaleX;\n        this.scale.y = !scaleY ? 1 : scaleY;\n        this.rotation = rotation;\n        this.skew.x = skewX;\n        this.skew.y = skewY;\n        this.pivot.x = pivotX;\n        this.pivot.y = pivotY;\n\n        return this;\n    }\n\n    /**\n     * Base destroy method for generic display objects. This will automatically\n     * remove the display object from its parent Container as well as remove\n     * all current event listeners and internal references. Do not use a DisplayObject\n     * after calling `destroy`.\n     *\n     */\n    destroy()\n    {\n        this.removeAllListeners();\n        if (this.parent)\n        {\n            this.parent.removeChild(this);\n        }\n        this.transform = null;\n\n        this.parent = null;\n\n        this._bounds = null;\n        this._currentBounds = null;\n        this._mask = null;\n\n        this.filterArea = null;\n\n        this.interactive = false;\n        this.interactiveChildren = false;\n\n        this._destroyed = true;\n    }\n\n    /**\n     * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n     * An alias to position.x\n     *\n     * @member {number}\n     */\n    get x()\n    {\n        return this.position.x;\n    }\n\n    set x(value) // eslint-disable-line require-jsdoc\n    {\n        this.transform.position.x = value;\n    }\n\n    /**\n     * The position of the displayObject on the y axis relative to the local coordinates of the parent.\n     * An alias to position.y\n     *\n     * @member {number}\n     */\n    get y()\n    {\n        return this.position.y;\n    }\n\n    set y(value) // eslint-disable-line require-jsdoc\n    {\n        this.transform.position.y = value;\n    }\n\n    /**\n     * Current transform of the object based on world (parent) factors\n     *\n     * @member {PIXI.Matrix}\n     * @readonly\n     */\n    get worldTransform()\n    {\n        return this.transform.worldTransform;\n    }\n\n    /**\n     * Current transform of the object based on local factors: position, scale, other stuff\n     *\n     * @member {PIXI.Matrix}\n     * @readonly\n     */\n    get localTransform()\n    {\n        return this.transform.localTransform;\n    }\n\n    /**\n     * The coordinate of the object relative to the local coordinates of the parent.\n     * Assignment by value since pixi-v4.\n     *\n     * @member {PIXI.Point|PIXI.ObservablePoint}\n     */\n    get position()\n    {\n        return this.transform.position;\n    }\n\n    set position(value) // eslint-disable-line require-jsdoc\n    {\n        this.transform.position.copy(value);\n    }\n\n    /**\n     * The scale factor of the object.\n     * Assignment by value since pixi-v4.\n     *\n     * @member {PIXI.Point|PIXI.ObservablePoint}\n     */\n    get scale()\n    {\n        return this.transform.scale;\n    }\n\n    set scale(value) // eslint-disable-line require-jsdoc\n    {\n        this.transform.scale.copy(value);\n    }\n\n    /**\n     * The pivot point of the displayObject that it rotates around.\n     * Assignment by value since pixi-v4.\n     *\n     * @member {PIXI.Point|PIXI.ObservablePoint}\n     */\n    get pivot()\n    {\n        return this.transform.pivot;\n    }\n\n    set pivot(value) // eslint-disable-line require-jsdoc\n    {\n        this.transform.pivot.copy(value);\n    }\n\n    /**\n     * The skew factor for the object in radians.\n     * Assignment by value since pixi-v4.\n     *\n     * @member {PIXI.ObservablePoint}\n     */\n    get skew()\n    {\n        return this.transform.skew;\n    }\n\n    set skew(value) // eslint-disable-line require-jsdoc\n    {\n        this.transform.skew.copy(value);\n    }\n\n    /**\n     * The rotation of the object in radians.\n     *\n     * @member {number}\n     */\n    get rotation()\n    {\n        return this.transform.rotation;\n    }\n\n    set rotation(value) // eslint-disable-line require-jsdoc\n    {\n        this.transform.rotation = value;\n    }\n\n    /**\n     * Indicates if the object is globally visible.\n     *\n     * @member {boolean}\n     * @readonly\n     */\n    get worldVisible()\n    {\n        let item = this;\n\n        do\n        {\n            if (!item.visible)\n            {\n                return false;\n            }\n\n            item = item.parent;\n        } while (item);\n\n        return true;\n    }\n\n    /**\n     * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n     * object to the shape of the mask applied to it. In PIXI a regular mask must be a\n     * PIXI.Graphics or a PIXI.Sprite object. This allows for much faster masking in canvas as it\n     * utilises shape clipping. To remove a mask, set this property to null.\n     *\n     * @todo For the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.\n     *\n     * @member {PIXI.Graphics|PIXI.Sprite}\n     */\n    get mask()\n    {\n        return this._mask;\n    }\n\n    set mask(value) // eslint-disable-line require-jsdoc\n    {\n        if (this._mask)\n        {\n            this._mask.renderable = true;\n            this._mask.isMask = false;\n        }\n\n        this._mask = value;\n\n        if (this._mask)\n        {\n            this._mask.renderable = false;\n            this._mask.isMask = true;\n        }\n    }\n\n    /**\n     * Sets the filters for the displayObject.\n     * * IMPORTANT: This is a webGL only feature and will be ignored by the canvas renderer.\n     * To remove filters simply set this property to 'null'\n     *\n     * @member {PIXI.Filter[]}\n     */\n    get filters()\n    {\n        return this._filters && this._filters.slice();\n    }\n\n    set filters(value) // eslint-disable-line require-jsdoc\n    {\n        this._filters = value && value.slice();\n    }\n}\n\n// performance increase to avoid using call.. (10x faster)\nDisplayObject.prototype.displayObjectUpdateTransform = DisplayObject.prototype.updateTransform;\n"]}