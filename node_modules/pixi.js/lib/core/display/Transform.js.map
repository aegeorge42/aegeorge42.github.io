{"version":3,"sources":["../../../src/core/display/Transform.js"],"names":["Transform","position","scale","skew","updateSkew","pivot","_rotation","_cx","_sx","_cy","_sy","Math","cos","_y","sin","_x","updateLocalTransform","lt","localTransform","a","x","b","c","y","d","tx","ty","updateTransform","parentTransform","pt","worldTransform","wt","_worldID","setFromMatrix","matrix","decompose","value"],"mappings":"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","file":"Transform.js","sourcesContent":["import { Point, ObservablePoint } from '../math';\nimport TransformBase from './TransformBase';\n\n/**\n * Generic class to deal with traditional 2D matrix transforms\n * local transformation is calculated from position,scale,skew and rotation\n *\n * @class\n * @extends PIXI.TransformBase\n * @memberof PIXI\n */\nexport default class Transform extends TransformBase\n{\n    /**\n     *\n     */\n    constructor()\n    {\n        super();\n\n         /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         *\n         * @member {PIXI.Point}\n         */\n        this.position = new Point(0, 0);\n\n        /**\n         * The scale factor of the object.\n         *\n         * @member {PIXI.Point}\n         */\n        this.scale = new Point(1, 1);\n\n        /**\n         * The skew amount, on the x and y axis.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.skew = new ObservablePoint(this.updateSkew, this, 0, 0);\n\n        /**\n         * The pivot point of the displayObject that it rotates around.\n         *\n         * @member {PIXI.Point}\n         */\n        this.pivot = new Point(0, 0);\n\n        /**\n         * The rotation value of the object, in radians\n         *\n         * @member {Number}\n         * @private\n         */\n        this._rotation = 0;\n\n        this._cx = 1; // cos rotation + skewY;\n        this._sx = 0; // sin rotation + skewY;\n        this._cy = 0; // cos rotation + Math.PI/2 - skewX;\n        this._sy = 1; // sin rotation + Math.PI/2 - skewX;\n    }\n\n    /**\n     * Updates the skew values when the skew or rotation changes.\n     *\n     * @private\n     */\n    updateSkew()\n    {\n        this._cx = Math.cos(this._rotation + this.skew._y);\n        this._sx = Math.sin(this._rotation + this.skew._y);\n        this._cy = -Math.sin(this._rotation - this.skew._x); // cos, added PI/2\n        this._sy = Math.cos(this._rotation - this.skew._x); // sin, added PI/2\n    }\n\n    /**\n     * Updates only local matrix\n     */\n    updateLocalTransform()\n    {\n        const lt = this.localTransform;\n\n        lt.a = this._cx * this.scale.x;\n        lt.b = this._sx * this.scale.x;\n        lt.c = this._cy * this.scale.y;\n        lt.d = this._sy * this.scale.y;\n\n        lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n        lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n    }\n\n    /**\n     * Updates the values of the object and applies the parent's transform.\n     *\n     * @param {PIXI.Transform} parentTransform - The transform of the parent of this object\n     */\n    updateTransform(parentTransform)\n    {\n        const lt = this.localTransform;\n\n        lt.a = this._cx * this.scale.x;\n        lt.b = this._sx * this.scale.x;\n        lt.c = this._cy * this.scale.y;\n        lt.d = this._sy * this.scale.y;\n\n        lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n        lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n\n        // concat the parent matrix with the objects transform.\n        const pt = parentTransform.worldTransform;\n        const wt = this.worldTransform;\n\n        wt.a = (lt.a * pt.a) + (lt.b * pt.c);\n        wt.b = (lt.a * pt.b) + (lt.b * pt.d);\n        wt.c = (lt.c * pt.a) + (lt.d * pt.c);\n        wt.d = (lt.c * pt.b) + (lt.d * pt.d);\n        wt.tx = (lt.tx * pt.a) + (lt.ty * pt.c) + pt.tx;\n        wt.ty = (lt.tx * pt.b) + (lt.ty * pt.d) + pt.ty;\n\n        this._worldID ++;\n    }\n\n    /**\n     * Decomposes a matrix and sets the transforms properties based on it.\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to decompose\n     */\n    setFromMatrix(matrix)\n    {\n        matrix.decompose(this);\n    }\n\n    /**\n     * The rotation of the object in radians.\n     *\n     * @member {number}\n     */\n    get rotation()\n    {\n        return this._rotation;\n    }\n\n    set rotation(value) // eslint-disable-line require-jsdoc\n    {\n        this._rotation = value;\n        this.updateSkew();\n    }\n}\n"]}