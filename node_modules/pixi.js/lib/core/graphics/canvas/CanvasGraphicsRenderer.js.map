{"version":3,"sources":["../../../../src/core/graphics/canvas/CanvasGraphicsRenderer.js"],"names":["CanvasGraphicsRenderer","renderer","render","graphics","context","worldAlpha","transform","worldTransform","resolution","setTransform","a","b","c","d","tx","ty","canvasTintDirty","dirty","_prevTint","tint","updateGraphicsTint","setBlendMode","blendMode","i","graphicsData","length","data","shape","fillColor","_fillTint","lineColor","_lineTint","lineWidth","type","POLY","beginPath","points","holes","outerArea","innerArea","px","py","moveTo","j","lineTo","closed","closePath","k","close","fill","globalAlpha","fillAlpha","fillStyle","toString","substr","lineAlpha","strokeStyle","stroke","RECT","fillRect","x","y","width","height","strokeRect","CIRC","arc","radius","Math","PI","ELIP","w","h","kappa","ox","oy","xe","ye","xm","ym","bezierCurveTo","RREC","rx","ry","maxRadius","min","quadraticCurveTo","tintR","tintG","tintB","renderPolygon","destroy","registerPlugin"],"mappings":"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","file":"CanvasGraphicsRenderer.js","sourcesContent":["import CanvasRenderer from '../../renderers/canvas/CanvasRenderer';\nimport { SHAPES } from '../../const';\n\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they\n * now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's CanvasGraphicsRenderer:\n * https://github.com/libgdx/libgdx/blob/1.0.0/gdx/src/com/badlogic/gdx/graphics/glutils/ShapeRenderer.java\n */\n\n/**\n * Renderer dedicated to drawing and batching graphics objects.\n *\n * @class\n * @private\n * @memberof PIXI\n */\nexport default class CanvasGraphicsRenderer\n{\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - The current PIXI renderer.\n     */\n    constructor(renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Renders a Graphics object to a canvas.\n     *\n     * @param {PIXI.Graphics} graphics - the actual graphics object to render\n     */\n    render(graphics)\n    {\n        const renderer = this.renderer;\n        const context = renderer.context;\n        const worldAlpha = graphics.worldAlpha;\n        const transform = graphics.transform.worldTransform;\n        const resolution = renderer.resolution;\n\n        context.setTransform(\n            transform.a * resolution,\n            transform.b * resolution,\n            transform.c * resolution,\n            transform.d * resolution,\n            transform.tx * resolution,\n            transform.ty * resolution\n        );\n\n        // update tint if graphics was dirty\n        if (graphics.canvasTintDirty !== graphics.dirty\n            || graphics._prevTint !== graphics.tint)\n        {\n            this.updateGraphicsTint(graphics);\n        }\n\n        renderer.setBlendMode(graphics.blendMode);\n\n        for (let i = 0; i < graphics.graphicsData.length; i++)\n        {\n            const data = graphics.graphicsData[i];\n            const shape = data.shape;\n\n            const fillColor = data._fillTint;\n            const lineColor = data._lineTint;\n\n            context.lineWidth = data.lineWidth;\n\n            if (data.type === SHAPES.POLY)\n            {\n                context.beginPath();\n\n                let points = shape.points;\n                const holes = data.holes;\n                let outerArea;\n                let innerArea;\n                let px;\n                let py;\n\n                context.moveTo(points[0], points[1]);\n\n                for (let j = 2; j < points.length; j += 2)\n                {\n                    context.lineTo(points[j], points[j + 1]);\n                }\n\n                // if the first and last point are the same close the path - much neater :)\n                if (shape.closed)\n                {\n                    context.closePath();\n                }\n\n                if (holes.length > 0)\n                {\n                    outerArea = 0;\n                    px = points[0];\n                    py = points[1];\n                    for (let j = 2; j + 2 < points.length; j += 2)\n                    {\n                        outerArea += ((points[j] - px) * (points[j + 3] - py))\n                            - ((points[j + 2] - px) * (points[j + 1] - py));\n                    }\n\n                    for (let k = 0; k < holes.length; k++)\n                    {\n                        points = holes[k].points;\n\n                        if (!points)\n                        {\n                            continue;\n                        }\n\n                        innerArea = 0;\n                        px = points[0];\n                        py = points[1];\n                        for (let j = 2; j + 2 < points.length; j += 2)\n                        {\n                            innerArea += ((points[j] - px) * (points[j + 3] - py))\n                                - ((points[j + 2] - px) * (points[j + 1] - py));\n                        }\n\n                        if (innerArea * outerArea < 0)\n                        {\n                            context.moveTo(points[0], points[1]);\n\n                            for (let j = 2; j < points.length; j += 2)\n                            {\n                                context.lineTo(points[j], points[j + 1]);\n                            }\n                        }\n                        else\n                        {\n                            context.moveTo(points[points.length - 2], points[points.length - 1]);\n\n                            for (let j = points.length - 4; j >= 0; j -= 2)\n                            {\n                                context.lineTo(points[j], points[j + 1]);\n                            }\n                        }\n\n                        if (holes[k].close)\n                        {\n                            context.closePath();\n                        }\n                    }\n                }\n\n                if (data.fill)\n                {\n                    context.globalAlpha = data.fillAlpha * worldAlpha;\n                    context.fillStyle = `#${(`00000${(fillColor | 0).toString(16)}`).substr(-6)}`;\n                    context.fill();\n                }\n                if (data.lineWidth)\n                {\n                    context.globalAlpha = data.lineAlpha * worldAlpha;\n                    context.strokeStyle = `#${(`00000${(lineColor | 0).toString(16)}`).substr(-6)}`;\n                    context.stroke();\n                }\n            }\n            else if (data.type === SHAPES.RECT)\n            {\n                if (data.fillColor || data.fillColor === 0)\n                {\n                    context.globalAlpha = data.fillAlpha * worldAlpha;\n                    context.fillStyle = `#${(`00000${(fillColor | 0).toString(16)}`).substr(-6)}`;\n                    context.fillRect(shape.x, shape.y, shape.width, shape.height);\n                }\n                if (data.lineWidth)\n                {\n                    context.globalAlpha = data.lineAlpha * worldAlpha;\n                    context.strokeStyle = `#${(`00000${(lineColor | 0).toString(16)}`).substr(-6)}`;\n                    context.strokeRect(shape.x, shape.y, shape.width, shape.height);\n                }\n            }\n            else if (data.type === SHAPES.CIRC)\n            {\n                // TODO - need to be Undefined!\n                context.beginPath();\n                context.arc(shape.x, shape.y, shape.radius, 0, 2 * Math.PI);\n                context.closePath();\n\n                if (data.fill)\n                {\n                    context.globalAlpha = data.fillAlpha * worldAlpha;\n                    context.fillStyle = `#${(`00000${(fillColor | 0).toString(16)}`).substr(-6)}`;\n                    context.fill();\n                }\n                if (data.lineWidth)\n                {\n                    context.globalAlpha = data.lineAlpha * worldAlpha;\n                    context.strokeStyle = `#${(`00000${(lineColor | 0).toString(16)}`).substr(-6)}`;\n                    context.stroke();\n                }\n            }\n            else if (data.type === SHAPES.ELIP)\n            {\n                // ellipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas\n\n                const w = shape.width * 2;\n                const h = shape.height * 2;\n\n                const x = shape.x - (w / 2);\n                const y = shape.y - (h / 2);\n\n                context.beginPath();\n\n                const kappa = 0.5522848;\n                const ox = (w / 2) * kappa; // control point offset horizontal\n                const oy = (h / 2) * kappa; // control point offset vertical\n                const xe = x + w;           // x-end\n                const ye = y + h;           // y-end\n                const xm = x + (w / 2);       // x-middle\n                const ym = y + (h / 2);       // y-middle\n\n                context.moveTo(x, ym);\n                context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n                context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n                context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n                context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n\n                context.closePath();\n\n                if (data.fill)\n                {\n                    context.globalAlpha = data.fillAlpha * worldAlpha;\n                    context.fillStyle = `#${(`00000${(fillColor | 0).toString(16)}`).substr(-6)}`;\n                    context.fill();\n                }\n                if (data.lineWidth)\n                {\n                    context.globalAlpha = data.lineAlpha * worldAlpha;\n                    context.strokeStyle = `#${(`00000${(lineColor | 0).toString(16)}`).substr(-6)}`;\n                    context.stroke();\n                }\n            }\n            else if (data.type === SHAPES.RREC)\n            {\n                const rx = shape.x;\n                const ry = shape.y;\n                const width = shape.width;\n                const height = shape.height;\n                let radius = shape.radius;\n\n                const maxRadius = Math.min(width, height) / 2 | 0;\n\n                radius = radius > maxRadius ? maxRadius : radius;\n\n                context.beginPath();\n                context.moveTo(rx, ry + radius);\n                context.lineTo(rx, ry + height - radius);\n                context.quadraticCurveTo(rx, ry + height, rx + radius, ry + height);\n                context.lineTo(rx + width - radius, ry + height);\n                context.quadraticCurveTo(rx + width, ry + height, rx + width, ry + height - radius);\n                context.lineTo(rx + width, ry + radius);\n                context.quadraticCurveTo(rx + width, ry, rx + width - radius, ry);\n                context.lineTo(rx + radius, ry);\n                context.quadraticCurveTo(rx, ry, rx, ry + radius);\n                context.closePath();\n\n                if (data.fillColor || data.fillColor === 0)\n                {\n                    context.globalAlpha = data.fillAlpha * worldAlpha;\n                    context.fillStyle = `#${(`00000${(fillColor | 0).toString(16)}`).substr(-6)}`;\n                    context.fill();\n                }\n\n                if (data.lineWidth)\n                {\n                    context.globalAlpha = data.lineAlpha * worldAlpha;\n                    context.strokeStyle = `#${(`00000${(lineColor | 0).toString(16)}`).substr(-6)}`;\n                    context.stroke();\n                }\n            }\n        }\n    }\n\n    /**\n     * Updates the tint of a graphics object\n     *\n     * @private\n     * @param {PIXI.Graphics} graphics - the graphics that will have its tint updated\n     */\n    updateGraphicsTint(graphics)\n    {\n        graphics._prevTint = graphics.tint;\n        graphics.canvasTintDirty = graphics.dirty;\n\n        const tintR = ((graphics.tint >> 16) & 0xFF) / 255;\n        const tintG = ((graphics.tint >> 8) & 0xFF) / 255;\n        const tintB = (graphics.tint & 0xFF) / 255;\n\n        for (let i = 0; i < graphics.graphicsData.length; ++i)\n        {\n            const data = graphics.graphicsData[i];\n\n            const fillColor = data.fillColor | 0;\n            const lineColor = data.lineColor | 0;\n\n            // super inline, cos optimization :)\n            data._fillTint = (\n                (((fillColor >> 16) & 0xFF) / 255 * tintR * 255 << 16)\n                + (((fillColor >> 8) & 0xFF) / 255 * tintG * 255 << 8)\n                + (((fillColor & 0xFF) / 255) * tintB * 255)\n            );\n\n            data._lineTint = (\n                (((lineColor >> 16) & 0xFF) / 255 * tintR * 255 << 16)\n                + (((lineColor >> 8) & 0xFF) / 255 * tintG * 255 << 8)\n                + (((lineColor & 0xFF) / 255) * tintB * 255)\n            );\n        }\n    }\n\n    /**\n     * Renders a polygon.\n     *\n     * @param {PIXI.Point[]} points - The points to render\n     * @param {boolean} close - Should the polygon be closed\n     * @param {CanvasRenderingContext2D} context - The rendering context to use\n     */\n    renderPolygon(points, close, context)\n    {\n        context.moveTo(points[0], points[1]);\n\n        for (let j = 1; j < points.length / 2; ++j)\n        {\n            context.lineTo(points[j * 2], points[(j * 2) + 1]);\n        }\n\n        if (close)\n        {\n            context.closePath();\n        }\n    }\n\n    /**\n     * destroy graphics object\n     *\n     */\n    destroy()\n    {\n        this.renderer = null;\n    }\n}\n\nCanvasRenderer.registerPlugin('graphics', CanvasGraphicsRenderer);\n"]}