{"version":3,"sources":["../../../src/core/graphics/Graphics.js"],"names":["canvasRenderer","tempMatrix","tempPoint","tempColor1","Float32Array","tempColor2","Graphics","nativeLines","fillAlpha","lineWidth","lineColor","lineAlignment","graphicsData","tint","_prevTint","blendMode","NORMAL","currentPath","_webGL","isMask","boundsPadding","_localBounds","dirty","fastRectDirty","clearDirty","boundsDirty","cachedSpriteDirty","_spriteRect","_fastRect","_prevRectTint","_prevRectFillColor","clone","renderable","i","length","push","updateLocalBounds","_quadraticCurveLength","fromX","fromY","cpX","cpY","toX","toY","ax","ay","bx","by","a","b","c","s","Math","sqrt","a2","a32","c2","ba","log","_bezierCurveLength","cpX2","cpY2","n","result","t","t2","t3","nt","nt2","nt3","x","y","dx","dy","prevX","prevY","_segmentsCount","ceil","CURVES","maxLength","minSegments","maxSegments","lineStyle","color","alpha","alignment","lineAlpha","shape","points","slice","closed","drawShape","moveTo","lineTo","quadraticCurveTo","xa","ya","adaptive","j","bezierCurveTo","arcTo","x1","y1","x2","y2","radius","a1","b1","b2","mm","abs","dd","cc","tt","k1","k2","j1","j2","cx","cy","px","py","qx","qy","startAngle","atan2","endAngle","arc","anticlockwise","sweep","segs","startX","cos","startY","sin","xDiff","yDiff","theta","theta2","cTheta","sTheta","segMinus","remainder","real","angle","beginFill","filling","fillColor","fill","endFill","drawRect","width","height","drawRoundedRect","drawCircle","drawEllipse","drawPolygon","path","Array","isArray","arguments","drawStar","innerRadius","rotation","PI","len","delta","polygon","r","clear","canvasTintDirty","isFastRect","type","RECT","_renderWebGL","renderer","_renderSpriteRect","setObjectRenderer","plugins","graphics","render","rect","WHITE","sprite","t1","worldAlpha","_texture","_frame","transform","worldTransform","anchor","set","_onAnchorUpdate","_renderCanvas","_calculateBounds","lb","_bounds","addFrame","minX","minY","maxX","maxY","containsPoint","point","applyInverse","data","contains","hitHole","holes","hole","Infinity","w","h","lineOffset","RREC","CIRC","ELIP","rw","rh","padding","pop","POLY","generateCanvasTexture","scaleMode","resolution","bounds","getLocalBounds","canvasBuffer","create","updateLocalTransform","localTransform","copy","invert","tx","ty","texture","fromCanvas","baseTexture","_canvasRenderTarget","canvas","update","closePath","close","addHole","destroy","options","id","_SPRITE_TEXTURE"],"mappings":"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","file":"Graphics.js","sourcesContent":["import Container from '../display/Container';\nimport RenderTexture from '../textures/RenderTexture';\nimport Texture from '../textures/Texture';\nimport GraphicsData from './GraphicsData';\nimport Sprite from '../sprites/Sprite';\nimport { Matrix, Point, Rectangle, RoundedRectangle, Ellipse, Polygon, Circle } from '../math';\nimport { hex2rgb, rgb2hex } from '../utils';\nimport { SHAPES, BLEND_MODES, PI_2 } from '../const';\nimport Bounds from '../display/Bounds';\nimport bezierCurveTo from './utils/bezierCurveTo';\nimport CanvasRenderer from '../renderers/canvas/CanvasRenderer';\n\nlet canvasRenderer;\nconst tempMatrix = new Matrix();\nconst tempPoint = new Point();\nconst tempColor1 = new Float32Array(4);\nconst tempColor2 = new Float32Array(4);\n\n/**\n * The Graphics class contains methods used to draw primitive shapes such as lines, circles and\n * rectangles to the display, and to color and fill them.\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nexport default class Graphics extends Container\n{\n    /**\n     *\n     * @param {boolean} [nativeLines=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     */\n    constructor(nativeLines = false)\n    {\n        super();\n\n        /**\n         * The alpha value used when filling the Graphics object.\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.fillAlpha = 1;\n\n        /**\n         * The width (thickness) of any lines drawn.\n         *\n         * @member {number}\n         * @default 0\n         */\n        this.lineWidth = 0;\n\n        /**\n         * If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n         *\n         * @member {boolean}\n         */\n        this.nativeLines = nativeLines;\n\n        /**\n         * The color of any lines drawn.\n         *\n         * @member {string}\n         * @default 0\n         */\n        this.lineColor = 0;\n\n        /**\n         * The alignment of any lines drawn (0.5 = middle, 1 = outter, 0 = inner).\n         *\n         * @member {number}\n         * @default 0.5\n         */\n        this.lineAlignment = 0.5;\n\n        /**\n         * Graphics data\n         *\n         * @member {PIXI.GraphicsData[]}\n         * @private\n         */\n        this.graphicsData = [];\n\n        /**\n         * The tint applied to the graphic shape. This is a hex value. Apply a value of 0xFFFFFF to\n         * reset the tint.\n         *\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        this.tint = 0xFFFFFF;\n\n        /**\n         * The previous tint applied to the graphic shape. Used to compare to the current tint and\n         * check if theres change.\n         *\n         * @member {number}\n         * @private\n         * @default 0xFFFFFF\n         */\n        this._prevTint = 0xFFFFFF;\n\n        /**\n         * The blend mode to be applied to the graphic shape. Apply a value of\n         * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n         *\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NORMAL;\n         * @see PIXI.BLEND_MODES\n         */\n        this.blendMode = BLEND_MODES.NORMAL;\n\n        /**\n         * Current path\n         *\n         * @member {PIXI.GraphicsData}\n         * @private\n         */\n        this.currentPath = null;\n\n        /**\n         * Array containing some WebGL-related properties used by the WebGL renderer.\n         *\n         * @member {object<number, object>}\n         * @private\n         */\n        // TODO - _webgl should use a prototype object, not a random undocumented object...\n        this._webGL = {};\n\n        /**\n         * Whether this shape is being used as a mask.\n         *\n         * @member {boolean}\n         */\n        this.isMask = false;\n\n        /**\n         * The bounds' padding used for bounds calculation.\n         *\n         * @member {number}\n         */\n        this.boundsPadding = 0;\n\n        /**\n         * A cache of the local bounds to prevent recalculation.\n         *\n         * @member {PIXI.Rectangle}\n         * @private\n         */\n        this._localBounds = new Bounds();\n\n        /**\n         * Used to detect if the graphics object has changed. If this is set to true then the graphics\n         * object will be recalculated.\n         *\n         * @member {boolean}\n         * @private\n         */\n        this.dirty = 0;\n\n        /**\n         * Used to detect if we need to do a fast rect check using the id compare method\n         * @type {Number}\n         */\n        this.fastRectDirty = -1;\n\n        /**\n         * Used to detect if we clear the graphics webGL data\n         * @type {Number}\n         */\n        this.clearDirty = 0;\n\n        /**\n         * Used to detect if we we need to recalculate local bounds\n         * @type {Number}\n         */\n        this.boundsDirty = -1;\n\n        /**\n         * Used to detect if the cached sprite object needs to be updated.\n         *\n         * @member {boolean}\n         * @private\n         */\n        this.cachedSpriteDirty = false;\n\n        this._spriteRect = null;\n        this._fastRect = false;\n\n        this._prevRectTint = null;\n        this._prevRectFillColor = null;\n\n        /**\n         * When cacheAsBitmap is set to true the graphics object will be rendered as if it was a sprite.\n         * This is useful if your graphics element does not change often, as it will speed up the rendering\n         * of the object in exchange for taking up texture memory. It is also useful if you need the graphics\n         * object to be anti-aliased, because it will be rendered using canvas. This is not recommended if\n         * you are constantly redrawing the graphics element.\n         *\n         * @name cacheAsBitmap\n         * @member {boolean}\n         * @memberof PIXI.Graphics#\n         * @default false\n         */\n    }\n\n    /**\n     * Creates a new Graphics object with the same values as this one.\n     * Note that the only the properties of the object are cloned, not its transform (position,scale,etc)\n     *\n     * @return {PIXI.Graphics} A clone of the graphics object\n     */\n    clone()\n    {\n        const clone = new Graphics();\n\n        clone.renderable = this.renderable;\n        clone.fillAlpha = this.fillAlpha;\n        clone.lineWidth = this.lineWidth;\n        clone.lineColor = this.lineColor;\n        clone.lineAlignment = this.lineAlignment;\n        clone.tint = this.tint;\n        clone.blendMode = this.blendMode;\n        clone.isMask = this.isMask;\n        clone.boundsPadding = this.boundsPadding;\n        clone.dirty = 0;\n        clone.cachedSpriteDirty = this.cachedSpriteDirty;\n\n        // copy graphics data\n        for (let i = 0; i < this.graphicsData.length; ++i)\n        {\n            clone.graphicsData.push(this.graphicsData[i].clone());\n        }\n\n        clone.currentPath = clone.graphicsData[clone.graphicsData.length - 1];\n\n        clone.updateLocalBounds();\n\n        return clone;\n    }\n\n    /**\n     * Calculate length of quadratic curve\n     * @see {@link http://www.malczak.linuxpl.com/blog/quadratic-bezier-curve-length/}\n     * for the detailed explanation of math behind this.\n     *\n     * @private\n     * @param {number} fromX - x-coordinate of curve start point\n     * @param {number} fromY - y-coordinate of curve start point\n     * @param {number} cpX - x-coordinate of curve control point\n     * @param {number} cpY - y-coordinate of curve control point\n     * @param {number} toX - x-coordinate of curve end point\n     * @param {number} toY - y-coordinate of curve end point\n     * @return {number} Length of quadratic curve\n     */\n    _quadraticCurveLength(fromX, fromY, cpX, cpY, toX, toY)\n    {\n        const ax = fromX - (2.0 * cpX) + toX;\n        const ay = fromY - (2.0 * cpY) + toY;\n        const bx = (2.0 * cpX) - (2.0 * fromX);\n        const by = (2.0 * cpY) - (2.0 * fromY);\n        const a = 4.0 * ((ax * ax) + (ay * ay));\n        const b = 4.0 * ((ax * bx) + (ay * by));\n        const c = (bx * bx) + (by * by);\n\n        const s = 2.0 * Math.sqrt(a + b + c);\n        const a2 = Math.sqrt(a);\n        const a32 = 2.0 * a * a2;\n        const c2 = 2.0 * Math.sqrt(c);\n        const ba = b / a2;\n\n        return (\n                (a32 * s)\n                + (a2 * b * (s - c2))\n                + (\n                   ((4.0 * c * a) - (b * b))\n                   * Math.log(((2.0 * a2) + ba + s) / (ba + c2))\n                  )\n               )\n               / (4.0 * a32);\n    }\n\n    /**\n     * Calculate length of bezier curve.\n     * Analytical solution is impossible, since it involves an integral that does not integrate in general.\n     * Therefore numerical solution is used.\n     *\n     * @private\n     * @param {number} fromX - Starting point x\n     * @param {number} fromY - Starting point y\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} cpX2 - Second Control point x\n     * @param {number} cpY2 - Second Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @return {number} Length of bezier curve\n     */\n    _bezierCurveLength(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY)\n    {\n        const n = 10;\n        let result = 0.0;\n        let t = 0.0;\n        let t2 = 0.0;\n        let t3 = 0.0;\n        let nt = 0.0;\n        let nt2 = 0.0;\n        let nt3 = 0.0;\n        let x = 0.0;\n        let y = 0.0;\n        let dx = 0.0;\n        let dy = 0.0;\n        let prevX = fromX;\n        let prevY = fromY;\n\n        for (let i = 1; i <= n; ++i)\n        {\n            t = i / n;\n            t2 = t * t;\n            t3 = t2 * t;\n            nt = (1.0 - t);\n            nt2 = nt * nt;\n            nt3 = nt2 * nt;\n\n            x = (nt3 * fromX) + (3.0 * nt2 * t * cpX) + (3.0 * nt * t2 * cpX2) + (t3 * toX);\n            y = (nt3 * fromY) + (3.0 * nt2 * t * cpY) + (3 * nt * t2 * cpY2) + (t3 * toY);\n            dx = prevX - x;\n            dy = prevY - y;\n            prevX = x;\n            prevY = y;\n\n            result += Math.sqrt((dx * dx) + (dy * dy));\n        }\n\n        return result;\n    }\n\n    /**\n     * Calculate number of segments for the curve based on its length to ensure its smoothness.\n     *\n     * @private\n     * @param {number} length - length of curve\n     * @return {number} Number of segments\n     */\n    _segmentsCount(length)\n    {\n        let result = Math.ceil(length / Graphics.CURVES.maxLength);\n\n        if (result < Graphics.CURVES.minSegments)\n        {\n            result = Graphics.CURVES.minSegments;\n        }\n        else if (result > Graphics.CURVES.maxSegments)\n        {\n            result = Graphics.CURVES.maxSegments;\n        }\n\n        return result;\n    }\n\n    /**\n     * Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()\n     * method or the drawCircle() method.\n     *\n     * @param {number} [lineWidth=0] - width of the line to draw, will update the objects stored style\n     * @param {number} [color=0] - color of the line to draw, will update the objects stored style\n     * @param {number} [alpha=1] - alpha of the line to draw, will update the objects stored style\n     * @param {number} [alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    lineStyle(lineWidth = 0, color = 0, alpha = 1, alignment = 0.5)\n    {\n        this.lineWidth = lineWidth;\n        this.lineColor = color;\n        this.lineAlpha = alpha;\n        this.lineAlignment = alignment;\n\n        if (this.currentPath)\n        {\n            if (this.currentPath.shape.points.length)\n            {\n                // halfway through a line? start a new one!\n                const shape = new Polygon(this.currentPath.shape.points.slice(-2));\n\n                shape.closed = false;\n\n                this.drawShape(shape);\n            }\n            else\n            {\n                // otherwise its empty so lets just set the line properties\n                this.currentPath.lineWidth = this.lineWidth;\n                this.currentPath.lineColor = this.lineColor;\n                this.currentPath.lineAlpha = this.lineAlpha;\n                this.currentPath.lineAlignment = this.lineAlignment;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Moves the current drawing position to x, y.\n     *\n     * @param {number} x - the X coordinate to move to\n     * @param {number} y - the Y coordinate to move to\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    moveTo(x, y)\n    {\n        const shape = new Polygon([x, y]);\n\n        shape.closed = false;\n        this.drawShape(shape);\n\n        return this;\n    }\n\n    /**\n     * Draws a line using the current line style from the current drawing position to (x, y);\n     * The current drawing position is then set to (x, y).\n     *\n     * @param {number} x - the X coordinate to draw to\n     * @param {number} y - the Y coordinate to draw to\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    lineTo(x, y)\n    {\n        const points = this.currentPath.shape.points;\n\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        if (fromX !== x || fromY !== y)\n        {\n            points.push(x, y);\n            this.dirty++;\n        }\n\n        return this;\n    }\n\n    /**\n     * Calculate the points for a quadratic bezier curve and then draws it.\n     * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n     *\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    quadraticCurveTo(cpX, cpY, toX, toY)\n    {\n        if (this.currentPath)\n        {\n            if (this.currentPath.shape.points.length === 0)\n            {\n                this.currentPath.shape.points = [0, 0];\n            }\n        }\n        else\n        {\n            this.moveTo(0, 0);\n        }\n\n        const points = this.currentPath.shape.points;\n        let xa = 0;\n        let ya = 0;\n\n        if (points.length === 0)\n        {\n            this.moveTo(0, 0);\n        }\n\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n        const n = Graphics.CURVES.adaptive\n                  ? this._segmentsCount(this._quadraticCurveLength(fromX, fromY, cpX, cpY, toX, toY))\n                  : 20;\n\n        for (let i = 1; i <= n; ++i)\n        {\n            const j = i / n;\n\n            xa = fromX + ((cpX - fromX) * j);\n            ya = fromY + ((cpY - fromY) * j);\n\n            points.push(xa + (((cpX + ((toX - cpX) * j)) - xa) * j),\n                ya + (((cpY + ((toY - cpY) * j)) - ya) * j));\n        }\n\n        this.dirty++;\n\n        return this;\n    }\n\n    /**\n     * Calculate the points for a bezier curve and then draws it.\n     *\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} cpX2 - Second Control point x\n     * @param {number} cpY2 - Second Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    bezierCurveTo(cpX, cpY, cpX2, cpY2, toX, toY)\n    {\n        if (this.currentPath)\n        {\n            if (this.currentPath.shape.points.length === 0)\n            {\n                this.currentPath.shape.points = [0, 0];\n            }\n        }\n        else\n        {\n            this.moveTo(0, 0);\n        }\n\n        const points = this.currentPath.shape.points;\n\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        points.length -= 2;\n\n        const n = Graphics.CURVES.adaptive\n                  ? this._segmentsCount(this._bezierCurveLength(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY))\n                  : 20;\n\n        bezierCurveTo(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY, n, points);\n\n        this.dirty++;\n\n        return this;\n    }\n\n    /**\n     * The arcTo() method creates an arc/curve between two tangents on the canvas.\n     *\n     * \"borrowed\" from https://code.google.com/p/fxcanvas/ - thanks google!\n     *\n     * @param {number} x1 - The x-coordinate of the beginning of the arc\n     * @param {number} y1 - The y-coordinate of the beginning of the arc\n     * @param {number} x2 - The x-coordinate of the end of the arc\n     * @param {number} y2 - The y-coordinate of the end of the arc\n     * @param {number} radius - The radius of the arc\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    arcTo(x1, y1, x2, y2, radius)\n    {\n        if (this.currentPath)\n        {\n            if (this.currentPath.shape.points.length === 0)\n            {\n                this.currentPath.shape.points.push(x1, y1);\n            }\n        }\n        else\n        {\n            this.moveTo(x1, y1);\n        }\n\n        const points = this.currentPath.shape.points;\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n        const a1 = fromY - y1;\n        const b1 = fromX - x1;\n        const a2 = y2 - y1;\n        const b2 = x2 - x1;\n        const mm = Math.abs((a1 * b2) - (b1 * a2));\n\n        if (mm < 1.0e-8 || radius === 0)\n        {\n            if (points[points.length - 2] !== x1 || points[points.length - 1] !== y1)\n            {\n                points.push(x1, y1);\n            }\n        }\n        else\n        {\n            const dd = (a1 * a1) + (b1 * b1);\n            const cc = (a2 * a2) + (b2 * b2);\n            const tt = (a1 * a2) + (b1 * b2);\n            const k1 = radius * Math.sqrt(dd) / mm;\n            const k2 = radius * Math.sqrt(cc) / mm;\n            const j1 = k1 * tt / dd;\n            const j2 = k2 * tt / cc;\n            const cx = (k1 * b2) + (k2 * b1);\n            const cy = (k1 * a2) + (k2 * a1);\n            const px = b1 * (k2 + j1);\n            const py = a1 * (k2 + j1);\n            const qx = b2 * (k1 + j2);\n            const qy = a2 * (k1 + j2);\n            const startAngle = Math.atan2(py - cy, px - cx);\n            const endAngle = Math.atan2(qy - cy, qx - cx);\n\n            this.arc(cx + x1, cy + y1, radius, startAngle, endAngle, b1 * a2 > b2 * a1);\n        }\n\n        this.dirty++;\n\n        return this;\n    }\n\n    /**\n     * The arc method creates an arc/curve (used to create circles, or parts of circles).\n     *\n     * @param {number} cx - The x-coordinate of the center of the circle\n     * @param {number} cy - The y-coordinate of the center of the circle\n     * @param {number} radius - The radius of the circle\n     * @param {number} startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n     *  of the arc's circle)\n     * @param {number} endAngle - The ending angle, in radians\n     * @param {boolean} [anticlockwise=false] - Specifies whether the drawing should be\n     *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n     *  indicates counter-clockwise.\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    arc(cx, cy, radius, startAngle, endAngle, anticlockwise = false)\n    {\n        if (startAngle === endAngle)\n        {\n            return this;\n        }\n\n        if (!anticlockwise && endAngle <= startAngle)\n        {\n            endAngle += PI_2;\n        }\n        else if (anticlockwise && startAngle <= endAngle)\n        {\n            startAngle += PI_2;\n        }\n\n        const sweep = endAngle - startAngle;\n        const segs = Graphics.CURVES.adaptive\n                     ? this._segmentsCount(Math.abs(sweep) * radius)\n                     : Math.ceil(Math.abs(sweep) / PI_2) * 40;\n\n        if (sweep === 0)\n        {\n            return this;\n        }\n\n        const startX = cx + (Math.cos(startAngle) * radius);\n        const startY = cy + (Math.sin(startAngle) * radius);\n\n        // If the currentPath exists, take its points. Otherwise call `moveTo` to start a path.\n        let points = this.currentPath ? this.currentPath.shape.points : null;\n\n        if (points)\n        {\n            // We check how far our start is from the last existing point\n            const xDiff = Math.abs(points[points.length - 2] - startX);\n            const yDiff = Math.abs(points[points.length - 1] - startY);\n\n            if (xDiff < 0.001 && yDiff < 0.001)\n            {\n                // If the point is very close, we don't add it, since this would lead to artifacts\n                // during tesselation due to floating point imprecision.\n            }\n            else\n            {\n                points.push(startX, startY);\n            }\n        }\n        else\n        {\n            this.moveTo(startX, startY);\n            points = this.currentPath.shape.points;\n        }\n\n        const theta = sweep / (segs * 2);\n        const theta2 = theta * 2;\n\n        const cTheta = Math.cos(theta);\n        const sTheta = Math.sin(theta);\n\n        const segMinus = segs - 1;\n\n        const remainder = (segMinus % 1) / segMinus;\n\n        for (let i = 0; i <= segMinus; ++i)\n        {\n            const real = i + (remainder * i);\n\n            const angle = ((theta) + startAngle + (theta2 * real));\n\n            const c = Math.cos(angle);\n            const s = -Math.sin(angle);\n\n            points.push(\n                (((cTheta * c) + (sTheta * s)) * radius) + cx,\n                (((cTheta * -s) + (sTheta * c)) * radius) + cy\n            );\n        }\n\n        this.dirty++;\n\n        return this;\n    }\n\n    /**\n     * Specifies a simple one-color fill that subsequent calls to other Graphics methods\n     * (such as lineTo() or drawCircle()) use when drawing.\n     *\n     * @param {number} [color=0] - the color of the fill\n     * @param {number} [alpha=1] - the alpha of the fill\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    beginFill(color = 0, alpha = 1)\n    {\n        this.filling = true;\n        this.fillColor = color;\n        this.fillAlpha = alpha;\n\n        if (this.currentPath)\n        {\n            if (this.currentPath.shape.points.length <= 2)\n            {\n                this.currentPath.fill = this.filling;\n                this.currentPath.fillColor = this.fillColor;\n                this.currentPath.fillAlpha = this.fillAlpha;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.\n     *\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    endFill()\n    {\n        this.filling = false;\n        this.fillColor = null;\n        this.fillAlpha = 1;\n\n        return this;\n    }\n\n    /**\n     *\n     * @param {number} x - The X coord of the top-left of the rectangle\n     * @param {number} y - The Y coord of the top-left of the rectangle\n     * @param {number} width - The width of the rectangle\n     * @param {number} height - The height of the rectangle\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    drawRect(x, y, width, height)\n    {\n        this.drawShape(new Rectangle(x, y, width, height));\n\n        return this;\n    }\n\n    /**\n     *\n     * @param {number} x - The X coord of the top-left of the rectangle\n     * @param {number} y - The Y coord of the top-left of the rectangle\n     * @param {number} width - The width of the rectangle\n     * @param {number} height - The height of the rectangle\n     * @param {number} radius - Radius of the rectangle corners\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    drawRoundedRect(x, y, width, height, radius)\n    {\n        this.drawShape(new RoundedRectangle(x, y, width, height, radius));\n\n        return this;\n    }\n\n    /**\n     * Draws a circle.\n     *\n     * @param {number} x - The X coordinate of the center of the circle\n     * @param {number} y - The Y coordinate of the center of the circle\n     * @param {number} radius - The radius of the circle\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    drawCircle(x, y, radius)\n    {\n        this.drawShape(new Circle(x, y, radius));\n\n        return this;\n    }\n\n    /**\n     * Draws an ellipse.\n     *\n     * @param {number} x - The X coordinate of the center of the ellipse\n     * @param {number} y - The Y coordinate of the center of the ellipse\n     * @param {number} width - The half width of the ellipse\n     * @param {number} height - The half height of the ellipse\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    drawEllipse(x, y, width, height)\n    {\n        this.drawShape(new Ellipse(x, y, width, height));\n\n        return this;\n    }\n\n    /**\n     * Draws a polygon using the given path.\n     *\n     * @param {number[]|PIXI.Point[]|PIXI.Polygon} path - The path data used to construct the polygon.\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    drawPolygon(path)\n    {\n        // prevents an argument assignment deopt\n        // see section 3.1: https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments\n        let points = path;\n\n        let closed = true;\n\n        if (points instanceof Polygon)\n        {\n            closed = points.closed;\n            points = points.points;\n        }\n\n        if (!Array.isArray(points))\n        {\n            // prevents an argument leak deopt\n            // see section 3.2: https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments\n            points = new Array(arguments.length);\n\n            for (let i = 0; i < points.length; ++i)\n            {\n                points[i] = arguments[i]; // eslint-disable-line prefer-rest-params\n            }\n        }\n\n        const shape = new Polygon(points);\n\n        shape.closed = closed;\n\n        this.drawShape(shape);\n\n        return this;\n    }\n\n    /**\n     * Draw a star shape with an abitrary number of points.\n     *\n     * @param {number} x - Center X position of the star\n     * @param {number} y - Center Y position of the star\n     * @param {number} points - The number of points of the star, must be > 1\n     * @param {number} radius - The outer radius of the star\n     * @param {number} [innerRadius] - The inner radius between points, default half `radius`\n     * @param {number} [rotation=0] - The rotation of the star in radians, where 0 is vertical\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    drawStar(x, y, points, radius, innerRadius, rotation = 0)\n    {\n        innerRadius = innerRadius || radius / 2;\n\n        const startAngle = (-1 * Math.PI / 2) + rotation;\n        const len = points * 2;\n        const delta = PI_2 / len;\n        const polygon = [];\n\n        for (let i = 0; i < len; i++)\n        {\n            const r = i % 2 ? innerRadius : radius;\n            const angle = (i * delta) + startAngle;\n\n            polygon.push(\n                x + (r * Math.cos(angle)),\n                y + (r * Math.sin(angle))\n            );\n        }\n\n        return this.drawPolygon(polygon);\n    }\n\n    /**\n     * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.\n     *\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    clear()\n    {\n        if (this.lineWidth || this.filling || this.graphicsData.length > 0)\n        {\n            this.lineWidth = 0;\n            this.lineAlignment = 0.5;\n\n            this.filling = false;\n\n            this.boundsDirty = -1;\n            this.canvasTintDirty = -1;\n            this.dirty++;\n            this.clearDirty++;\n            this.graphicsData.length = 0;\n        }\n\n        this.currentPath = null;\n        this._spriteRect = null;\n\n        return this;\n    }\n\n    /**\n     * True if graphics consists of one rectangle, and thus, can be drawn like a Sprite and\n     * masked with gl.scissor.\n     *\n     * @returns {boolean} True if only 1 rect.\n     */\n    isFastRect()\n    {\n        return this.graphicsData.length === 1\n            && this.graphicsData[0].shape.type === SHAPES.RECT\n            && !this.graphicsData[0].lineWidth;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @private\n     * @param {PIXI.WebGLRenderer} renderer - The renderer\n     */\n    _renderWebGL(renderer)\n    {\n        // if the sprite is not visible or the alpha is 0 then no need to render this element\n        if (this.dirty !== this.fastRectDirty)\n        {\n            this.fastRectDirty = this.dirty;\n            this._fastRect = this.isFastRect();\n        }\n\n        // TODO this check can be moved to dirty?\n        if (this._fastRect)\n        {\n            this._renderSpriteRect(renderer);\n        }\n        else\n        {\n            renderer.setObjectRenderer(renderer.plugins.graphics);\n            renderer.plugins.graphics.render(this);\n        }\n    }\n\n    /**\n     * Renders a sprite rectangle.\n     *\n     * @private\n     * @param {PIXI.WebGLRenderer} renderer - The renderer\n     */\n    _renderSpriteRect(renderer)\n    {\n        const rect = this.graphicsData[0].shape;\n\n        if (!this._spriteRect)\n        {\n            this._spriteRect = new Sprite(new Texture(Texture.WHITE));\n        }\n\n        const sprite = this._spriteRect;\n        const fillColor = this.graphicsData[0].fillColor;\n\n        if (this.tint === 0xffffff)\n        {\n            sprite.tint = fillColor;\n        }\n        else if (this.tint !== this._prevRectTint || fillColor !== this._prevRectFillColor)\n        {\n            const t1 = tempColor1;\n            const t2 = tempColor2;\n\n            hex2rgb(fillColor, t1);\n            hex2rgb(this.tint, t2);\n\n            t1[0] *= t2[0];\n            t1[1] *= t2[1];\n            t1[2] *= t2[2];\n\n            sprite.tint = rgb2hex(t1);\n\n            this._prevRectTint = this.tint;\n            this._prevRectFillColor = fillColor;\n        }\n\n        sprite.alpha = this.graphicsData[0].fillAlpha;\n        sprite.worldAlpha = this.worldAlpha * sprite.alpha;\n        sprite.blendMode = this.blendMode;\n\n        sprite._texture._frame.width = rect.width;\n        sprite._texture._frame.height = rect.height;\n\n        sprite.transform.worldTransform = this.transform.worldTransform;\n\n        sprite.anchor.set(-rect.x / rect.width, -rect.y / rect.height);\n        sprite._onAnchorUpdate();\n\n        sprite._renderWebGL(renderer);\n    }\n\n    /**\n     * Renders the object using the Canvas renderer\n     *\n     * @private\n     * @param {PIXI.CanvasRenderer} renderer - The renderer\n     */\n    _renderCanvas(renderer)\n    {\n        if (this.isMask === true)\n        {\n            return;\n        }\n\n        renderer.plugins.graphics.render(this);\n    }\n\n    /**\n     * Retrieves the bounds of the graphic shape as a rectangle object\n     *\n     * @private\n     */\n    _calculateBounds()\n    {\n        if (this.boundsDirty !== this.dirty)\n        {\n            this.boundsDirty = this.dirty;\n            this.updateLocalBounds();\n\n            this.cachedSpriteDirty = true;\n        }\n\n        const lb = this._localBounds;\n\n        this._bounds.addFrame(this.transform, lb.minX, lb.minY, lb.maxX, lb.maxY);\n    }\n\n    /**\n     * Tests if a point is inside this graphics object\n     *\n     * @param {PIXI.Point} point - the point to test\n     * @return {boolean} the result of the test\n     */\n    containsPoint(point)\n    {\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const graphicsData = this.graphicsData;\n\n        for (let i = 0; i < graphicsData.length; ++i)\n        {\n            const data = graphicsData[i];\n\n            if (!data.fill)\n            {\n                continue;\n            }\n\n            // only deal with fills..\n            if (data.shape)\n            {\n                if (data.shape.contains(tempPoint.x, tempPoint.y))\n                {\n                    let hitHole = false;\n\n                    if (data.holes)\n                    {\n                        for (let i = 0; i < data.holes.length; i++)\n                        {\n                            const hole = data.holes[i];\n\n                            if (hole.contains(tempPoint.x, tempPoint.y))\n                            {\n                                hitHole = true;\n                                break;\n                            }\n                        }\n                    }\n\n                    if (!hitHole)\n                    {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Update the bounds of the object\n     *\n     */\n    updateLocalBounds()\n    {\n        let minX = Infinity;\n        let maxX = -Infinity;\n\n        let minY = Infinity;\n        let maxY = -Infinity;\n\n        if (this.graphicsData.length)\n        {\n            let shape = 0;\n            let x = 0;\n            let y = 0;\n            let w = 0;\n            let h = 0;\n\n            for (let i = 0; i < this.graphicsData.length; i++)\n            {\n                const data = this.graphicsData[i];\n                const type = data.type;\n                const lineWidth = data.lineWidth;\n                const lineAlignment = data.lineAlignment;\n\n                const lineOffset = lineWidth * lineAlignment;\n\n                shape = data.shape;\n\n                if (type === SHAPES.RECT || type === SHAPES.RREC)\n                {\n                    x = shape.x - lineOffset;\n                    y = shape.y - lineOffset;\n                    w = shape.width + (lineOffset * 2);\n                    h = shape.height + (lineOffset * 2);\n\n                    minX = x < minX ? x : minX;\n                    maxX = x + w > maxX ? x + w : maxX;\n\n                    minY = y < minY ? y : minY;\n                    maxY = y + h > maxY ? y + h : maxY;\n                }\n                else if (type === SHAPES.CIRC)\n                {\n                    x = shape.x;\n                    y = shape.y;\n                    w = shape.radius + lineOffset;\n                    h = shape.radius + lineOffset;\n\n                    minX = x - w < minX ? x - w : minX;\n                    maxX = x + w > maxX ? x + w : maxX;\n\n                    minY = y - h < minY ? y - h : minY;\n                    maxY = y + h > maxY ? y + h : maxY;\n                }\n                else if (type === SHAPES.ELIP)\n                {\n                    x = shape.x;\n                    y = shape.y;\n                    w = shape.width + lineOffset;\n                    h = shape.height + lineOffset;\n\n                    minX = x - w < minX ? x - w : minX;\n                    maxX = x + w > maxX ? x + w : maxX;\n\n                    minY = y - h < minY ? y - h : minY;\n                    maxY = y + h > maxY ? y + h : maxY;\n                }\n                else\n                {\n                    // POLY\n                    const points = shape.points;\n                    let x2 = 0;\n                    let y2 = 0;\n                    let dx = 0;\n                    let dy = 0;\n                    let rw = 0;\n                    let rh = 0;\n                    let cx = 0;\n                    let cy = 0;\n\n                    for (let j = 0; j + 2 < points.length; j += 2)\n                    {\n                        x = points[j];\n                        y = points[j + 1];\n                        x2 = points[j + 2];\n                        y2 = points[j + 3];\n                        dx = Math.abs(x2 - x);\n                        dy = Math.abs(y2 - y);\n                        h = lineOffset * 2;\n                        w = Math.sqrt((dx * dx) + (dy * dy));\n\n                        if (w < 1e-9)\n                        {\n                            continue;\n                        }\n\n                        rw = ((h / w * dy) + dx) / 2;\n                        rh = ((h / w * dx) + dy) / 2;\n                        cx = (x2 + x) / 2;\n                        cy = (y2 + y) / 2;\n\n                        minX = cx - rw < minX ? cx - rw : minX;\n                        maxX = cx + rw > maxX ? cx + rw : maxX;\n\n                        minY = cy - rh < minY ? cy - rh : minY;\n                        maxY = cy + rh > maxY ? cy + rh : maxY;\n                    }\n                }\n            }\n        }\n        else\n        {\n            minX = 0;\n            maxX = 0;\n            minY = 0;\n            maxY = 0;\n        }\n\n        const padding = this.boundsPadding;\n\n        this._localBounds.minX = minX - padding;\n        this._localBounds.maxX = maxX + padding;\n\n        this._localBounds.minY = minY - padding;\n        this._localBounds.maxY = maxY + padding;\n    }\n\n    /**\n     * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.\n     *\n     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.\n     * @return {PIXI.GraphicsData} The generated GraphicsData object.\n     */\n    drawShape(shape)\n    {\n        if (this.currentPath)\n        {\n            // check current path!\n            if (this.currentPath.shape.points.length <= 2)\n            {\n                this.graphicsData.pop();\n            }\n        }\n\n        this.currentPath = null;\n\n        const data = new GraphicsData(\n            this.lineWidth,\n            this.lineColor,\n            this.lineAlpha,\n            this.fillColor,\n            this.fillAlpha,\n            this.filling,\n            this.nativeLines,\n            shape,\n            this.lineAlignment\n        );\n\n        this.graphicsData.push(data);\n\n        if (data.type === SHAPES.POLY)\n        {\n            data.shape.closed = data.shape.closed;\n            this.currentPath = data;\n        }\n\n        this.dirty++;\n\n        return data;\n    }\n\n    /**\n     * Generates a canvas texture.\n     *\n     * @param {number} scaleMode - The scale mode of the texture.\n     * @param {number} resolution - The resolution of the texture.\n     * @return {PIXI.Texture} The new texture.\n     */\n    generateCanvasTexture(scaleMode, resolution = 1)\n    {\n        const bounds = this.getLocalBounds();\n\n        const canvasBuffer = RenderTexture.create(bounds.width, bounds.height, scaleMode, resolution);\n\n        if (!canvasRenderer)\n        {\n            canvasRenderer = new CanvasRenderer();\n        }\n\n        this.transform.updateLocalTransform();\n        this.transform.localTransform.copy(tempMatrix);\n\n        tempMatrix.invert();\n\n        tempMatrix.tx -= bounds.x;\n        tempMatrix.ty -= bounds.y;\n\n        canvasRenderer.render(this, canvasBuffer, true, tempMatrix);\n\n        const texture = Texture.fromCanvas(canvasBuffer.baseTexture._canvasRenderTarget.canvas, scaleMode, 'graphics');\n\n        texture.baseTexture.resolution = resolution;\n        texture.baseTexture.update();\n\n        return texture;\n    }\n\n    /**\n     * Closes the current path.\n     *\n     * @return {PIXI.Graphics} Returns itself.\n     */\n    closePath()\n    {\n        // ok so close path assumes next one is a hole!\n        const currentPath = this.currentPath;\n\n        if (currentPath && currentPath.shape)\n        {\n            currentPath.shape.close();\n        }\n\n        return this;\n    }\n\n    /**\n     * Adds a hole in the current path.\n     *\n     * @return {PIXI.Graphics} Returns itself.\n     */\n    addHole()\n    {\n        // this is a hole!\n        const hole = this.graphicsData.pop();\n\n        this.currentPath = this.graphicsData[this.graphicsData.length - 1];\n\n        this.currentPath.addHole(hole.shape);\n        this.currentPath = null;\n\n        return this;\n    }\n\n    /**\n     * Destroys the Graphics object.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all\n     *  options have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have\n     *  their destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    destroy(options)\n    {\n        super.destroy(options);\n\n        // destroy each of the GraphicsData objects\n        for (let i = 0; i < this.graphicsData.length; ++i)\n        {\n            this.graphicsData[i].destroy();\n        }\n\n        // for each webgl data entry, destroy the WebGLGraphicsData\n        for (const id in this._webGL)\n        {\n            for (let j = 0; j < this._webGL[id].data.length; ++j)\n            {\n                this._webGL[id].data[j].destroy();\n            }\n        }\n\n        if (this._spriteRect)\n        {\n            this._spriteRect.destroy();\n        }\n\n        this.graphicsData = null;\n\n        this.currentPath = null;\n        this._webGL = null;\n        this._localBounds = null;\n    }\n\n}\n\nGraphics._SPRITE_TEXTURE = null;\n\n/**\n * Graphics curves resolution settings. If `adaptive` flag is set to `true`,\n * the resolution is calculated based on the curve's length to ensure better visual quality.\n * Adaptive draw works with `bezierCurveTo` and `quadraticCurveTo`.\n *\n * @static\n * @constant\n * @memberof PIXI.Graphics\n * @name CURVES\n * @type {object}\n * @property {boolean} adaptive=false - flag indicating if the resolution should be adaptive\n * @property {number} maxLength=10 - maximal length of a single segment of the curve (if adaptive = false, ignored)\n * @property {number} minSegments=8 - minimal number of segments in the curve (if adaptive = false, ignored)\n * @property {number} maxSegments=2048 - maximal number of segments in the curve (if adaptive = false, ignored)\n */\nGraphics.CURVES = {\n    adaptive: false,\n    maxLength: 10,\n    minSegments: 8,\n    maxSegments: 2048,\n};\n"]}