{"version":3,"sources":["../../../src/extras/webgl/TilingSpriteRenderer.js"],"names":["core","tempMat","Matrix","TilingSpriteRenderer","renderer","shader","simpleShader","quad","onContextChange","gl","Shader","bindVao","Quad","state","attribState","initVao","render","ts","vao","vertices","_width","anchor","x","_height","y","uvRespectAnchor","uvs","upload","tex","_texture","baseTex","baseTexture","lt","tileTransform","localTransform","uv","uvTransform","isSimple","isPowerOfTwo","frame","width","height","_glTextures","CONTEXT_UID","wrapMode","CLAMP","REPEAT","bindShader","w","h","W","H","set","a","b","c","d","tx","ty","invert","prepend","mapCoord","uniforms","uMapCoord","toArray","uClampFrame","uClampOffset","uTransform","uColor","utils","premultiplyTintToRgba","tint","worldAlpha","premultipliedAlpha","translationMatrix","transform","worldTransform","uSampler","bindTexture","setBlendMode","correctBlendMode","blendMode","draw","TRIANGLES","ObjectRenderer","WebGLRenderer","registerPlugin"],"mappings":"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","file":"TilingSpriteRenderer.js","sourcesContent":["import * as core from '../../core';\nimport { WRAP_MODES } from '../../core/const';\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\nconst tempMat = new core.Matrix();\n\n/**\n * WebGL renderer plugin for tiling sprites\n *\n * @class\n * @memberof PIXI.extras\n * @extends PIXI.ObjectRenderer\n */\nexport default class TilingSpriteRenderer extends core.ObjectRenderer\n{\n\n    /**\n     * constructor for renderer\n     *\n     * @param {WebGLRenderer} renderer The renderer this tiling awesomeness works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        this.shader = null;\n        this.simpleShader = null;\n        this.quad = null;\n    }\n\n    /**\n     * Sets up the renderer context and necessary buffers.\n     *\n     * @private\n     */\n    onContextChange()\n    {\n        const gl = this.renderer.gl;\n\n        this.shader = new core.Shader(gl,\n            readFileSync(join(__dirname, './tilingSprite.vert'), 'utf8'),\n            readFileSync(join(__dirname, './tilingSprite.frag'), 'utf8'));\n        this.simpleShader = new core.Shader(gl,\n            readFileSync(join(__dirname, './tilingSprite.vert'), 'utf8'),\n            readFileSync(join(__dirname, './tilingSprite_simple.frag'), 'utf8'));\n\n        this.renderer.bindVao(null);\n        this.quad = new core.Quad(gl, this.renderer.state.attribState);\n        this.quad.initVao(this.shader);\n    }\n\n    /**\n     *\n     * @param {PIXI.extras.TilingSprite} ts tilingSprite to be rendered\n     */\n    render(ts)\n    {\n        const renderer = this.renderer;\n        const quad = this.quad;\n\n        renderer.bindVao(quad.vao);\n\n        let vertices = quad.vertices;\n\n        vertices[0] = vertices[6] = (ts._width) * -ts.anchor.x;\n        vertices[1] = vertices[3] = ts._height * -ts.anchor.y;\n\n        vertices[2] = vertices[4] = (ts._width) * (1.0 - ts.anchor.x);\n        vertices[5] = vertices[7] = ts._height * (1.0 - ts.anchor.y);\n\n        if (ts.uvRespectAnchor)\n        {\n            vertices = quad.uvs;\n\n            vertices[0] = vertices[6] = -ts.anchor.x;\n            vertices[1] = vertices[3] = -ts.anchor.y;\n\n            vertices[2] = vertices[4] = 1.0 - ts.anchor.x;\n            vertices[5] = vertices[7] = 1.0 - ts.anchor.y;\n        }\n\n        quad.upload();\n\n        const tex = ts._texture;\n        const baseTex = tex.baseTexture;\n        const lt = ts.tileTransform.localTransform;\n        const uv = ts.uvTransform;\n        let isSimple = baseTex.isPowerOfTwo\n            && tex.frame.width === baseTex.width && tex.frame.height === baseTex.height;\n\n        // auto, force repeat wrapMode for big tiling textures\n        if (isSimple)\n        {\n            if (!baseTex._glTextures[renderer.CONTEXT_UID])\n            {\n                if (baseTex.wrapMode === WRAP_MODES.CLAMP)\n                {\n                    baseTex.wrapMode = WRAP_MODES.REPEAT;\n                }\n            }\n            else\n            {\n                isSimple = baseTex.wrapMode !== WRAP_MODES.CLAMP;\n            }\n        }\n\n        const shader = isSimple ? this.simpleShader : this.shader;\n\n        renderer.bindShader(shader);\n\n        const w = tex.width;\n        const h = tex.height;\n        const W = ts._width;\n        const H = ts._height;\n\n        tempMat.set(lt.a * w / W,\n            lt.b * w / H,\n            lt.c * h / W,\n            lt.d * h / H,\n            lt.tx / W,\n            lt.ty / H);\n\n        // that part is the same as above:\n        // tempMat.identity();\n        // tempMat.scale(tex.width, tex.height);\n        // tempMat.prepend(lt);\n        // tempMat.scale(1.0 / ts._width, 1.0 / ts._height);\n\n        tempMat.invert();\n        if (isSimple)\n        {\n            tempMat.prepend(uv.mapCoord);\n        }\n        else\n        {\n            shader.uniforms.uMapCoord = uv.mapCoord.toArray(true);\n            shader.uniforms.uClampFrame = uv.uClampFrame;\n            shader.uniforms.uClampOffset = uv.uClampOffset;\n        }\n\n        shader.uniforms.uTransform = tempMat.toArray(true);\n        shader.uniforms.uColor = core.utils.premultiplyTintToRgba(ts.tint, ts.worldAlpha,\n            shader.uniforms.uColor, baseTex.premultipliedAlpha);\n        shader.uniforms.translationMatrix = ts.transform.worldTransform.toArray(true);\n\n        shader.uniforms.uSampler = renderer.bindTexture(tex);\n\n        renderer.setBlendMode(core.utils.correctBlendMode(ts.blendMode, baseTex.premultipliedAlpha));\n\n        quad.vao.draw(this.renderer.gl.TRIANGLES, 6, 0);\n    }\n}\n\ncore.WebGLRenderer.registerPlugin('tilingSprite', TilingSpriteRenderer);\n"]}