{"version":3,"sources":["../../src/mesh/Plane.js"],"names":["Plane","texture","verticesX","verticesY","_ready","drawMode","DRAW_MODES","TRIANGLES","refresh","_refresh","_texture","total","verts","colors","uvs","indices","segmentsX","segmentsY","sizeX","width","sizeY","height","i","x","y","push","totalSub","xpos","ypos","value","value2","value3","value4","vertices","Float32Array","Uint16Array","dirty","indexDirty","multiplyUvs","_onTextureUpdate","prototype","call"],"mappings":";;;;AAAA;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;IAeqBA,K;;;AAEjB;;;;;AAKA,mBAAYC,OAAZ,EAAqBC,SAArB,EAAgCC,SAAhC,EACA;AAAA;;AAGI;;;;;;;AAHJ,qDACI,iBAAMF,OAAN,CADJ;;AAUI,cAAKG,MAAL,GAAc,IAAd;;AAEA,cAAKF,SAAL,GAAiBA,aAAa,EAA9B;AACA,cAAKC,SAAL,GAAiBA,aAAa,EAA9B;;AAEA,cAAKE,QAAL,GAAgB,eAAKC,UAAL,CAAgBC,SAAhC;AACA,cAAKC,OAAL;AAhBJ;AAiBC;;AAED;;;;;;oBAIAC,Q,uBACA;AACI,YAAMR,UAAU,KAAKS,QAArB;AACA,YAAMC,QAAQ,KAAKT,SAAL,GAAiB,KAAKC,SAApC;AACA,YAAMS,QAAQ,EAAd;AACA,YAAMC,SAAS,EAAf;AACA,YAAMC,MAAM,EAAZ;AACA,YAAMC,UAAU,EAAhB;;AAEA,YAAMC,YAAY,KAAKd,SAAL,GAAiB,CAAnC;AACA,YAAMe,YAAY,KAAKd,SAAL,GAAiB,CAAnC;;AAEA,YAAMe,QAAQjB,QAAQkB,KAAR,GAAgBH,SAA9B;AACA,YAAMI,QAAQnB,QAAQoB,MAAR,GAAiBJ,SAA/B;;AAEA,aAAK,IAAIK,IAAI,CAAb,EAAgBA,IAAIX,KAApB,EAA2BW,GAA3B,EACA;AACI,gBAAMC,IAAKD,IAAI,KAAKpB,SAApB;AACA,gBAAMsB,IAAMF,IAAI,KAAKpB,SAAV,GAAuB,CAAlC;;AAEAU,kBAAMa,IAAN,CAAWF,IAAIL,KAAf,EAAsBM,IAAIJ,KAA1B;;AAEAN,gBAAIW,IAAJ,CAASF,IAAIP,SAAb,EAAwBQ,IAAIP,SAA5B;AACH;;AAED;;AAEA,YAAMS,WAAWV,YAAYC,SAA7B;;AAEA,aAAK,IAAIK,KAAI,CAAb,EAAgBA,KAAII,QAApB,EAA8BJ,IAA9B,EACA;AACI,gBAAMK,OAAOL,KAAIN,SAAjB;AACA,gBAAMY,OAAQN,KAAIN,SAAL,GAAkB,CAA/B;;AAEA,gBAAMa,QAASD,OAAO,KAAK1B,SAAb,GAA0ByB,IAAxC;AACA,gBAAMG,SAAUF,OAAO,KAAK1B,SAAb,GAA0ByB,IAA1B,GAAiC,CAAhD;AACA,gBAAMI,SAAU,CAACH,OAAO,CAAR,IAAa,KAAK1B,SAAnB,GAAgCyB,IAA/C;AACA,gBAAMK,SAAU,CAACJ,OAAO,CAAR,IAAa,KAAK1B,SAAnB,GAAgCyB,IAAhC,GAAuC,CAAtD;;AAEAZ,oBAAQU,IAAR,CAAaI,KAAb,EAAoBC,MAApB,EAA4BC,MAA5B;AACAhB,oBAAQU,IAAR,CAAaK,MAAb,EAAqBE,MAArB,EAA6BD,MAA7B;AACH;;AAED;AACA,aAAKE,QAAL,GAAgB,IAAIC,YAAJ,CAAiBtB,KAAjB,CAAhB;AACA,aAAKE,GAAL,GAAW,IAAIoB,YAAJ,CAAiBpB,GAAjB,CAAX;AACA,aAAKD,MAAL,GAAc,IAAIqB,YAAJ,CAAiBrB,MAAjB,CAAd;AACA,aAAKE,OAAL,GAAe,IAAIoB,WAAJ,CAAgBpB,OAAhB,CAAf;;AAEA,aAAKqB,KAAL;AACA,aAAKC,UAAL;;AAEA,aAAKC,WAAL;AACH,K;;AAED;;;;;;;oBAKAC,gB,+BACA;AACI,uBAAKC,SAAL,CAAeD,gBAAf,CAAgCE,IAAhC,CAAqC,IAArC;;AAEA;AACA,YAAI,KAAKrC,MAAT,EACA;AACI,iBAAKI,OAAL;AACH;AACJ,K;;;;;kBApGgBR,K","file":"Plane.js","sourcesContent":["import Mesh from './Mesh';\n\n/**\n * The Plane allows you to draw a texture across several points and them manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let Plane = new PIXI.Plane(PIXI.Texture.fromImage(\"snake.png\"), points);\n *  ```\n *\n * @class\n * @extends PIXI.mesh.Mesh\n * @memberof PIXI.mesh\n *\n */\nexport default class Plane extends Mesh\n{\n    /**\n     * @param {PIXI.Texture} texture - The texture to use on the Plane.\n     * @param {number} [verticesX=10] - The number of vertices in the x-axis\n     * @param {number} [verticesY=10] - The number of vertices in the y-axis\n     */\n    constructor(texture, verticesX, verticesY)\n    {\n        super(texture);\n\n        /**\n         * Tracker for if the Plane is ready to be drawn. Needed because Mesh ctor can\n         * call _onTextureUpdated which could call refresh too early.\n         *\n         * @member {boolean}\n         * @private\n         */\n        this._ready = true;\n\n        this.verticesX = verticesX || 10;\n        this.verticesY = verticesY || 10;\n\n        this.drawMode = Mesh.DRAW_MODES.TRIANGLES;\n        this.refresh();\n    }\n\n    /**\n     * Refreshes plane coordinates\n     *\n     */\n    _refresh()\n    {\n        const texture = this._texture;\n        const total = this.verticesX * this.verticesY;\n        const verts = [];\n        const colors = [];\n        const uvs = [];\n        const indices = [];\n\n        const segmentsX = this.verticesX - 1;\n        const segmentsY = this.verticesY - 1;\n\n        const sizeX = texture.width / segmentsX;\n        const sizeY = texture.height / segmentsY;\n\n        for (let i = 0; i < total; i++)\n        {\n            const x = (i % this.verticesX);\n            const y = ((i / this.verticesX) | 0);\n\n            verts.push(x * sizeX, y * sizeY);\n\n            uvs.push(x / segmentsX, y / segmentsY);\n        }\n\n        //  cons\n\n        const totalSub = segmentsX * segmentsY;\n\n        for (let i = 0; i < totalSub; i++)\n        {\n            const xpos = i % segmentsX;\n            const ypos = (i / segmentsX) | 0;\n\n            const value = (ypos * this.verticesX) + xpos;\n            const value2 = (ypos * this.verticesX) + xpos + 1;\n            const value3 = ((ypos + 1) * this.verticesX) + xpos;\n            const value4 = ((ypos + 1) * this.verticesX) + xpos + 1;\n\n            indices.push(value, value2, value3);\n            indices.push(value2, value4, value3);\n        }\n\n        // console.log(indices)\n        this.vertices = new Float32Array(verts);\n        this.uvs = new Float32Array(uvs);\n        this.colors = new Float32Array(colors);\n        this.indices = new Uint16Array(indices);\n\n        this.dirty++;\n        this.indexDirty++;\n\n        this.multiplyUvs();\n    }\n\n    /**\n     * Clear texture UVs when new texture is set\n     *\n     * @private\n     */\n    _onTextureUpdate()\n    {\n        Mesh.prototype._onTextureUpdate.call(this);\n\n        // wait for the Plane ctor to finish before calling refresh\n        if (this._ready)\n        {\n            this.refresh();\n        }\n    }\n\n}\n"]}