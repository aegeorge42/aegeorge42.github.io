{"version":3,"sources":["../../src/mesh/NineSlicePlane.js"],"names":["DEFAULT_BORDER_SIZE","NineSlicePlane","texture","leftWidth","topHeight","rightWidth","bottomHeight","_origWidth","orig","width","_origHeight","height","_width","_height","_leftWidth","_rightWidth","_topHeight","_bottomHeight","_cachedTint","_tintedTexture","_canvasUvs","refresh","updateHorizontalVertices","vertices","h","scale","updateVerticalVertices","w","_renderCanvas","renderer","context","transform","worldTransform","res","resolution","isTinted","tint","_texture","getTintedTexture","textureSource","baseTexture","source","uvs","u0","frame","x","v0","y","u1","v1","i","globalAlpha","worldAlpha","setBlendMode","blendMode","roundPixels","setTransform","a","b","c","d","tx","ty","row","col","ind","sw","Math","max","sh","dw","dh","drawImage","_refresh","_uvw","_uvh","dirty","multiplyUvs","value"],"mappings":"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","file":"NineSlicePlane.js","sourcesContent":["import Plane from './Plane';\nimport CanvasTinter from '../core/sprites/canvas/CanvasTinter';\n\nconst DEFAULT_BORDER_SIZE = 10;\n\n/**\n * The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful\n * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically\n *\n *```js\n * let Plane9 = new PIXI.NineSlicePlane(PIXI.Texture.fromImage('BoxWithRoundedCorners.png'), 15, 15, 15, 15);\n *  ```\n * <pre>\n *      A                          B\n *    +---+----------------------+---+\n *  C | 1 |          2           | 3 |\n *    +---+----------------------+---+\n *    |   |                      |   |\n *    | 4 |          5           | 6 |\n *    |   |                      |   |\n *    +---+----------------------+---+\n *  D | 7 |          8           | 9 |\n *    +---+----------------------+---+\n\n *  When changing this objects width and/or height:\n *     areas 1 3 7 and 9 will remain unscaled.\n *     areas 2 and 8 will be stretched horizontally\n *     areas 4 and 6 will be stretched vertically\n *     area 5 will be stretched both horizontally and vertically\n * </pre>\n *\n * @class\n * @extends PIXI.mesh.Plane\n * @memberof PIXI.mesh\n *\n */\nexport default class NineSlicePlane extends Plane\n{\n    /**\n     * @param {PIXI.Texture} texture - The texture to use on the NineSlicePlane.\n     * @param {int} [leftWidth=10] size of the left vertical bar (A)\n     * @param {int} [topHeight=10] size of the top horizontal bar (C)\n     * @param {int} [rightWidth=10] size of the right vertical bar (B)\n     * @param {int} [bottomHeight=10] size of the bottom horizontal bar (D)\n     */\n    constructor(texture, leftWidth, topHeight, rightWidth, bottomHeight)\n    {\n        super(texture, 4, 4);\n\n        this._origWidth = texture.orig.width;\n        this._origHeight = texture.orig.height;\n\n        /**\n         * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n         *\n         * @member {number}\n         * @memberof PIXI.NineSlicePlane#\n         * @override\n         */\n        this._width = this._origWidth;\n\n        /**\n         * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n         *\n         * @member {number}\n         * @memberof PIXI.NineSlicePlane#\n         * @override\n         */\n        this._height = this._origHeight;\n\n        /**\n         * The width of the left column (a)\n         *\n         * @member {number}\n         * @memberof PIXI.NineSlicePlane#\n         * @override\n         */\n        this._leftWidth = typeof leftWidth !== 'undefined' ? leftWidth : DEFAULT_BORDER_SIZE;\n\n        /**\n         * The width of the right column (b)\n         *\n         * @member {number}\n         * @memberof PIXI.NineSlicePlane#\n         * @override\n         */\n        this._rightWidth = typeof rightWidth !== 'undefined' ? rightWidth : DEFAULT_BORDER_SIZE;\n\n        /**\n         * The height of the top row (c)\n         *\n         * @member {number}\n         * @memberof PIXI.NineSlicePlane#\n         * @override\n         */\n        this._topHeight = typeof topHeight !== 'undefined' ? topHeight : DEFAULT_BORDER_SIZE;\n\n        /**\n         * The height of the bottom row (d)\n         *\n         * @member {number}\n         * @memberof PIXI.NineSlicePlane#\n         * @override\n         */\n        this._bottomHeight = typeof bottomHeight !== 'undefined' ? bottomHeight : DEFAULT_BORDER_SIZE;\n\n        /**\n         * Cached tint value so we can tell when the tint is changed.\n         *\n         * @member {number}\n         * @protected\n         */\n        this._cachedTint = 0xFFFFFF;\n\n        /**\n         * Cached tinted texture.\n         *\n         * @member {HTMLCanvasElement}\n         * @protected\n         */\n        this._tintedTexture = null;\n\n        /**\n         * Temporary storage for canvas source coords\n         *\n         * @member {number[]}\n         * @private\n         */\n        this._canvasUvs = null;\n\n        this.refresh(true);\n    }\n\n    /**\n     * Updates the horizontal vertices.\n     *\n     */\n    updateHorizontalVertices()\n    {\n        const vertices = this.vertices;\n\n        const h = this._topHeight + this._bottomHeight;\n        const scale = this._height > h ? 1.0 : this._height / h;\n\n        vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight * scale;\n        vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - (this._bottomHeight * scale);\n        vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;\n    }\n\n    /**\n     * Updates the vertical vertices.\n     *\n     */\n    updateVerticalVertices()\n    {\n        const vertices = this.vertices;\n\n        const w = this._leftWidth + this._rightWidth;\n        const scale = this._width > w ? 1.0 : this._width / w;\n\n        vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth * scale;\n        vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - (this._rightWidth * scale);\n        vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;\n    }\n\n    /**\n     * Renders the object using the Canvas renderer\n     *\n     * @private\n     * @param {PIXI.CanvasRenderer} renderer - The canvas renderer to render with.\n     */\n    _renderCanvas(renderer)\n    {\n        const context = renderer.context;\n        const transform = this.worldTransform;\n        const res = renderer.resolution;\n        const isTinted = this.tint !== 0xFFFFFF;\n        const texture = this._texture;\n\n        // Work out tinting\n        if (isTinted)\n        {\n            if (this._cachedTint !== this.tint)\n            {\n                // Tint has changed, need to update the tinted texture and use that instead\n\n                this._cachedTint = this.tint;\n\n                this._tintedTexture = CanvasTinter.getTintedTexture(this, this.tint);\n            }\n        }\n\n        const textureSource = !isTinted ? texture.baseTexture.source : this._tintedTexture;\n\n        if (!this._canvasUvs)\n        {\n            this._canvasUvs = [0, 0, 0, 0, 0, 0, 0, 0];\n        }\n\n        const vertices = this.vertices;\n        const uvs = this._canvasUvs;\n        const u0 = isTinted ? 0 : texture.frame.x;\n        const v0 = isTinted ? 0 : texture.frame.y;\n        const u1 = u0 + texture.frame.width;\n        const v1 = v0 + texture.frame.height;\n\n        uvs[0] = u0;\n        uvs[1] = u0 + this._leftWidth;\n        uvs[2] = u1 - this._rightWidth;\n        uvs[3] = u1;\n        uvs[4] = v0;\n        uvs[5] = v0 + this._topHeight;\n        uvs[6] = v1 - this._bottomHeight;\n        uvs[7] = v1;\n\n        for (let i = 0; i < 8; i++)\n        {\n            uvs[i] *= texture.baseTexture.resolution;\n        }\n\n        context.globalAlpha = this.worldAlpha;\n        renderer.setBlendMode(this.blendMode);\n\n        if (renderer.roundPixels)\n        {\n            context.setTransform(\n                transform.a * res,\n                transform.b * res,\n                transform.c * res,\n                transform.d * res,\n                (transform.tx * res) | 0,\n                (transform.ty * res) | 0\n            );\n        }\n        else\n        {\n            context.setTransform(\n                transform.a * res,\n                transform.b * res,\n                transform.c * res,\n                transform.d * res,\n                transform.tx * res,\n                transform.ty * res\n            );\n        }\n\n        for (let row = 0; row < 3; row++)\n        {\n            for (let col = 0; col < 3; col++)\n            {\n                const ind = (col * 2) + (row * 8);\n                const sw = Math.max(1, uvs[col + 1] - uvs[col]);\n                const sh = Math.max(1, uvs[row + 5] - uvs[row + 4]);\n                const dw = Math.max(1, vertices[ind + 10] - vertices[ind]);\n                const dh = Math.max(1, vertices[ind + 11] - vertices[ind + 1]);\n\n                context.drawImage(textureSource, uvs[col], uvs[row + 4], sw, sh,\n                    vertices[ind], vertices[ind + 1], dw, dh);\n            }\n        }\n    }\n\n    /**\n     * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     */\n    get width()\n    {\n        return this._width;\n    }\n\n    set width(value) // eslint-disable-line require-jsdoc\n    {\n        this._width = value;\n        this._refresh();\n    }\n\n    /**\n     * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     */\n    get height()\n    {\n        return this._height;\n    }\n\n    set height(value) // eslint-disable-line require-jsdoc\n    {\n        this._height = value;\n        this._refresh();\n    }\n\n    /**\n     * The width of the left column\n     *\n     * @member {number}\n     */\n    get leftWidth()\n    {\n        return this._leftWidth;\n    }\n\n    set leftWidth(value) // eslint-disable-line require-jsdoc\n    {\n        this._leftWidth = value;\n        this._refresh();\n    }\n\n    /**\n     * The width of the right column\n     *\n     * @member {number}\n     */\n    get rightWidth()\n    {\n        return this._rightWidth;\n    }\n\n    set rightWidth(value) // eslint-disable-line require-jsdoc\n    {\n        this._rightWidth = value;\n        this._refresh();\n    }\n\n    /**\n     * The height of the top row\n     *\n     * @member {number}\n     */\n    get topHeight()\n    {\n        return this._topHeight;\n    }\n\n    set topHeight(value) // eslint-disable-line require-jsdoc\n    {\n        this._topHeight = value;\n        this._refresh();\n    }\n\n    /**\n     * The height of the bottom row\n     *\n     * @member {number}\n     */\n    get bottomHeight()\n    {\n        return this._bottomHeight;\n    }\n\n    set bottomHeight(value) // eslint-disable-line require-jsdoc\n    {\n        this._bottomHeight = value;\n        this._refresh();\n    }\n\n    /**\n     * Refreshes NineSlicePlane coords. All of them.\n     */\n    _refresh()\n    {\n        super._refresh();\n\n        const uvs = this.uvs;\n        const texture = this._texture;\n\n        this._origWidth = texture.orig.width;\n        this._origHeight = texture.orig.height;\n\n        const _uvw = 1.0 / this._origWidth;\n        const _uvh = 1.0 / this._origHeight;\n\n        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n\n        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);\n        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);\n\n        this.updateHorizontalVertices();\n        this.updateVerticalVertices();\n\n        this.dirty++;\n\n        this.multiplyUvs();\n    }\n}\n"]}