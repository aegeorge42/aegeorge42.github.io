{"version":3,"sources":["../../../src/mesh/canvas/CanvasMeshRenderer.js"],"names":["core","MeshSpriteRenderer","renderer","render","mesh","context","transform","worldTransform","res","resolution","roundPixels","setTransform","a","b","c","d","tx","ty","globalAlpha","worldAlpha","setBlendMode","blendMode","drawMode","DRAW_MODES","TRIANGLE_MESH","_renderTriangleMesh","_renderTriangles","length","vertices","i","index","_renderDrawTriangle","indices","index0","index1","index2","uvs","texture","_texture","valid","base","baseTexture","textureSource","source","textureWidth","width","textureHeight","height","u0","u1","u2","v0","v1","v2","uploadUvTransform","ut","_uvTransform","mapCoord","x0","x1","x2","y0","y1","y2","canvasPadding","paddingX","Math","abs","paddingY","centerX","centerY","normX","normY","dist","sqrt","save","beginPath","moveTo","lineTo","closePath","clip","delta","deltaA","deltaB","deltaC","deltaD","deltaE","deltaF","drawImage","restore","invalidateBlendMode","renderMeshFlat","fillStyle","fill","destroy","CanvasRenderer","registerPlugin"],"mappings":"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","file":"CanvasMeshRenderer.js","sourcesContent":["import * as core from '../../core';\nimport { default as Mesh } from '../Mesh';\n\n/**\n * Renderer dedicated to meshes.\n *\n * @class\n * @private\n * @memberof PIXI\n */\nexport default class MeshSpriteRenderer\n{\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - The renderer this downport works for\n     */\n    constructor(renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Renders the Mesh\n     *\n     * @param {PIXI.mesh.Mesh} mesh - the Mesh to render\n     */\n    render(mesh)\n    {\n        const renderer = this.renderer;\n        const context = renderer.context;\n\n        const transform = mesh.worldTransform;\n        const res = renderer.resolution;\n\n        if (renderer.roundPixels)\n        {\n            context.setTransform(\n                transform.a * res,\n                transform.b * res,\n                transform.c * res,\n                transform.d * res,\n                (transform.tx * res) | 0,\n                (transform.ty * res) | 0\n            );\n        }\n        else\n        {\n            context.setTransform(\n                transform.a * res,\n                transform.b * res,\n                transform.c * res,\n                transform.d * res,\n                transform.tx * res,\n                transform.ty * res\n            );\n        }\n\n        renderer.context.globalAlpha = mesh.worldAlpha;\n        renderer.setBlendMode(mesh.blendMode);\n\n        if (mesh.drawMode === Mesh.DRAW_MODES.TRIANGLE_MESH)\n        {\n            this._renderTriangleMesh(mesh);\n        }\n        else\n        {\n            this._renderTriangles(mesh);\n        }\n    }\n\n    /**\n     * Draws the object in Triangle Mesh mode\n     *\n     * @private\n     * @param {PIXI.mesh.Mesh} mesh - the Mesh to render\n     */\n    _renderTriangleMesh(mesh)\n    {\n        // draw triangles!!\n        const length = mesh.vertices.length / 2;\n\n        for (let i = 0; i < length - 2; i++)\n        {\n            // draw some triangles!\n            const index = i * 2;\n\n            this._renderDrawTriangle(mesh, index, (index + 2), (index + 4));\n        }\n    }\n\n    /**\n     * Draws the object in triangle mode using canvas\n     *\n     * @private\n     * @param {PIXI.mesh.Mesh} mesh - the current mesh\n     */\n    _renderTriangles(mesh)\n    {\n        // draw triangles!!\n        const indices = mesh.indices;\n        const length = indices.length;\n\n        for (let i = 0; i < length; i += 3)\n        {\n            // draw some triangles!\n            const index0 = indices[i] * 2;\n            const index1 = indices[i + 1] * 2;\n            const index2 = indices[i + 2] * 2;\n\n            this._renderDrawTriangle(mesh, index0, index1, index2);\n        }\n    }\n\n    /**\n     * Draws one of the triangles that from the Mesh\n     *\n     * @private\n     * @param {PIXI.mesh.Mesh} mesh - the current mesh\n     * @param {number} index0 - the index of the first vertex\n     * @param {number} index1 - the index of the second vertex\n     * @param {number} index2 - the index of the third vertex\n     */\n    _renderDrawTriangle(mesh, index0, index1, index2)\n    {\n        const context = this.renderer.context;\n        const uvs = mesh.uvs;\n        const vertices = mesh.vertices;\n        const texture = mesh._texture;\n\n        if (!texture.valid)\n        {\n            return;\n        }\n\n        const base = texture.baseTexture;\n        const textureSource = base.source;\n        const textureWidth = base.width;\n        const textureHeight = base.height;\n\n        let u0;\n        let u1;\n        let u2;\n        let v0;\n        let v1;\n        let v2;\n\n        if (mesh.uploadUvTransform)\n        {\n            const ut = mesh._uvTransform.mapCoord;\n\n            u0 = ((uvs[index0] * ut.a) + (uvs[index0 + 1] * ut.c) + ut.tx) * base.width;\n            u1 = ((uvs[index1] * ut.a) + (uvs[index1 + 1] * ut.c) + ut.tx) * base.width;\n            u2 = ((uvs[index2] * ut.a) + (uvs[index2 + 1] * ut.c) + ut.tx) * base.width;\n            v0 = ((uvs[index0] * ut.b) + (uvs[index0 + 1] * ut.d) + ut.ty) * base.height;\n            v1 = ((uvs[index1] * ut.b) + (uvs[index1 + 1] * ut.d) + ut.ty) * base.height;\n            v2 = ((uvs[index2] * ut.b) + (uvs[index2 + 1] * ut.d) + ut.ty) * base.height;\n        }\n        else\n        {\n            u0 = uvs[index0] * base.width;\n            u1 = uvs[index1] * base.width;\n            u2 = uvs[index2] * base.width;\n            v0 = uvs[index0 + 1] * base.height;\n            v1 = uvs[index1 + 1] * base.height;\n            v2 = uvs[index2 + 1] * base.height;\n        }\n\n        let x0 = vertices[index0];\n        let x1 = vertices[index1];\n        let x2 = vertices[index2];\n        let y0 = vertices[index0 + 1];\n        let y1 = vertices[index1 + 1];\n        let y2 = vertices[index2 + 1];\n\n        const canvasPadding = mesh.canvasPadding / this.renderer.resolution;\n\n        if (canvasPadding > 0)\n        {\n            const paddingX = canvasPadding / Math.abs(mesh.worldTransform.a);\n            const paddingY = canvasPadding / Math.abs(mesh.worldTransform.d);\n            const centerX = (x0 + x1 + x2) / 3;\n            const centerY = (y0 + y1 + y2) / 3;\n\n            let normX = x0 - centerX;\n            let normY = y0 - centerY;\n\n            let dist = Math.sqrt((normX * normX) + (normY * normY));\n\n            x0 = centerX + ((normX / dist) * (dist + paddingX));\n            y0 = centerY + ((normY / dist) * (dist + paddingY));\n\n            //\n\n            normX = x1 - centerX;\n            normY = y1 - centerY;\n\n            dist = Math.sqrt((normX * normX) + (normY * normY));\n            x1 = centerX + ((normX / dist) * (dist + paddingX));\n            y1 = centerY + ((normY / dist) * (dist + paddingY));\n\n            normX = x2 - centerX;\n            normY = y2 - centerY;\n\n            dist = Math.sqrt((normX * normX) + (normY * normY));\n            x2 = centerX + ((normX / dist) * (dist + paddingX));\n            y2 = centerY + ((normY / dist) * (dist + paddingY));\n        }\n\n        context.save();\n        context.beginPath();\n\n        context.moveTo(x0, y0);\n        context.lineTo(x1, y1);\n        context.lineTo(x2, y2);\n\n        context.closePath();\n\n        context.clip();\n\n        // Compute matrix transform\n        const delta = (u0 * v1) + (v0 * u2) + (u1 * v2) - (v1 * u2) - (v0 * u1) - (u0 * v2);\n        const deltaA = (x0 * v1) + (v0 * x2) + (x1 * v2) - (v1 * x2) - (v0 * x1) - (x0 * v2);\n        const deltaB = (u0 * x1) + (x0 * u2) + (u1 * x2) - (x1 * u2) - (x0 * u1) - (u0 * x2);\n        const deltaC = (u0 * v1 * x2) + (v0 * x1 * u2) + (x0 * u1 * v2) - (x0 * v1 * u2) - (v0 * u1 * x2) - (u0 * x1 * v2);\n        const deltaD = (y0 * v1) + (v0 * y2) + (y1 * v2) - (v1 * y2) - (v0 * y1) - (y0 * v2);\n        const deltaE = (u0 * y1) + (y0 * u2) + (u1 * y2) - (y1 * u2) - (y0 * u1) - (u0 * y2);\n        const deltaF = (u0 * v1 * y2) + (v0 * y1 * u2) + (y0 * u1 * v2) - (y0 * v1 * u2) - (v0 * u1 * y2) - (u0 * y1 * v2);\n\n        context.transform(\n            deltaA / delta,\n            deltaD / delta,\n            deltaB / delta,\n            deltaE / delta,\n            deltaC / delta,\n            deltaF / delta\n        );\n\n        context.drawImage(\n            textureSource,\n            0,\n            0,\n            textureWidth * base.resolution,\n            textureHeight * base.resolution,\n            0,\n            0,\n            textureWidth,\n            textureHeight\n        );\n\n        context.restore();\n        this.renderer.invalidateBlendMode();\n    }\n\n    /**\n     * Renders a flat Mesh\n     *\n     * @private\n     * @param {PIXI.mesh.Mesh} mesh - The Mesh to render\n     */\n    renderMeshFlat(mesh)\n    {\n        const context = this.renderer.context;\n        const vertices = mesh.vertices;\n        const length = vertices.length / 2;\n\n        // this.count++;\n\n        context.beginPath();\n\n        for (let i = 1; i < length - 2; ++i)\n        {\n            // draw some triangles!\n            const index = i * 2;\n\n            const x0 = vertices[index];\n            const y0 = vertices[index + 1];\n\n            const x1 = vertices[index + 2];\n            const y1 = vertices[index + 3];\n\n            const x2 = vertices[index + 4];\n            const y2 = vertices[index + 5];\n\n            context.moveTo(x0, y0);\n            context.lineTo(x1, y1);\n            context.lineTo(x2, y2);\n        }\n\n        context.fillStyle = '#FF0000';\n        context.fill();\n        context.closePath();\n    }\n\n    /**\n     * destroy the the renderer.\n     *\n     */\n    destroy()\n    {\n        this.renderer = null;\n    }\n}\n\ncore.CanvasRenderer.registerPlugin('mesh', MeshSpriteRenderer);\n"]}